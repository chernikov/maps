#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace maps.Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="maps")]
	public partial class mapsDbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertUserRole(UserRole instance);
    partial void UpdateUserRole(UserRole instance);
    partial void DeleteUserRole(UserRole instance);
    partial void InsertSocial(Social instance);
    partial void UpdateSocial(Social instance);
    partial void DeleteSocial(Social instance);
    partial void InsertBicycleDirectionLine(BicycleDirectionLine instance);
    partial void UpdateBicycleDirectionLine(BicycleDirectionLine instance);
    partial void DeleteBicycleDirectionLine(BicycleDirectionLine instance);
    partial void InsertBicycleParkingVote(BicycleParkingVote instance);
    partial void UpdateBicycleParkingVote(BicycleParkingVote instance);
    partial void DeleteBicycleParkingVote(BicycleParkingVote instance);
    partial void InsertGoal(Goal instance);
    partial void UpdateGoal(Goal instance);
    partial void DeleteGoal(Goal instance);
    partial void InsertGoalCell(GoalCell instance);
    partial void UpdateGoalCell(GoalCell instance);
    partial void DeleteGoalCell(GoalCell instance);
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertBicycleParking(BicycleParking instance);
    partial void UpdateBicycleParking(BicycleParking instance);
    partial void DeleteBicycleParking(BicycleParking instance);
    partial void InsertBycicleDirection(BycicleDirection instance);
    partial void UpdateBycicleDirection(BycicleDirection instance);
    partial void DeleteBycicleDirection(BycicleDirection instance);
    partial void InsertBicycleLine(BicycleLine instance);
    partial void UpdateBicycleLine(BicycleLine instance);
    partial void DeleteBicycleLine(BicycleLine instance);
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    partial void InsertUtilityPhoto(UtilityPhoto instance);
    partial void UpdateUtilityPhoto(UtilityPhoto instance);
    partial void DeleteUtilityPhoto(UtilityPhoto instance);
    partial void InsertUtilityIssueComment(UtilityIssueComment instance);
    partial void UpdateUtilityIssueComment(UtilityIssueComment instance);
    partial void DeleteUtilityIssueComment(UtilityIssueComment instance);
    partial void InsertUtilityIssueTag(UtilityIssueTag instance);
    partial void UpdateUtilityIssueTag(UtilityIssueTag instance);
    partial void DeleteUtilityIssueTag(UtilityIssueTag instance);
    partial void InsertUtilityTag(UtilityTag instance);
    partial void UpdateUtilityTag(UtilityTag instance);
    partial void DeleteUtilityTag(UtilityTag instance);
    partial void InsertUtilityDepartment(UtilityDepartment instance);
    partial void UpdateUtilityDepartment(UtilityDepartment instance);
    partial void DeleteUtilityDepartment(UtilityDepartment instance);
<<<<<<< HEAD
    partial void InsertUtilityIssue(UtilityIssue instance);
    partial void UpdateUtilityIssue(UtilityIssue instance);
    partial void DeleteUtilityIssue(UtilityIssue instance);
    partial void InsertUtilityIssueHistory(UtilityIssueHistory instance);
    partial void UpdateUtilityIssueHistory(UtilityIssueHistory instance);
    partial void DeleteUtilityIssueHistory(UtilityIssueHistory instance);
=======
    partial void InsertInstagramPhoto(InstagramPhoto instance);
    partial void UpdateInstagramPhoto(InstagramPhoto instance);
    partial void DeleteInstagramPhoto(InstagramPhoto instance);
>>>>>>> origin/master
    #endregion
		
		public mapsDbDataContext() : 
				base(global::maps.Model.Properties.Settings.Default.mapsConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public mapsDbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public mapsDbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public mapsDbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public mapsDbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<UserRole> UserRoles
		{
			get
			{
				return this.GetTable<UserRole>();
			}
		}
		
		public System.Data.Linq.Table<Social> Socials
		{
			get
			{
				return this.GetTable<Social>();
			}
		}
		
		public System.Data.Linq.Table<BicycleDirectionLine> BicycleDirectionLines
		{
			get
			{
				return this.GetTable<BicycleDirectionLine>();
			}
		}
		
		public System.Data.Linq.Table<BicycleParkingVote> BicycleParkingVotes
		{
			get
			{
				return this.GetTable<BicycleParkingVote>();
			}
		}
		
		public System.Data.Linq.Table<Goal> Goals
		{
			get
			{
				return this.GetTable<Goal>();
			}
		}
		
		public System.Data.Linq.Table<GoalCell> GoalCells
		{
			get
			{
				return this.GetTable<GoalCell>();
			}
		}
		
		public System.Data.Linq.Table<City> Cities
		{
			get
			{
				return this.GetTable<City>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<BicycleParking> BicycleParkings
		{
			get
			{
				return this.GetTable<BicycleParking>();
			}
		}
		
		public System.Data.Linq.Table<BycicleDirection> BycicleDirections
		{
			get
			{
				return this.GetTable<BycicleDirection>();
			}
		}
		
		public System.Data.Linq.Table<BicycleLine> BicycleLines
		{
			get
			{
				return this.GetTable<BicycleLine>();
			}
		}
		
		public System.Data.Linq.Table<Comment> Comments
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
		
		public System.Data.Linq.Table<UtilityPhoto> UtilityPhotos
		{
			get
			{
				return this.GetTable<UtilityPhoto>();
			}
		}
		
		public System.Data.Linq.Table<UtilityIssueComment> UtilityIssueComments
		{
			get
			{
				return this.GetTable<UtilityIssueComment>();
			}
		}
		
		public System.Data.Linq.Table<UtilityIssueTag> UtilityIssueTags
		{
			get
			{
				return this.GetTable<UtilityIssueTag>();
			}
		}
		
		public System.Data.Linq.Table<UtilityTag> UtilityTags
		{
			get
			{
				return this.GetTable<UtilityTag>();
			}
		}
		
		public System.Data.Linq.Table<UtilityDepartment> UtilityDepartments
		{
			get
			{
				return this.GetTable<UtilityDepartment>();
			}
		}
		
		public System.Data.Linq.Table<UtilityIssue> UtilityIssues
		{
			get
			{
				return this.GetTable<UtilityIssue>();
			}
		}
		
		public System.Data.Linq.Table<UtilityIssueHistory> UtilityIssueHistories
		{
			get
			{
				return this.GetTable<UtilityIssueHistory>();
			}
		}
		
		public System.Data.Linq.Table<InstagramPhoto> InstagramPhotos
		{
			get
			{
				return this.GetTable<InstagramPhoto>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Code;
		
		private string _Name;
		
		private EntitySet<UserRole> _UserRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Role()
		{
			this._UserRoles = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRoles), new Action<UserRole>(this.detach_UserRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserRole", Storage="_UserRoles", ThisKey="ID", OtherKey="RoleID")]
		public EntitySet<UserRole> UserRoles
		{
			get
			{
				return this._UserRoles;
			}
			set
			{
				this._UserRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserRole")]
	public partial class UserRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _RoleID;
		
		private int _UserID;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public UserRole()
		{
			this._Role = default(EntityRef<Role>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int NOT NULL")]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserRole", Storage="_Role", ThisKey="RoleID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.UserRoles.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.UserRoles.Add(this);
						this._RoleID = value.ID;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRole", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserRoles.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserRoles.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Social")]
	public partial class Social : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private string _Identified;
		
		private int _Provider;
		
		private string _UserInfo;
		
		private string _JsonResource;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnIdentifiedChanging(string value);
    partial void OnIdentifiedChanged();
    partial void OnProviderChanging(int value);
    partial void OnProviderChanged();
    partial void OnUserInfoChanging(string value);
    partial void OnUserInfoChanged();
    partial void OnJsonResourceChanging(string value);
    partial void OnJsonResourceChanged();
    #endregion
		
		public Social()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Identified", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Identified
		{
			get
			{
				return this._Identified;
			}
			set
			{
				if ((this._Identified != value))
				{
					this.OnIdentifiedChanging(value);
					this.SendPropertyChanging();
					this._Identified = value;
					this.SendPropertyChanged("Identified");
					this.OnIdentifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Provider", DbType="Int NOT NULL")]
		public int Provider
		{
			get
			{
				return this._Provider;
			}
			set
			{
				if ((this._Provider != value))
				{
					this.OnProviderChanging(value);
					this.SendPropertyChanging();
					this._Provider = value;
					this.SendPropertyChanged("Provider");
					this.OnProviderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserInfo", DbType="NVarChar(MAX)")]
		public string UserInfo
		{
			get
			{
				return this._UserInfo;
			}
			set
			{
				if ((this._UserInfo != value))
				{
					this.OnUserInfoChanging(value);
					this.SendPropertyChanging();
					this._UserInfo = value;
					this.SendPropertyChanged("UserInfo");
					this.OnUserInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JsonResource", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string JsonResource
		{
			get
			{
				return this._JsonResource;
			}
			set
			{
				if ((this._JsonResource != value))
				{
					this.OnJsonResourceChanging(value);
					this.SendPropertyChanging();
					this._JsonResource = value;
					this.SendPropertyChanged("JsonResource");
					this.OnJsonResourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Social", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Socials.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Socials.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BicycleDirectionLine")]
	public partial class BicycleDirectionLine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _BicycleDirectionID;
		
		private int _BicycleLineID;
		
		private EntityRef<BycicleDirection> _BycicleDirection;
		
		private EntityRef<BicycleLine> _BicycleLine;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnBicycleDirectionIDChanging(int value);
    partial void OnBicycleDirectionIDChanged();
    partial void OnBicycleLineIDChanging(int value);
    partial void OnBicycleLineIDChanged();
    #endregion
		
		public BicycleDirectionLine()
		{
			this._BycicleDirection = default(EntityRef<BycicleDirection>);
			this._BicycleLine = default(EntityRef<BicycleLine>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BicycleDirectionID", DbType="Int NOT NULL")]
		public int BicycleDirectionID
		{
			get
			{
				return this._BicycleDirectionID;
			}
			set
			{
				if ((this._BicycleDirectionID != value))
				{
					if (this._BycicleDirection.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBicycleDirectionIDChanging(value);
					this.SendPropertyChanging();
					this._BicycleDirectionID = value;
					this.SendPropertyChanged("BicycleDirectionID");
					this.OnBicycleDirectionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BicycleLineID", DbType="Int NOT NULL")]
		public int BicycleLineID
		{
			get
			{
				return this._BicycleLineID;
			}
			set
			{
				if ((this._BicycleLineID != value))
				{
					if (this._BicycleLine.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBicycleLineIDChanging(value);
					this.SendPropertyChanging();
					this._BicycleLineID = value;
					this.SendPropertyChanged("BicycleLineID");
					this.OnBicycleLineIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BycicleDirection_BicycleDirectionLine", Storage="_BycicleDirection", ThisKey="BicycleDirectionID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public BycicleDirection BycicleDirection
		{
			get
			{
				return this._BycicleDirection.Entity;
			}
			set
			{
				BycicleDirection previousValue = this._BycicleDirection.Entity;
				if (((previousValue != value) 
							|| (this._BycicleDirection.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BycicleDirection.Entity = null;
						previousValue.BicycleDirectionLines.Remove(this);
					}
					this._BycicleDirection.Entity = value;
					if ((value != null))
					{
						value.BicycleDirectionLines.Add(this);
						this._BicycleDirectionID = value.ID;
					}
					else
					{
						this._BicycleDirectionID = default(int);
					}
					this.SendPropertyChanged("BycicleDirection");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BicycleLine_BicycleDirectionLine", Storage="_BicycleLine", ThisKey="BicycleLineID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public BicycleLine BicycleLine
		{
			get
			{
				return this._BicycleLine.Entity;
			}
			set
			{
				BicycleLine previousValue = this._BicycleLine.Entity;
				if (((previousValue != value) 
							|| (this._BicycleLine.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BicycleLine.Entity = null;
						previousValue.BicycleDirectionLines.Remove(this);
					}
					this._BicycleLine.Entity = value;
					if ((value != null))
					{
						value.BicycleDirectionLines.Add(this);
						this._BicycleLineID = value.ID;
					}
					else
					{
						this._BicycleLineID = default(int);
					}
					this.SendPropertyChanged("BicycleLine");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BicycleParkingVote")]
	public partial class BicycleParkingVote : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private int _BicycleParkingID;
		
		private int _Mark;
		
		private EntityRef<User> _User;
		
		private EntityRef<BicycleParking> _BicycleParking;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnBicycleParkingIDChanging(int value);
    partial void OnBicycleParkingIDChanged();
    partial void OnMarkChanging(int value);
    partial void OnMarkChanged();
    #endregion
		
		public BicycleParkingVote()
		{
			this._User = default(EntityRef<User>);
			this._BicycleParking = default(EntityRef<BicycleParking>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BicycleParkingID", DbType="Int NOT NULL")]
		public int BicycleParkingID
		{
			get
			{
				return this._BicycleParkingID;
			}
			set
			{
				if ((this._BicycleParkingID != value))
				{
					if (this._BicycleParking.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBicycleParkingIDChanging(value);
					this.SendPropertyChanging();
					this._BicycleParkingID = value;
					this.SendPropertyChanged("BicycleParkingID");
					this.OnBicycleParkingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mark", DbType="Int NOT NULL")]
		public int Mark
		{
			get
			{
				return this._Mark;
			}
			set
			{
				if ((this._Mark != value))
				{
					this.OnMarkChanging(value);
					this.SendPropertyChanging();
					this._Mark = value;
					this.SendPropertyChanged("Mark");
					this.OnMarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_BicycleParkingVote", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.BicycleParkingVotes.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.BicycleParkingVotes.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BicycleParking_BicycleParkingVote", Storage="_BicycleParking", ThisKey="BicycleParkingID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public BicycleParking BicycleParking
		{
			get
			{
				return this._BicycleParking.Entity;
			}
			set
			{
				BicycleParking previousValue = this._BicycleParking.Entity;
				if (((previousValue != value) 
							|| (this._BicycleParking.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BicycleParking.Entity = null;
						previousValue.BicycleParkingVotes.Remove(this);
					}
					this._BicycleParking.Entity = value;
					if ((value != null))
					{
						value.BicycleParkingVotes.Add(this);
						this._BicycleParkingID = value.ID;
					}
					else
					{
						this._BicycleParkingID = default(int);
					}
					this.SendPropertyChanged("BicycleParking");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Goal")]
	public partial class Goal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private bool _IsPublic;
		
		private string _Url;
		
		private string _Text;
		
		private int _Count;
		
		private int _Progress;
		
		private System.DateTime _AddedDate;
		
		private bool _IsReady;
		
		private int _ColumnsCount;
		
		private EntitySet<GoalCell> _GoalCells;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnIsPublicChanging(bool value);
    partial void OnIsPublicChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnCountChanging(int value);
    partial void OnCountChanged();
    partial void OnProgressChanging(int value);
    partial void OnProgressChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnIsReadyChanging(bool value);
    partial void OnIsReadyChanged();
    partial void OnColumnsCountChanging(int value);
    partial void OnColumnsCountChanged();
    #endregion
		
		public Goal()
		{
			this._GoalCells = new EntitySet<GoalCell>(new Action<GoalCell>(this.attach_GoalCells), new Action<GoalCell>(this.detach_GoalCells));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPublic", DbType="Bit NOT NULL")]
		public bool IsPublic
		{
			get
			{
				return this._IsPublic;
			}
			set
			{
				if ((this._IsPublic != value))
				{
					this.OnIsPublicChanging(value);
					this.SendPropertyChanging();
					this._IsPublic = value;
					this.SendPropertyChanged("IsPublic");
					this.OnIsPublicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(140) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(140) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Count", DbType="Int NOT NULL")]
		public int Count
		{
			get
			{
				return this._Count;
			}
			set
			{
				if ((this._Count != value))
				{
					this.OnCountChanging(value);
					this.SendPropertyChanging();
					this._Count = value;
					this.SendPropertyChanged("Count");
					this.OnCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Progress", DbType="Int NOT NULL")]
		public int Progress
		{
			get
			{
				return this._Progress;
			}
			set
			{
				if ((this._Progress != value))
				{
					this.OnProgressChanging(value);
					this.SendPropertyChanging();
					this._Progress = value;
					this.SendPropertyChanged("Progress");
					this.OnProgressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsReady", DbType="Bit NOT NULL")]
		public bool IsReady
		{
			get
			{
				return this._IsReady;
			}
			set
			{
				if ((this._IsReady != value))
				{
					this.OnIsReadyChanging(value);
					this.SendPropertyChanging();
					this._IsReady = value;
					this.SendPropertyChanged("IsReady");
					this.OnIsReadyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColumnsCount", DbType="Int NOT NULL")]
		public int ColumnsCount
		{
			get
			{
				return this._ColumnsCount;
			}
			set
			{
				if ((this._ColumnsCount != value))
				{
					this.OnColumnsCountChanging(value);
					this.SendPropertyChanging();
					this._ColumnsCount = value;
					this.SendPropertyChanged("ColumnsCount");
					this.OnColumnsCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Goal_GoalCell", Storage="_GoalCells", ThisKey="ID", OtherKey="GoalID")]
		public EntitySet<GoalCell> GoalCells
		{
			get
			{
				return this._GoalCells;
			}
			set
			{
				this._GoalCells.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Goal", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Goals.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Goals.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GoalCells(GoalCell entity)
		{
			this.SendPropertyChanging();
			entity.Goal = this;
		}
		
		private void detach_GoalCells(GoalCell entity)
		{
			this.SendPropertyChanging();
			entity.Goal = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GoalCell")]
	public partial class GoalCell : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _GoalID;
		
		private int _Number;
		
		private int _State;
		
		private System.Nullable<System.DateTime> _AddedDate;
		
		private EntityRef<Goal> _Goal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnGoalIDChanging(int value);
    partial void OnGoalIDChanged();
    partial void OnNumberChanging(int value);
    partial void OnNumberChanged();
    partial void OnStateChanging(int value);
    partial void OnStateChanged();
    partial void OnAddedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAddedDateChanged();
    #endregion
		
		public GoalCell()
		{
			this._Goal = default(EntityRef<Goal>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GoalID", DbType="Int NOT NULL")]
		public int GoalID
		{
			get
			{
				return this._GoalID;
			}
			set
			{
				if ((this._GoalID != value))
				{
					if (this._Goal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGoalIDChanging(value);
					this.SendPropertyChanging();
					this._GoalID = value;
					this.SendPropertyChanged("GoalID");
					this.OnGoalIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="Int NOT NULL")]
		public int Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="Int NOT NULL")]
		public int State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Goal_GoalCell", Storage="_Goal", ThisKey="GoalID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Goal Goal
		{
			get
			{
				return this._Goal.Entity;
			}
			set
			{
				Goal previousValue = this._Goal.Entity;
				if (((previousValue != value) 
							|| (this._Goal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Goal.Entity = null;
						previousValue.GoalCells.Remove(this);
					}
					this._Goal.Entity = value;
					if ((value != null))
					{
						value.GoalCells.Add(this);
						this._GoalID = value.ID;
					}
					else
					{
						this._GoalID = default(int);
					}
					this.SendPropertyChanged("Goal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.City")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private double _CenterLat;
		
		private double _CenterLng;
		
		private int _Zoom;
		
		private EntitySet<User> _Users;
		
		private EntitySet<BicycleParking> _BicycleParkings;
		
		private EntitySet<BycicleDirection> _BycicleDirections;
		
		private EntitySet<BicycleLine> _BicycleLines;
		
		private EntitySet<UtilityDepartment> _UtilityDepartments;
		
<<<<<<< HEAD
		private EntitySet<UtilityIssue> _UtilityIssues;
=======
		private EntitySet<InstagramPhoto> _InstagramPhotos;
>>>>>>> origin/master
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCenterLatChanging(double value);
    partial void OnCenterLatChanged();
    partial void OnCenterLngChanging(double value);
    partial void OnCenterLngChanged();
    partial void OnZoomChanging(int value);
    partial void OnZoomChanged();
    #endregion
		
		public City()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._BicycleParkings = new EntitySet<BicycleParking>(new Action<BicycleParking>(this.attach_BicycleParkings), new Action<BicycleParking>(this.detach_BicycleParkings));
			this._BycicleDirections = new EntitySet<BycicleDirection>(new Action<BycicleDirection>(this.attach_BycicleDirections), new Action<BycicleDirection>(this.detach_BycicleDirections));
			this._BicycleLines = new EntitySet<BicycleLine>(new Action<BicycleLine>(this.attach_BicycleLines), new Action<BicycleLine>(this.detach_BicycleLines));
			this._UtilityDepartments = new EntitySet<UtilityDepartment>(new Action<UtilityDepartment>(this.attach_UtilityDepartments), new Action<UtilityDepartment>(this.detach_UtilityDepartments));
<<<<<<< HEAD
			this._UtilityIssues = new EntitySet<UtilityIssue>(new Action<UtilityIssue>(this.attach_UtilityIssues), new Action<UtilityIssue>(this.detach_UtilityIssues));
=======
			this._InstagramPhotos = new EntitySet<InstagramPhoto>(new Action<InstagramPhoto>(this.attach_InstagramPhotos), new Action<InstagramPhoto>(this.detach_InstagramPhotos));
>>>>>>> origin/master
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CenterLat", DbType="Float NOT NULL")]
		public double CenterLat
		{
			get
			{
				return this._CenterLat;
			}
			set
			{
				if ((this._CenterLat != value))
				{
					this.OnCenterLatChanging(value);
					this.SendPropertyChanging();
					this._CenterLat = value;
					this.SendPropertyChanged("CenterLat");
					this.OnCenterLatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CenterLng", DbType="Float NOT NULL")]
		public double CenterLng
		{
			get
			{
				return this._CenterLng;
			}
			set
			{
				if ((this._CenterLng != value))
				{
					this.OnCenterLngChanging(value);
					this.SendPropertyChanging();
					this._CenterLng = value;
					this.SendPropertyChanged("CenterLng");
					this.OnCenterLngChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zoom", DbType="Int NOT NULL")]
		public int Zoom
		{
			get
			{
				return this._Zoom;
			}
			set
			{
				if ((this._Zoom != value))
				{
					this.OnZoomChanging(value);
					this.SendPropertyChanging();
					this._Zoom = value;
					this.SendPropertyChanged("Zoom");
					this.OnZoomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_User", Storage="_Users", ThisKey="ID", OtherKey="CityID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_BicycleParking", Storage="_BicycleParkings", ThisKey="ID", OtherKey="CityID")]
		public EntitySet<BicycleParking> BicycleParkings
		{
			get
			{
				return this._BicycleParkings;
			}
			set
			{
				this._BicycleParkings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_BycicleDirection", Storage="_BycicleDirections", ThisKey="ID", OtherKey="CityID")]
		public EntitySet<BycicleDirection> BycicleDirections
		{
			get
			{
				return this._BycicleDirections;
			}
			set
			{
				this._BycicleDirections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_BicycleLine", Storage="_BicycleLines", ThisKey="ID", OtherKey="CityID")]
		public EntitySet<BicycleLine> BicycleLines
		{
			get
			{
				return this._BicycleLines;
			}
			set
			{
				this._BicycleLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_UtilityDepartment", Storage="_UtilityDepartments", ThisKey="ID", OtherKey="CityID")]
		public EntitySet<UtilityDepartment> UtilityDepartments
		{
			get
			{
				return this._UtilityDepartments;
			}
			set
			{
				this._UtilityDepartments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_UtilityIssue", Storage="_UtilityIssues", ThisKey="ID", OtherKey="CityID")]
		public EntitySet<UtilityIssue> UtilityIssues
		{
			get
			{
				return this._UtilityIssues;
			}
			set
			{
				this._UtilityIssues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_InstagramPhoto", Storage="_InstagramPhotos", ThisKey="ID", OtherKey="CityID")]
		public EntitySet<InstagramPhoto> InstagramPhotos
		{
			get
			{
				return this._InstagramPhotos;
			}
			set
			{
				this._InstagramPhotos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
		
		private void attach_BicycleParkings(BicycleParking entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_BicycleParkings(BicycleParking entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
		
		private void attach_BycicleDirections(BycicleDirection entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_BycicleDirections(BycicleDirection entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
		
		private void attach_BicycleLines(BicycleLine entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_BicycleLines(BicycleLine entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
		
		private void attach_UtilityDepartments(UtilityDepartment entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_UtilityDepartments(UtilityDepartment entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
		
		private void attach_UtilityIssues(UtilityIssue entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_UtilityIssues(UtilityIssue entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
		
		private void attach_InstagramPhotos(InstagramPhoto entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_InstagramPhotos(InstagramPhoto entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CityID;
		
		private string _Login;
		
		private string _Email;
		
		private string _Password;
		
		private System.DateTime _AddedDate;
		
		private System.DateTime _LastVisitDate;
		
		private string _AvatarPath;
		
		private string _FirstName;
		
		private string _LastName;
		
		private EntitySet<UserRole> _UserRoles;
		
		private EntitySet<Social> _Socials;
		
		private EntitySet<BicycleParkingVote> _BicycleParkingVotes;
		
		private EntitySet<Goal> _Goals;
		
		private EntitySet<BicycleParking> _BicycleParkings;
		
		private EntitySet<BycicleDirection> _BycicleDirections;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<UtilityPhoto> _UtilityPhotos;
		
		private EntitySet<UtilityIssue> _UtilityIssues;
		
		private EntitySet<UtilityIssueHistory> _UtilityIssueHistories;
		
		private EntityRef<City> _City;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCityIDChanging(int value);
    partial void OnCityIDChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnLastVisitDateChanging(System.DateTime value);
    partial void OnLastVisitDateChanged();
    partial void OnAvatarPathChanging(string value);
    partial void OnAvatarPathChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    #endregion
		
		public User()
		{
			this._UserRoles = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRoles), new Action<UserRole>(this.detach_UserRoles));
			this._Socials = new EntitySet<Social>(new Action<Social>(this.attach_Socials), new Action<Social>(this.detach_Socials));
			this._BicycleParkingVotes = new EntitySet<BicycleParkingVote>(new Action<BicycleParkingVote>(this.attach_BicycleParkingVotes), new Action<BicycleParkingVote>(this.detach_BicycleParkingVotes));
			this._Goals = new EntitySet<Goal>(new Action<Goal>(this.attach_Goals), new Action<Goal>(this.detach_Goals));
			this._BicycleParkings = new EntitySet<BicycleParking>(new Action<BicycleParking>(this.attach_BicycleParkings), new Action<BicycleParking>(this.detach_BicycleParkings));
			this._BycicleDirections = new EntitySet<BycicleDirection>(new Action<BycicleDirection>(this.attach_BycicleDirections), new Action<BycicleDirection>(this.detach_BycicleDirections));
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._UtilityPhotos = new EntitySet<UtilityPhoto>(new Action<UtilityPhoto>(this.attach_UtilityPhotos), new Action<UtilityPhoto>(this.detach_UtilityPhotos));
			this._UtilityIssues = new EntitySet<UtilityIssue>(new Action<UtilityIssue>(this.attach_UtilityIssues), new Action<UtilityIssue>(this.detach_UtilityIssues));
			this._UtilityIssueHistories = new EntitySet<UtilityIssueHistory>(new Action<UtilityIssueHistory>(this.attach_UtilityIssueHistories), new Action<UtilityIssueHistory>(this.detach_UtilityIssueHistories));
			this._City = default(EntityRef<City>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="Int NOT NULL")]
		public int CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastVisitDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastVisitDate
		{
			get
			{
				return this._LastVisitDate;
			}
			set
			{
				if ((this._LastVisitDate != value))
				{
					this.OnLastVisitDateChanging(value);
					this.SendPropertyChanging();
					this._LastVisitDate = value;
					this.SendPropertyChanged("LastVisitDate");
					this.OnLastVisitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvatarPath", DbType="NVarChar(150)")]
		public string AvatarPath
		{
			get
			{
				return this._AvatarPath;
			}
			set
			{
				if ((this._AvatarPath != value))
				{
					this.OnAvatarPathChanging(value);
					this.SendPropertyChanging();
					this._AvatarPath = value;
					this.SendPropertyChanged("AvatarPath");
					this.OnAvatarPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(500)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(500)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRole", Storage="_UserRoles", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<UserRole> UserRoles
		{
			get
			{
				return this._UserRoles;
			}
			set
			{
				this._UserRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Social", Storage="_Socials", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Social> Socials
		{
			get
			{
				return this._Socials;
			}
			set
			{
				this._Socials.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_BicycleParkingVote", Storage="_BicycleParkingVotes", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<BicycleParkingVote> BicycleParkingVotes
		{
			get
			{
				return this._BicycleParkingVotes;
			}
			set
			{
				this._BicycleParkingVotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Goal", Storage="_Goals", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Goal> Goals
		{
			get
			{
				return this._Goals;
			}
			set
			{
				this._Goals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_BicycleParking", Storage="_BicycleParkings", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<BicycleParking> BicycleParkings
		{
			get
			{
				return this._BicycleParkings;
			}
			set
			{
				this._BicycleParkings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_BycicleDirection", Storage="_BycicleDirections", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<BycicleDirection> BycicleDirections
		{
			get
			{
				return this._BycicleDirections;
			}
			set
			{
				this._BycicleDirections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Comment", Storage="_Comments", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UtilityPhoto", Storage="_UtilityPhotos", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<UtilityPhoto> UtilityPhotos
		{
			get
			{
				return this._UtilityPhotos;
			}
			set
			{
				this._UtilityPhotos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UtilityIssue", Storage="_UtilityIssues", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<UtilityIssue> UtilityIssues
		{
			get
			{
				return this._UtilityIssues;
			}
			set
			{
				this._UtilityIssues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UtilityIssueHistory", Storage="_UtilityIssueHistories", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<UtilityIssueHistory> UtilityIssueHistories
		{
			get
			{
				return this._UtilityIssueHistories;
			}
			set
			{
				this._UtilityIssueHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_User", Storage="_City", ThisKey="CityID", OtherKey="ID", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._CityID = value.ID;
					}
					else
					{
						this._CityID = default(int);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Socials(Social entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Socials(Social entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_BicycleParkingVotes(BicycleParkingVote entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_BicycleParkingVotes(BicycleParkingVote entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Goals(Goal entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Goals(Goal entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_BicycleParkings(BicycleParking entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_BicycleParkings(BicycleParking entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_BycicleDirections(BycicleDirection entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_BycicleDirections(BycicleDirection entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UtilityPhotos(UtilityPhoto entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UtilityPhotos(UtilityPhoto entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UtilityIssues(UtilityIssue entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UtilityIssues(UtilityIssue entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UtilityIssueHistories(UtilityIssueHistory entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UtilityIssueHistories(UtilityIssueHistory entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BicycleParking")]
	public partial class BicycleParking : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private int _CityID;
		
		private string _Position;
		
		private string _PhotoUrl;
		
		private bool _Exist;
		
		private int _Type;
		
		private bool _Lock;
		
		private bool _Camera;
		
		private bool _Rent;
		
		private int _Quality;
		
		private int _Capacity;
		
		private int _VotesCount;
		
		private string _Description;
		
		private System.DateTime _AddedDate;
		
		private System.Nullable<System.DateTime> _VerifiedDate;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private string _Address;
		
		private double _CenterDistance;
		
		private EntitySet<BicycleParkingVote> _BicycleParkingVotes;
		
		private EntityRef<City> _City;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnCityIDChanging(int value);
    partial void OnCityIDChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    partial void OnPhotoUrlChanging(string value);
    partial void OnPhotoUrlChanged();
    partial void OnExistChanging(bool value);
    partial void OnExistChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnLockChanging(bool value);
    partial void OnLockChanged();
    partial void OnCameraChanging(bool value);
    partial void OnCameraChanged();
    partial void OnRentChanging(bool value);
    partial void OnRentChanged();
    partial void OnQualityChanging(int value);
    partial void OnQualityChanged();
    partial void OnCapacityChanging(int value);
    partial void OnCapacityChanged();
    partial void OnVotesCountChanging(int value);
    partial void OnVotesCountChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnVerifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnVerifiedDateChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCenterDistanceChanging(double value);
    partial void OnCenterDistanceChanged();
    #endregion
		
		public BicycleParking()
		{
			this._BicycleParkingVotes = new EntitySet<BicycleParkingVote>(new Action<BicycleParkingVote>(this.attach_BicycleParkingVotes), new Action<BicycleParkingVote>(this.detach_BicycleParkingVotes));
			this._City = default(EntityRef<City>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="Int NOT NULL")]
		public int CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoUrl", DbType="NVarChar(150)")]
		public string PhotoUrl
		{
			get
			{
				return this._PhotoUrl;
			}
			set
			{
				if ((this._PhotoUrl != value))
				{
					this.OnPhotoUrlChanging(value);
					this.SendPropertyChanging();
					this._PhotoUrl = value;
					this.SendPropertyChanged("PhotoUrl");
					this.OnPhotoUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exist", DbType="Bit NOT NULL")]
		public bool Exist
		{
			get
			{
				return this._Exist;
			}
			set
			{
				if ((this._Exist != value))
				{
					this.OnExistChanging(value);
					this.SendPropertyChanging();
					this._Exist = value;
					this.SendPropertyChanged("Exist");
					this.OnExistChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lock", DbType="Bit NOT NULL")]
		public bool Lock
		{
			get
			{
				return this._Lock;
			}
			set
			{
				if ((this._Lock != value))
				{
					this.OnLockChanging(value);
					this.SendPropertyChanging();
					this._Lock = value;
					this.SendPropertyChanged("Lock");
					this.OnLockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Camera", DbType="Bit NOT NULL")]
		public bool Camera
		{
			get
			{
				return this._Camera;
			}
			set
			{
				if ((this._Camera != value))
				{
					this.OnCameraChanging(value);
					this.SendPropertyChanging();
					this._Camera = value;
					this.SendPropertyChanged("Camera");
					this.OnCameraChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rent", DbType="Bit NOT NULL")]
		public bool Rent
		{
			get
			{
				return this._Rent;
			}
			set
			{
				if ((this._Rent != value))
				{
					this.OnRentChanging(value);
					this.SendPropertyChanging();
					this._Rent = value;
					this.SendPropertyChanged("Rent");
					this.OnRentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quality", DbType="Int NOT NULL")]
		public int Quality
		{
			get
			{
				return this._Quality;
			}
			set
			{
				if ((this._Quality != value))
				{
					this.OnQualityChanging(value);
					this.SendPropertyChanging();
					this._Quality = value;
					this.SendPropertyChanged("Quality");
					this.OnQualityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Capacity", DbType="Int NOT NULL")]
		public int Capacity
		{
			get
			{
				return this._Capacity;
			}
			set
			{
				if ((this._Capacity != value))
				{
					this.OnCapacityChanging(value);
					this.SendPropertyChanging();
					this._Capacity = value;
					this.SendPropertyChanged("Capacity");
					this.OnCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VotesCount", DbType="Int NOT NULL")]
		public int VotesCount
		{
			get
			{
				return this._VotesCount;
			}
			set
			{
				if ((this._VotesCount != value))
				{
					this.OnVotesCountChanging(value);
					this.SendPropertyChanging();
					this._VotesCount = value;
					this.SendPropertyChanged("VotesCount");
					this.OnVotesCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VerifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> VerifiedDate
		{
			get
			{
				return this._VerifiedDate;
			}
			set
			{
				if ((this._VerifiedDate != value))
				{
					this.OnVerifiedDateChanging(value);
					this.SendPropertyChanging();
					this._VerifiedDate = value;
					this.SendPropertyChanged("VerifiedDate");
					this.OnVerifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(MAX)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CenterDistance", DbType="Float NOT NULL")]
		public double CenterDistance
		{
			get
			{
				return this._CenterDistance;
			}
			set
			{
				if ((this._CenterDistance != value))
				{
					this.OnCenterDistanceChanging(value);
					this.SendPropertyChanging();
					this._CenterDistance = value;
					this.SendPropertyChanged("CenterDistance");
					this.OnCenterDistanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BicycleParking_BicycleParkingVote", Storage="_BicycleParkingVotes", ThisKey="ID", OtherKey="BicycleParkingID")]
		public EntitySet<BicycleParkingVote> BicycleParkingVotes
		{
			get
			{
				return this._BicycleParkingVotes;
			}
			set
			{
				this._BicycleParkingVotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_BicycleParking", Storage="_City", ThisKey="CityID", OtherKey="ID", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.BicycleParkings.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.BicycleParkings.Add(this);
						this._CityID = value.ID;
					}
					else
					{
						this._CityID = default(int);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_BicycleParking", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.BicycleParkings.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.BicycleParkings.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BicycleParkingVotes(BicycleParkingVote entity)
		{
			this.SendPropertyChanging();
			entity.BicycleParking = this;
		}
		
		private void detach_BicycleParkingVotes(BicycleParkingVote entity)
		{
			this.SendPropertyChanging();
			entity.BicycleParking = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BycicleDirection")]
	public partial class BycicleDirection : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CityID;
		
		private int _UserID;
		
		private string _Waypoints;
		
		private string _PolyLine;
		
		private double _Length;
		
		private bool _Processed;
		
		private System.DateTime _AddedDate;
		
		private EntitySet<BicycleDirectionLine> _BicycleDirectionLines;
		
		private EntityRef<City> _City;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCityIDChanging(int value);
    partial void OnCityIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnWaypointsChanging(string value);
    partial void OnWaypointsChanged();
    partial void OnPolyLineChanging(string value);
    partial void OnPolyLineChanged();
    partial void OnLengthChanging(double value);
    partial void OnLengthChanged();
    partial void OnProcessedChanging(bool value);
    partial void OnProcessedChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    #endregion
		
		public BycicleDirection()
		{
			this._BicycleDirectionLines = new EntitySet<BicycleDirectionLine>(new Action<BicycleDirectionLine>(this.attach_BicycleDirectionLines), new Action<BicycleDirectionLine>(this.detach_BicycleDirectionLines));
			this._City = default(EntityRef<City>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="Int NOT NULL")]
		public int CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Waypoints", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Waypoints
		{
			get
			{
				return this._Waypoints;
			}
			set
			{
				if ((this._Waypoints != value))
				{
					this.OnWaypointsChanging(value);
					this.SendPropertyChanging();
					this._Waypoints = value;
					this.SendPropertyChanged("Waypoints");
					this.OnWaypointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PolyLine", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PolyLine
		{
			get
			{
				return this._PolyLine;
			}
			set
			{
				if ((this._PolyLine != value))
				{
					this.OnPolyLineChanging(value);
					this.SendPropertyChanging();
					this._PolyLine = value;
					this.SendPropertyChanged("PolyLine");
					this.OnPolyLineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Length", DbType="Float NOT NULL")]
		public double Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Processed", DbType="Bit NOT NULL")]
		public bool Processed
		{
			get
			{
				return this._Processed;
			}
			set
			{
				if ((this._Processed != value))
				{
					this.OnProcessedChanging(value);
					this.SendPropertyChanging();
					this._Processed = value;
					this.SendPropertyChanged("Processed");
					this.OnProcessedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BycicleDirection_BicycleDirectionLine", Storage="_BicycleDirectionLines", ThisKey="ID", OtherKey="BicycleDirectionID")]
		public EntitySet<BicycleDirectionLine> BicycleDirectionLines
		{
			get
			{
				return this._BicycleDirectionLines;
			}
			set
			{
				this._BicycleDirectionLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_BycicleDirection", Storage="_City", ThisKey="CityID", OtherKey="ID", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.BycicleDirections.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.BycicleDirections.Add(this);
						this._CityID = value.ID;
					}
					else
					{
						this._CityID = default(int);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_BycicleDirection", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.BycicleDirections.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.BycicleDirections.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BicycleDirectionLines(BicycleDirectionLine entity)
		{
			this.SendPropertyChanging();
			entity.BycicleDirection = this;
		}
		
		private void detach_BicycleDirectionLines(BicycleDirectionLine entity)
		{
			this.SendPropertyChanging();
			entity.BycicleDirection = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BicycleLine")]
	public partial class BicycleLine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CityID;
		
		private string _Start;
		
		private string _End;
		
		private double _StartLat;
		
		private double _StartLng;
		
		private double _EndLat;
		
		private double _EndLng;
		
		private int _Quantity;
		
		private EntitySet<BicycleDirectionLine> _BicycleDirectionLines;
		
		private EntityRef<City> _City;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCityIDChanging(int value);
    partial void OnCityIDChanged();
    partial void OnStartChanging(string value);
    partial void OnStartChanged();
    partial void OnEndChanging(string value);
    partial void OnEndChanged();
    partial void OnStartLatChanging(double value);
    partial void OnStartLatChanged();
    partial void OnStartLngChanging(double value);
    partial void OnStartLngChanged();
    partial void OnEndLatChanging(double value);
    partial void OnEndLatChanged();
    partial void OnEndLngChanging(double value);
    partial void OnEndLngChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    #endregion
		
		public BicycleLine()
		{
			this._BicycleDirectionLines = new EntitySet<BicycleDirectionLine>(new Action<BicycleDirectionLine>(this.attach_BicycleDirectionLines), new Action<BicycleDirectionLine>(this.detach_BicycleDirectionLines));
			this._City = default(EntityRef<City>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="Int NOT NULL")]
		public int CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Start", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Start
		{
			get
			{
				return this._Start;
			}
			set
			{
				if ((this._Start != value))
				{
					this.OnStartChanging(value);
					this.SendPropertyChanging();
					this._Start = value;
					this.SendPropertyChanged("Start");
					this.OnStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[End]", Storage="_End", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string End
		{
			get
			{
				return this._End;
			}
			set
			{
				if ((this._End != value))
				{
					this.OnEndChanging(value);
					this.SendPropertyChanging();
					this._End = value;
					this.SendPropertyChanged("End");
					this.OnEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartLat", DbType="Float NOT NULL")]
		public double StartLat
		{
			get
			{
				return this._StartLat;
			}
			set
			{
				if ((this._StartLat != value))
				{
					this.OnStartLatChanging(value);
					this.SendPropertyChanging();
					this._StartLat = value;
					this.SendPropertyChanged("StartLat");
					this.OnStartLatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartLng", DbType="Float NOT NULL")]
		public double StartLng
		{
			get
			{
				return this._StartLng;
			}
			set
			{
				if ((this._StartLng != value))
				{
					this.OnStartLngChanging(value);
					this.SendPropertyChanging();
					this._StartLng = value;
					this.SendPropertyChanged("StartLng");
					this.OnStartLngChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndLat", DbType="Float NOT NULL")]
		public double EndLat
		{
			get
			{
				return this._EndLat;
			}
			set
			{
				if ((this._EndLat != value))
				{
					this.OnEndLatChanging(value);
					this.SendPropertyChanging();
					this._EndLat = value;
					this.SendPropertyChanged("EndLat");
					this.OnEndLatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndLng", DbType="Float NOT NULL")]
		public double EndLng
		{
			get
			{
				return this._EndLng;
			}
			set
			{
				if ((this._EndLng != value))
				{
					this.OnEndLngChanging(value);
					this.SendPropertyChanging();
					this._EndLng = value;
					this.SendPropertyChanged("EndLng");
					this.OnEndLngChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BicycleLine_BicycleDirectionLine", Storage="_BicycleDirectionLines", ThisKey="ID", OtherKey="BicycleLineID")]
		public EntitySet<BicycleDirectionLine> BicycleDirectionLines
		{
			get
			{
				return this._BicycleDirectionLines;
			}
			set
			{
				this._BicycleDirectionLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_BicycleLine", Storage="_City", ThisKey="CityID", OtherKey="ID", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.BicycleLines.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.BicycleLines.Add(this);
						this._CityID = value.ID;
					}
					else
					{
						this._CityID = default(int);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BicycleDirectionLines(BicycleDirectionLine entity)
		{
			this.SendPropertyChanging();
			entity.BicycleLine = this;
		}
		
		private void detach_BicycleDirectionLines(BicycleDirectionLine entity)
		{
			this.SendPropertyChanging();
			entity.BicycleLine = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Comment")]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private System.Nullable<int> _ParentID;
		
		private System.DateTime _AddedDate;
		
		private string _Text;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<UtilityIssueComment> _UtilityIssueComments;
		
		private EntityRef<Comment> _Comment1;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnParentIDChanging(System.Nullable<int> value);
    partial void OnParentIDChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public Comment()
		{
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._UtilityIssueComments = new EntitySet<UtilityIssueComment>(new Action<UtilityIssueComment>(this.attach_UtilityIssueComments), new Action<UtilityIssueComment>(this.detach_UtilityIssueComments));
			this._Comment1 = default(EntityRef<Comment>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="Int")]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._Comment1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_Comment", Storage="_Comments", ThisKey="ID", OtherKey="ParentID")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_UtilityIssueComment", Storage="_UtilityIssueComments", ThisKey="ID", OtherKey="CommentID")]
		public EntitySet<UtilityIssueComment> UtilityIssueComments
		{
			get
			{
				return this._UtilityIssueComments;
			}
			set
			{
				this._UtilityIssueComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_Comment", Storage="_Comment1", ThisKey="ParentID", OtherKey="ID", IsForeignKey=true)]
		public Comment Comment1
		{
			get
			{
				return this._Comment1.Entity;
			}
			set
			{
				Comment previousValue = this._Comment1.Entity;
				if (((previousValue != value) 
							|| (this._Comment1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Comment1.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._Comment1.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._ParentID = value.ID;
					}
					else
					{
						this._ParentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Comment1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Comment", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Comment1 = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Comment1 = null;
		}
		
		private void attach_UtilityIssueComments(UtilityIssueComment entity)
		{
			this.SendPropertyChanging();
			entity.Comment = this;
		}
		
		private void detach_UtilityIssueComments(UtilityIssueComment entity)
		{
			this.SendPropertyChanging();
			entity.Comment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UtilityPhoto")]
	public partial class UtilityPhoto : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _UtilityIssueID;
		
		private System.Nullable<int> _UserID;
		
		private string _Image;
		
		private System.DateTime _AddedDate;
		
		private int _State;
		
		private bool _IsRemoved;
		
		private EntityRef<User> _User;
		
		private EntityRef<UtilityIssue> _UtilityIssue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUtilityIssueIDChanging(System.Nullable<int> value);
    partial void OnUtilityIssueIDChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnStateChanging(int value);
    partial void OnStateChanged();
    partial void OnIsRemovedChanging(bool value);
    partial void OnIsRemovedChanged();
    #endregion
		
		public UtilityPhoto()
		{
			this._User = default(EntityRef<User>);
			this._UtilityIssue = default(EntityRef<UtilityIssue>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UtilityIssueID", DbType="Int")]
		public System.Nullable<int> UtilityIssueID
		{
			get
			{
				return this._UtilityIssueID;
			}
			set
			{
				if ((this._UtilityIssueID != value))
				{
					if (this._UtilityIssue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUtilityIssueIDChanging(value);
					this.SendPropertyChanging();
					this._UtilityIssueID = value;
					this.SendPropertyChanged("UtilityIssueID");
					this.OnUtilityIssueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="Int NOT NULL")]
		public int State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRemoved", DbType="Bit NOT NULL")]
		public bool IsRemoved
		{
			get
			{
				return this._IsRemoved;
			}
			set
			{
				if ((this._IsRemoved != value))
				{
					this.OnIsRemovedChanging(value);
					this.SendPropertyChanging();
					this._IsRemoved = value;
					this.SendPropertyChanged("IsRemoved");
					this.OnIsRemovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UtilityPhoto", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UtilityPhotos.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UtilityPhotos.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UtilityIssue_UtilityPhoto", Storage="_UtilityIssue", ThisKey="UtilityIssueID", OtherKey="ID", IsForeignKey=true)]
		public UtilityIssue UtilityIssue
		{
			get
			{
				return this._UtilityIssue.Entity;
			}
			set
			{
				UtilityIssue previousValue = this._UtilityIssue.Entity;
				if (((previousValue != value) 
							|| (this._UtilityIssue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UtilityIssue.Entity = null;
						previousValue.UtilityPhotos.Remove(this);
					}
					this._UtilityIssue.Entity = value;
					if ((value != null))
					{
						value.UtilityPhotos.Add(this);
						this._UtilityIssueID = value.ID;
					}
					else
					{
						this._UtilityIssueID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UtilityIssue");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UtilityIssueComment")]
	public partial class UtilityIssueComment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UtilityIssueID;
		
		private int _CommentID;
		
		private EntityRef<Comment> _Comment;
		
		private EntityRef<UtilityIssue> _UtilityIssue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUtilityIssueIDChanging(int value);
    partial void OnUtilityIssueIDChanged();
    partial void OnCommentIDChanging(int value);
    partial void OnCommentIDChanged();
    #endregion
		
		public UtilityIssueComment()
		{
			this._Comment = default(EntityRef<Comment>);
			this._UtilityIssue = default(EntityRef<UtilityIssue>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UtilityIssueID", DbType="Int NOT NULL")]
		public int UtilityIssueID
		{
			get
			{
				return this._UtilityIssueID;
			}
			set
			{
				if ((this._UtilityIssueID != value))
				{
					if (this._UtilityIssue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUtilityIssueIDChanging(value);
					this.SendPropertyChanging();
					this._UtilityIssueID = value;
					this.SendPropertyChanged("UtilityIssueID");
					this.OnUtilityIssueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentID", DbType="Int NOT NULL")]
		public int CommentID
		{
			get
			{
				return this._CommentID;
			}
			set
			{
				if ((this._CommentID != value))
				{
					if (this._Comment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommentIDChanging(value);
					this.SendPropertyChanging();
					this._CommentID = value;
					this.SendPropertyChanged("CommentID");
					this.OnCommentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_UtilityIssueComment", Storage="_Comment", ThisKey="CommentID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Comment Comment
		{
			get
			{
				return this._Comment.Entity;
			}
			set
			{
				Comment previousValue = this._Comment.Entity;
				if (((previousValue != value) 
							|| (this._Comment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Comment.Entity = null;
						previousValue.UtilityIssueComments.Remove(this);
					}
					this._Comment.Entity = value;
					if ((value != null))
					{
						value.UtilityIssueComments.Add(this);
						this._CommentID = value.ID;
					}
					else
					{
						this._CommentID = default(int);
					}
					this.SendPropertyChanged("Comment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UtilityIssue_UtilityIssueComment", Storage="_UtilityIssue", ThisKey="UtilityIssueID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public UtilityIssue UtilityIssue
		{
			get
			{
				return this._UtilityIssue.Entity;
			}
			set
			{
				UtilityIssue previousValue = this._UtilityIssue.Entity;
				if (((previousValue != value) 
							|| (this._UtilityIssue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UtilityIssue.Entity = null;
						previousValue.UtilityIssueComments.Remove(this);
					}
					this._UtilityIssue.Entity = value;
					if ((value != null))
					{
						value.UtilityIssueComments.Add(this);
						this._UtilityIssueID = value.ID;
					}
					else
					{
						this._UtilityIssueID = default(int);
					}
					this.SendPropertyChanged("UtilityIssue");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UtilityIssueTag")]
	public partial class UtilityIssueTag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UtilityIssueID;
		
		private int _UtilityTagID;
		
		private EntityRef<UtilityTag> _UtilityTag;
		
		private EntityRef<UtilityIssue> _UtilityIssue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUtilityIssueIDChanging(int value);
    partial void OnUtilityIssueIDChanged();
    partial void OnUtilityTagIDChanging(int value);
    partial void OnUtilityTagIDChanged();
    #endregion
		
		public UtilityIssueTag()
		{
			this._UtilityTag = default(EntityRef<UtilityTag>);
			this._UtilityIssue = default(EntityRef<UtilityIssue>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UtilityIssueID", DbType="Int NOT NULL")]
		public int UtilityIssueID
		{
			get
			{
				return this._UtilityIssueID;
			}
			set
			{
				if ((this._UtilityIssueID != value))
				{
					if (this._UtilityIssue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUtilityIssueIDChanging(value);
					this.SendPropertyChanging();
					this._UtilityIssueID = value;
					this.SendPropertyChanged("UtilityIssueID");
					this.OnUtilityIssueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UtilityTagID", DbType="Int NOT NULL")]
		public int UtilityTagID
		{
			get
			{
				return this._UtilityTagID;
			}
			set
			{
				if ((this._UtilityTagID != value))
				{
					if (this._UtilityTag.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUtilityTagIDChanging(value);
					this.SendPropertyChanging();
					this._UtilityTagID = value;
					this.SendPropertyChanged("UtilityTagID");
					this.OnUtilityTagIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UtilityTag_UtilityIssueTag", Storage="_UtilityTag", ThisKey="UtilityTagID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public UtilityTag UtilityTag
		{
			get
			{
				return this._UtilityTag.Entity;
			}
			set
			{
				UtilityTag previousValue = this._UtilityTag.Entity;
				if (((previousValue != value) 
							|| (this._UtilityTag.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UtilityTag.Entity = null;
						previousValue.UtilityIssueTags.Remove(this);
					}
					this._UtilityTag.Entity = value;
					if ((value != null))
					{
						value.UtilityIssueTags.Add(this);
						this._UtilityTagID = value.ID;
					}
					else
					{
						this._UtilityTagID = default(int);
					}
					this.SendPropertyChanged("UtilityTag");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UtilityIssue_UtilityIssueTag", Storage="_UtilityIssue", ThisKey="UtilityIssueID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public UtilityIssue UtilityIssue
		{
			get
			{
				return this._UtilityIssue.Entity;
			}
			set
			{
				UtilityIssue previousValue = this._UtilityIssue.Entity;
				if (((previousValue != value) 
							|| (this._UtilityIssue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UtilityIssue.Entity = null;
						previousValue.UtilityIssueTags.Remove(this);
					}
					this._UtilityIssue.Entity = value;
					if ((value != null))
					{
						value.UtilityIssueTags.Add(this);
						this._UtilityIssueID = value.ID;
					}
					else
					{
						this._UtilityIssueID = default(int);
					}
					this.SendPropertyChanged("UtilityIssue");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UtilityTag")]
	public partial class UtilityTag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<UtilityIssueTag> _UtilityIssueTags;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public UtilityTag()
		{
			this._UtilityIssueTags = new EntitySet<UtilityIssueTag>(new Action<UtilityIssueTag>(this.attach_UtilityIssueTags), new Action<UtilityIssueTag>(this.detach_UtilityIssueTags));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UtilityTag_UtilityIssueTag", Storage="_UtilityIssueTags", ThisKey="ID", OtherKey="UtilityTagID")]
		public EntitySet<UtilityIssueTag> UtilityIssueTags
		{
			get
			{
				return this._UtilityIssueTags;
			}
			set
			{
				this._UtilityIssueTags.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UtilityIssueTags(UtilityIssueTag entity)
		{
			this.SendPropertyChanging();
			entity.UtilityTag = this;
		}
		
		private void detach_UtilityIssueTags(UtilityIssueTag entity)
		{
			this.SendPropertyChanging();
			entity.UtilityTag = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UtilityDepartment")]
	public partial class UtilityDepartment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CityID;
		
		private string _Name;
		
		private string _Phone;
		
		private string _Address;
		
		private EntitySet<UtilityIssue> _UtilityIssues;
		
		private EntitySet<UtilityIssueHistory> _UtilityIssueHistories;
		
		private EntityRef<City> _City;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCityIDChanging(int value);
    partial void OnCityIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    #endregion
		
		public UtilityDepartment()
		{
			this._UtilityIssues = new EntitySet<UtilityIssue>(new Action<UtilityIssue>(this.attach_UtilityIssues), new Action<UtilityIssue>(this.detach_UtilityIssues));
			this._UtilityIssueHistories = new EntitySet<UtilityIssueHistory>(new Action<UtilityIssueHistory>(this.attach_UtilityIssueHistories), new Action<UtilityIssueHistory>(this.detach_UtilityIssueHistories));
			this._City = default(EntityRef<City>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="Int NOT NULL")]
		public int CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(100)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(MAX)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UtilityDepartment_UtilityIssue", Storage="_UtilityIssues", ThisKey="ID", OtherKey="UtilityDepartmentID")]
		public EntitySet<UtilityIssue> UtilityIssues
		{
			get
			{
				return this._UtilityIssues;
			}
			set
			{
				this._UtilityIssues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UtilityDepartment_UtilityIssueHistory", Storage="_UtilityIssueHistories", ThisKey="ID", OtherKey="UtilityDepartmentID")]
		public EntitySet<UtilityIssueHistory> UtilityIssueHistories
		{
			get
			{
				return this._UtilityIssueHistories;
			}
			set
			{
				this._UtilityIssueHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_UtilityDepartment", Storage="_City", ThisKey="CityID", OtherKey="ID", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.UtilityDepartments.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.UtilityDepartments.Add(this);
						this._CityID = value.ID;
					}
					else
					{
						this._CityID = default(int);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UtilityIssues(UtilityIssue entity)
		{
			this.SendPropertyChanging();
			entity.UtilityDepartment = this;
		}
		
		private void detach_UtilityIssues(UtilityIssue entity)
		{
			this.SendPropertyChanging();
			entity.UtilityDepartment = null;
		}
		
		private void attach_UtilityIssueHistories(UtilityIssueHistory entity)
		{
			this.SendPropertyChanging();
			entity.UtilityDepartment = this;
		}
		
		private void detach_UtilityIssueHistories(UtilityIssueHistory entity)
		{
			this.SendPropertyChanging();
			entity.UtilityDepartment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UtilityIssue")]
	public partial class UtilityIssue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private int _CityID;
		
		private System.DateTime _AddedDate;
		
		private System.Nullable<System.DateTime> _AcceptedDate;
		
		private System.Nullable<System.DateTime> _ResolvedDate;
		
		private System.Nullable<System.DateTime> _ClosedDate;
		
		private System.Nullable<int> _UtilityDepartmentID;
		
		private System.Nullable<int> _MainUtilityIssueID;
		
		private double _Lat;
		
		private double _Lng;
		
		private string _Address;
		
		private string _Description;
		
		private string _WorkFlow;
		
		private string _Solution;
		
		private int _Status;
		
		private bool _IsRemoved;
		
		private EntitySet<UtilityPhoto> _UtilityPhotos;
		
		private EntitySet<UtilityIssueComment> _UtilityIssueComments;
		
		private EntitySet<UtilityIssueTag> _UtilityIssueTags;
		
		private EntitySet<UtilityIssue> _UtilityIssues;
		
		private EntitySet<UtilityIssueHistory> _UtilityIssueHistories;
		
		private EntityRef<City> _City;
		
		private EntityRef<User> _User;
		
		private EntityRef<UtilityDepartment> _UtilityDepartment;
		
		private EntityRef<UtilityIssue> _UtilityIssue1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnCityIDChanging(int value);
    partial void OnCityIDChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnAcceptedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAcceptedDateChanged();
    partial void OnResolvedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnResolvedDateChanged();
    partial void OnClosedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnClosedDateChanged();
    partial void OnUtilityDepartmentIDChanging(System.Nullable<int> value);
    partial void OnUtilityDepartmentIDChanged();
    partial void OnMainUtilityIssueIDChanging(System.Nullable<int> value);
    partial void OnMainUtilityIssueIDChanged();
    partial void OnLatChanging(double value);
    partial void OnLatChanged();
    partial void OnLngChanging(double value);
    partial void OnLngChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnWorkFlowChanging(string value);
    partial void OnWorkFlowChanged();
    partial void OnSolutionChanging(string value);
    partial void OnSolutionChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnIsRemovedChanging(bool value);
    partial void OnIsRemovedChanged();
    #endregion
		
		public UtilityIssue()
		{
			this._UtilityPhotos = new EntitySet<UtilityPhoto>(new Action<UtilityPhoto>(this.attach_UtilityPhotos), new Action<UtilityPhoto>(this.detach_UtilityPhotos));
			this._UtilityIssueComments = new EntitySet<UtilityIssueComment>(new Action<UtilityIssueComment>(this.attach_UtilityIssueComments), new Action<UtilityIssueComment>(this.detach_UtilityIssueComments));
			this._UtilityIssueTags = new EntitySet<UtilityIssueTag>(new Action<UtilityIssueTag>(this.attach_UtilityIssueTags), new Action<UtilityIssueTag>(this.detach_UtilityIssueTags));
			this._UtilityIssues = new EntitySet<UtilityIssue>(new Action<UtilityIssue>(this.attach_UtilityIssues), new Action<UtilityIssue>(this.detach_UtilityIssues));
			this._UtilityIssueHistories = new EntitySet<UtilityIssueHistory>(new Action<UtilityIssueHistory>(this.attach_UtilityIssueHistories), new Action<UtilityIssueHistory>(this.detach_UtilityIssueHistories));
			this._City = default(EntityRef<City>);
			this._User = default(EntityRef<User>);
			this._UtilityDepartment = default(EntityRef<UtilityDepartment>);
			this._UtilityIssue1 = default(EntityRef<UtilityIssue>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="Int NOT NULL")]
		public int CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcceptedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AcceptedDate
		{
			get
			{
				return this._AcceptedDate;
			}
			set
			{
				if ((this._AcceptedDate != value))
				{
					this.OnAcceptedDateChanging(value);
					this.SendPropertyChanging();
					this._AcceptedDate = value;
					this.SendPropertyChanged("AcceptedDate");
					this.OnAcceptedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResolvedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ResolvedDate
		{
			get
			{
				return this._ResolvedDate;
			}
			set
			{
				if ((this._ResolvedDate != value))
				{
					this.OnResolvedDateChanging(value);
					this.SendPropertyChanging();
					this._ResolvedDate = value;
					this.SendPropertyChanged("ResolvedDate");
					this.OnResolvedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClosedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ClosedDate
		{
			get
			{
				return this._ClosedDate;
			}
			set
			{
				if ((this._ClosedDate != value))
				{
					this.OnClosedDateChanging(value);
					this.SendPropertyChanging();
					this._ClosedDate = value;
					this.SendPropertyChanged("ClosedDate");
					this.OnClosedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UtilityDepartmentID", DbType="Int")]
		public System.Nullable<int> UtilityDepartmentID
		{
			get
			{
				return this._UtilityDepartmentID;
			}
			set
			{
				if ((this._UtilityDepartmentID != value))
				{
					if (this._UtilityDepartment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUtilityDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._UtilityDepartmentID = value;
					this.SendPropertyChanged("UtilityDepartmentID");
					this.OnUtilityDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MainUtilityIssueID", DbType="Int")]
		public System.Nullable<int> MainUtilityIssueID
		{
			get
			{
				return this._MainUtilityIssueID;
			}
			set
			{
				if ((this._MainUtilityIssueID != value))
				{
					if (this._UtilityIssue1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMainUtilityIssueIDChanging(value);
					this.SendPropertyChanging();
					this._MainUtilityIssueID = value;
					this.SendPropertyChanged("MainUtilityIssueID");
					this.OnMainUtilityIssueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lat", DbType="Float NOT NULL")]
		public double Lat
		{
			get
			{
				return this._Lat;
			}
			set
			{
				if ((this._Lat != value))
				{
					this.OnLatChanging(value);
					this.SendPropertyChanging();
					this._Lat = value;
					this.SendPropertyChanged("Lat");
					this.OnLatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lng", DbType="Float NOT NULL")]
		public double Lng
		{
			get
			{
				return this._Lng;
			}
			set
			{
				if ((this._Lng != value))
				{
					this.OnLngChanging(value);
					this.SendPropertyChanging();
					this._Lng = value;
					this.SendPropertyChanged("Lng");
					this.OnLngChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(MAX)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkFlow", DbType="NVarChar(MAX)")]
		public string WorkFlow
		{
			get
			{
				return this._WorkFlow;
			}
			set
			{
				if ((this._WorkFlow != value))
				{
					this.OnWorkFlowChanging(value);
					this.SendPropertyChanging();
					this._WorkFlow = value;
					this.SendPropertyChanged("WorkFlow");
					this.OnWorkFlowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Solution", DbType="NVarChar(MAX)")]
		public string Solution
		{
			get
			{
				return this._Solution;
			}
			set
			{
				if ((this._Solution != value))
				{
					this.OnSolutionChanging(value);
					this.SendPropertyChanging();
					this._Solution = value;
					this.SendPropertyChanged("Solution");
					this.OnSolutionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRemoved", DbType="Bit NOT NULL")]
		public bool IsRemoved
		{
			get
			{
				return this._IsRemoved;
			}
			set
			{
				if ((this._IsRemoved != value))
				{
					this.OnIsRemovedChanging(value);
					this.SendPropertyChanging();
					this._IsRemoved = value;
					this.SendPropertyChanged("IsRemoved");
					this.OnIsRemovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UtilityIssue_UtilityPhoto", Storage="_UtilityPhotos", ThisKey="ID", OtherKey="UtilityIssueID")]
		public EntitySet<UtilityPhoto> UtilityPhotos
		{
			get
			{
				return this._UtilityPhotos;
			}
			set
			{
				this._UtilityPhotos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UtilityIssue_UtilityIssueComment", Storage="_UtilityIssueComments", ThisKey="ID", OtherKey="UtilityIssueID")]
		public EntitySet<UtilityIssueComment> UtilityIssueComments
		{
			get
			{
				return this._UtilityIssueComments;
			}
			set
			{
				this._UtilityIssueComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UtilityIssue_UtilityIssueTag", Storage="_UtilityIssueTags", ThisKey="ID", OtherKey="UtilityIssueID")]
		public EntitySet<UtilityIssueTag> UtilityIssueTags
		{
			get
			{
				return this._UtilityIssueTags;
			}
			set
			{
				this._UtilityIssueTags.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UtilityIssue_UtilityIssue", Storage="_UtilityIssues", ThisKey="ID", OtherKey="MainUtilityIssueID")]
		public EntitySet<UtilityIssue> UtilityIssues
		{
			get
			{
				return this._UtilityIssues;
			}
			set
			{
				this._UtilityIssues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UtilityIssue_UtilityIssueHistory", Storage="_UtilityIssueHistories", ThisKey="ID", OtherKey="UtilityIssueID")]
		public EntitySet<UtilityIssueHistory> UtilityIssueHistories
		{
			get
			{
				return this._UtilityIssueHistories;
			}
			set
			{
				this._UtilityIssueHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_UtilityIssue", Storage="_City", ThisKey="CityID", OtherKey="ID", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.UtilityIssues.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.UtilityIssues.Add(this);
						this._CityID = value.ID;
					}
					else
					{
						this._CityID = default(int);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UtilityIssue", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UtilityIssues.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UtilityIssues.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UtilityDepartment_UtilityIssue", Storage="_UtilityDepartment", ThisKey="UtilityDepartmentID", OtherKey="ID", IsForeignKey=true)]
		public UtilityDepartment UtilityDepartment
		{
			get
			{
				return this._UtilityDepartment.Entity;
			}
			set
			{
				UtilityDepartment previousValue = this._UtilityDepartment.Entity;
				if (((previousValue != value) 
							|| (this._UtilityDepartment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UtilityDepartment.Entity = null;
						previousValue.UtilityIssues.Remove(this);
					}
					this._UtilityDepartment.Entity = value;
					if ((value != null))
					{
						value.UtilityIssues.Add(this);
						this._UtilityDepartmentID = value.ID;
					}
					else
					{
						this._UtilityDepartmentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UtilityDepartment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UtilityIssue_UtilityIssue", Storage="_UtilityIssue1", ThisKey="MainUtilityIssueID", OtherKey="ID", IsForeignKey=true)]
		public UtilityIssue UtilityIssue1
		{
			get
			{
				return this._UtilityIssue1.Entity;
			}
			set
			{
				UtilityIssue previousValue = this._UtilityIssue1.Entity;
				if (((previousValue != value) 
							|| (this._UtilityIssue1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UtilityIssue1.Entity = null;
						previousValue.UtilityIssues.Remove(this);
					}
					this._UtilityIssue1.Entity = value;
					if ((value != null))
					{
						value.UtilityIssues.Add(this);
						this._MainUtilityIssueID = value.ID;
					}
					else
					{
						this._MainUtilityIssueID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UtilityIssue1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UtilityPhotos(UtilityPhoto entity)
		{
			this.SendPropertyChanging();
			entity.UtilityIssue = this;
		}
		
		private void detach_UtilityPhotos(UtilityPhoto entity)
		{
			this.SendPropertyChanging();
			entity.UtilityIssue = null;
		}
		
		private void attach_UtilityIssueComments(UtilityIssueComment entity)
		{
			this.SendPropertyChanging();
			entity.UtilityIssue = this;
		}
		
		private void detach_UtilityIssueComments(UtilityIssueComment entity)
		{
			this.SendPropertyChanging();
			entity.UtilityIssue = null;
		}
		
		private void attach_UtilityIssueTags(UtilityIssueTag entity)
		{
			this.SendPropertyChanging();
			entity.UtilityIssue = this;
		}
		
		private void detach_UtilityIssueTags(UtilityIssueTag entity)
		{
			this.SendPropertyChanging();
			entity.UtilityIssue = null;
		}
		
		private void attach_UtilityIssues(UtilityIssue entity)
		{
			this.SendPropertyChanging();
			entity.UtilityIssue1 = this;
		}
		
		private void detach_UtilityIssues(UtilityIssue entity)
		{
			this.SendPropertyChanging();
			entity.UtilityIssue1 = null;
		}
		
		private void attach_UtilityIssueHistories(UtilityIssueHistory entity)
		{
			this.SendPropertyChanging();
			entity.UtilityIssue = this;
		}
		
		private void detach_UtilityIssueHistories(UtilityIssueHistory entity)
		{
			this.SendPropertyChanging();
			entity.UtilityIssue = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UtilityIssueHistory")]
	public partial class UtilityIssueHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UtilityIssueID;
		
		private int _UserID;
		
		private System.DateTime _HistoryDate;
		
		private System.DateTime _AddedDate;
		
		private System.Nullable<System.DateTime> _AcceptedDate;
		
		private System.Nullable<System.DateTime> _ResolvedDate;
		
		private System.Nullable<System.DateTime> _ClosedDate;
		
		private System.Nullable<int> _UtilityDepartmentID;
		
		private System.Nullable<int> _MainUtilityIssueID;
		
		private double _Lat;
		
		private double _Lng;
		
		private string _Address;
		
		private string _Description;
		
		private string _WorkFlow;
		
		private string _Solution;
		
		private int _Status;
		
		private bool _IsRemoved;
		
		private EntitySet<UtilityIssueHistory> _UtilityIssueHistories;
		
		private EntityRef<UtilityIssueHistory> _UtilityIssueHistory1;
		
		private EntityRef<User> _User;
		
		private EntityRef<UtilityDepartment> _UtilityDepartment;
		
		private EntityRef<UtilityIssue> _UtilityIssue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUtilityIssueIDChanging(int value);
    partial void OnUtilityIssueIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnHistoryDateChanging(System.DateTime value);
    partial void OnHistoryDateChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnAcceptedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAcceptedDateChanged();
    partial void OnResolvedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnResolvedDateChanged();
    partial void OnClosedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnClosedDateChanged();
    partial void OnUtilityDepartmentIDChanging(System.Nullable<int> value);
    partial void OnUtilityDepartmentIDChanged();
    partial void OnMainUtilityIssueIDChanging(System.Nullable<int> value);
    partial void OnMainUtilityIssueIDChanged();
    partial void OnLatChanging(double value);
    partial void OnLatChanged();
    partial void OnLngChanging(double value);
    partial void OnLngChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnWorkFlowChanging(string value);
    partial void OnWorkFlowChanged();
    partial void OnSolutionChanging(string value);
    partial void OnSolutionChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnIsRemovedChanging(bool value);
    partial void OnIsRemovedChanged();
    #endregion
		
		public UtilityIssueHistory()
		{
			this._UtilityIssueHistories = new EntitySet<UtilityIssueHistory>(new Action<UtilityIssueHistory>(this.attach_UtilityIssueHistories), new Action<UtilityIssueHistory>(this.detach_UtilityIssueHistories));
			this._UtilityIssueHistory1 = default(EntityRef<UtilityIssueHistory>);
			this._User = default(EntityRef<User>);
			this._UtilityDepartment = default(EntityRef<UtilityDepartment>);
			this._UtilityIssue = default(EntityRef<UtilityIssue>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UtilityIssueID", DbType="Int NOT NULL")]
		public int UtilityIssueID
		{
			get
			{
				return this._UtilityIssueID;
			}
			set
			{
				if ((this._UtilityIssueID != value))
				{
					if (this._UtilityIssue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUtilityIssueIDChanging(value);
					this.SendPropertyChanging();
					this._UtilityIssueID = value;
					this.SendPropertyChanged("UtilityIssueID");
					this.OnUtilityIssueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HistoryDate", DbType="DateTime NOT NULL")]
		public System.DateTime HistoryDate
		{
			get
			{
				return this._HistoryDate;
			}
			set
			{
				if ((this._HistoryDate != value))
				{
					this.OnHistoryDateChanging(value);
					this.SendPropertyChanging();
					this._HistoryDate = value;
					this.SendPropertyChanged("HistoryDate");
					this.OnHistoryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcceptedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AcceptedDate
		{
			get
			{
				return this._AcceptedDate;
			}
			set
			{
				if ((this._AcceptedDate != value))
				{
					this.OnAcceptedDateChanging(value);
					this.SendPropertyChanging();
					this._AcceptedDate = value;
					this.SendPropertyChanged("AcceptedDate");
					this.OnAcceptedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResolvedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ResolvedDate
		{
			get
			{
				return this._ResolvedDate;
			}
			set
			{
				if ((this._ResolvedDate != value))
				{
					this.OnResolvedDateChanging(value);
					this.SendPropertyChanging();
					this._ResolvedDate = value;
					this.SendPropertyChanged("ResolvedDate");
					this.OnResolvedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClosedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ClosedDate
		{
			get
			{
				return this._ClosedDate;
			}
			set
			{
				if ((this._ClosedDate != value))
				{
					this.OnClosedDateChanging(value);
					this.SendPropertyChanging();
					this._ClosedDate = value;
					this.SendPropertyChanged("ClosedDate");
					this.OnClosedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UtilityDepartmentID", DbType="Int")]
		public System.Nullable<int> UtilityDepartmentID
		{
			get
			{
				return this._UtilityDepartmentID;
			}
			set
			{
				if ((this._UtilityDepartmentID != value))
				{
					if (this._UtilityDepartment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUtilityDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._UtilityDepartmentID = value;
					this.SendPropertyChanged("UtilityDepartmentID");
					this.OnUtilityDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MainUtilityIssueID", DbType="Int")]
		public System.Nullable<int> MainUtilityIssueID
		{
			get
			{
				return this._MainUtilityIssueID;
			}
			set
			{
				if ((this._MainUtilityIssueID != value))
				{
					if (this._UtilityIssueHistory1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMainUtilityIssueIDChanging(value);
					this.SendPropertyChanging();
					this._MainUtilityIssueID = value;
					this.SendPropertyChanged("MainUtilityIssueID");
					this.OnMainUtilityIssueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lat", DbType="Float NOT NULL")]
		public double Lat
		{
			get
			{
				return this._Lat;
			}
			set
			{
				if ((this._Lat != value))
				{
					this.OnLatChanging(value);
					this.SendPropertyChanging();
					this._Lat = value;
					this.SendPropertyChanged("Lat");
					this.OnLatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lng", DbType="Float NOT NULL")]
		public double Lng
		{
			get
			{
				return this._Lng;
			}
			set
			{
				if ((this._Lng != value))
				{
					this.OnLngChanging(value);
					this.SendPropertyChanging();
					this._Lng = value;
					this.SendPropertyChanged("Lng");
					this.OnLngChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(MAX)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkFlow", DbType="NVarChar(MAX)")]
		public string WorkFlow
		{
			get
			{
				return this._WorkFlow;
			}
			set
			{
				if ((this._WorkFlow != value))
				{
					this.OnWorkFlowChanging(value);
					this.SendPropertyChanging();
					this._WorkFlow = value;
					this.SendPropertyChanged("WorkFlow");
					this.OnWorkFlowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Solution", DbType="NVarChar(MAX)")]
		public string Solution
		{
			get
			{
				return this._Solution;
			}
			set
			{
				if ((this._Solution != value))
				{
					this.OnSolutionChanging(value);
					this.SendPropertyChanging();
					this._Solution = value;
					this.SendPropertyChanged("Solution");
					this.OnSolutionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRemoved", DbType="Bit NOT NULL")]
		public bool IsRemoved
		{
			get
			{
				return this._IsRemoved;
			}
			set
			{
				if ((this._IsRemoved != value))
				{
					this.OnIsRemovedChanging(value);
					this.SendPropertyChanging();
					this._IsRemoved = value;
					this.SendPropertyChanged("IsRemoved");
					this.OnIsRemovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UtilityIssueHistory_UtilityIssueHistory", Storage="_UtilityIssueHistories", ThisKey="ID", OtherKey="MainUtilityIssueID")]
		public EntitySet<UtilityIssueHistory> UtilityIssueHistories
		{
			get
			{
				return this._UtilityIssueHistories;
			}
			set
			{
				this._UtilityIssueHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UtilityIssueHistory_UtilityIssueHistory", Storage="_UtilityIssueHistory1", ThisKey="MainUtilityIssueID", OtherKey="ID", IsForeignKey=true)]
		public UtilityIssueHistory UtilityIssueHistory1
		{
			get
			{
				return this._UtilityIssueHistory1.Entity;
			}
			set
			{
				UtilityIssueHistory previousValue = this._UtilityIssueHistory1.Entity;
				if (((previousValue != value) 
							|| (this._UtilityIssueHistory1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UtilityIssueHistory1.Entity = null;
						previousValue.UtilityIssueHistories.Remove(this);
					}
					this._UtilityIssueHistory1.Entity = value;
					if ((value != null))
					{
						value.UtilityIssueHistories.Add(this);
						this._MainUtilityIssueID = value.ID;
					}
					else
					{
						this._MainUtilityIssueID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UtilityIssueHistory1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UtilityIssueHistory", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UtilityIssueHistories.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UtilityIssueHistories.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UtilityDepartment_UtilityIssueHistory", Storage="_UtilityDepartment", ThisKey="UtilityDepartmentID", OtherKey="ID", IsForeignKey=true)]
		public UtilityDepartment UtilityDepartment
		{
			get
			{
				return this._UtilityDepartment.Entity;
			}
			set
			{
				UtilityDepartment previousValue = this._UtilityDepartment.Entity;
				if (((previousValue != value) 
							|| (this._UtilityDepartment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UtilityDepartment.Entity = null;
						previousValue.UtilityIssueHistories.Remove(this);
					}
					this._UtilityDepartment.Entity = value;
					if ((value != null))
					{
						value.UtilityIssueHistories.Add(this);
						this._UtilityDepartmentID = value.ID;
					}
					else
					{
						this._UtilityDepartmentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UtilityDepartment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UtilityIssue_UtilityIssueHistory", Storage="_UtilityIssue", ThisKey="UtilityIssueID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public UtilityIssue UtilityIssue
		{
			get
			{
				return this._UtilityIssue.Entity;
			}
			set
			{
				UtilityIssue previousValue = this._UtilityIssue.Entity;
				if (((previousValue != value) 
							|| (this._UtilityIssue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UtilityIssue.Entity = null;
						previousValue.UtilityIssueHistories.Remove(this);
					}
					this._UtilityIssue.Entity = value;
					if ((value != null))
					{
						value.UtilityIssueHistories.Add(this);
						this._UtilityIssueID = value.ID;
					}
					else
					{
						this._UtilityIssueID = default(int);
					}
					this.SendPropertyChanged("UtilityIssue");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UtilityIssueHistories(UtilityIssueHistory entity)
		{
			this.SendPropertyChanging();
			entity.UtilityIssueHistory1 = this;
		}
		
		private void detach_UtilityIssueHistories(UtilityIssueHistory entity)
		{
			this.SendPropertyChanging();
			entity.UtilityIssueHistory1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InstagramPhoto")]
	public partial class InstagramPhoto : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _GlobalId;
		
		private int _CityID;
		
		private double _Lat;
		
		private double _Lng;
		
		private System.DateTime _CreatedTime;
		
		private string _PhotoUrl;
		
		private string _Caption;
		
		private string _Tags;
		
		private long _UserGlobalId;
		
		private string _UserName;
		
		private string _UserFullName;
		
		private System.DateTime _AddedDate;
		
		private EntityRef<City> _City;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnGlobalIdChanging(string value);
    partial void OnGlobalIdChanged();
    partial void OnCityIDChanging(int value);
    partial void OnCityIDChanged();
    partial void OnLatChanging(double value);
    partial void OnLatChanged();
    partial void OnLngChanging(double value);
    partial void OnLngChanged();
    partial void OnCreatedTimeChanging(System.DateTime value);
    partial void OnCreatedTimeChanged();
    partial void OnPhotoUrlChanging(string value);
    partial void OnPhotoUrlChanged();
    partial void OnCaptionChanging(string value);
    partial void OnCaptionChanged();
    partial void OnTagsChanging(string value);
    partial void OnTagsChanged();
    partial void OnUserGlobalIdChanging(long value);
    partial void OnUserGlobalIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnUserFullNameChanging(string value);
    partial void OnUserFullNameChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    #endregion
		
		public InstagramPhoto()
		{
			this._City = default(EntityRef<City>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GlobalId", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string GlobalId
		{
			get
			{
				return this._GlobalId;
			}
			set
			{
				if ((this._GlobalId != value))
				{
					this.OnGlobalIdChanging(value);
					this.SendPropertyChanging();
					this._GlobalId = value;
					this.SendPropertyChanged("GlobalId");
					this.OnGlobalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="Int NOT NULL")]
		public int CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lat", DbType="Float NOT NULL")]
		public double Lat
		{
			get
			{
				return this._Lat;
			}
			set
			{
				if ((this._Lat != value))
				{
					this.OnLatChanging(value);
					this.SendPropertyChanging();
					this._Lat = value;
					this.SendPropertyChanged("Lat");
					this.OnLatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lng", DbType="Float NOT NULL")]
		public double Lng
		{
			get
			{
				return this._Lng;
			}
			set
			{
				if ((this._Lng != value))
				{
					this.OnLngChanging(value);
					this.SendPropertyChanging();
					this._Lng = value;
					this.SendPropertyChanged("Lng");
					this.OnLngChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedTime
		{
			get
			{
				return this._CreatedTime;
			}
			set
			{
				if ((this._CreatedTime != value))
				{
					this.OnCreatedTimeChanging(value);
					this.SendPropertyChanging();
					this._CreatedTime = value;
					this.SendPropertyChanged("CreatedTime");
					this.OnCreatedTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoUrl", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string PhotoUrl
		{
			get
			{
				return this._PhotoUrl;
			}
			set
			{
				if ((this._PhotoUrl != value))
				{
					this.OnPhotoUrlChanging(value);
					this.SendPropertyChanging();
					this._PhotoUrl = value;
					this.SendPropertyChanged("PhotoUrl");
					this.OnPhotoUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Caption", DbType="NVarChar(MAX)")]
		public string Caption
		{
			get
			{
				return this._Caption;
			}
			set
			{
				if ((this._Caption != value))
				{
					this.OnCaptionChanging(value);
					this.SendPropertyChanging();
					this._Caption = value;
					this.SendPropertyChanged("Caption");
					this.OnCaptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tags", DbType="NVarChar(MAX)")]
		public string Tags
		{
			get
			{
				return this._Tags;
			}
			set
			{
				if ((this._Tags != value))
				{
					this.OnTagsChanging(value);
					this.SendPropertyChanging();
					this._Tags = value;
					this.SendPropertyChanged("Tags");
					this.OnTagsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserGlobalId", DbType="BigInt NOT NULL")]
		public long UserGlobalId
		{
			get
			{
				return this._UserGlobalId;
			}
			set
			{
				if ((this._UserGlobalId != value))
				{
					this.OnUserGlobalIdChanging(value);
					this.SendPropertyChanging();
					this._UserGlobalId = value;
					this.SendPropertyChanged("UserGlobalId");
					this.OnUserGlobalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserFullName", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string UserFullName
		{
			get
			{
				return this._UserFullName;
			}
			set
			{
				if ((this._UserFullName != value))
				{
					this.OnUserFullNameChanging(value);
					this.SendPropertyChanging();
					this._UserFullName = value;
					this.SendPropertyChanged("UserFullName");
					this.OnUserFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_InstagramPhoto", Storage="_City", ThisKey="CityID", OtherKey="ID", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.InstagramPhotos.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.InstagramPhotos.Add(this);
						this._CityID = value.ID;
					}
					else
					{
						this._CityID = default(int);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
