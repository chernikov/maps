#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace maps.Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="maps_work.Db")]
	public partial class mapsDbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccessibleDirection(AccessibleDirection instance);
    partial void UpdateAccessibleDirection(AccessibleDirection instance);
    partial void DeleteAccessibleDirection(AccessibleDirection instance);
    partial void InsertAccessibleObject(AccessibleObject instance);
    partial void UpdateAccessibleObject(AccessibleObject instance);
    partial void DeleteAccessibleObject(AccessibleObject instance);
    partial void InsertAccessibleObjectPhoto(AccessibleObjectPhoto instance);
    partial void UpdateAccessibleObjectPhoto(AccessibleObjectPhoto instance);
    partial void DeleteAccessibleObjectPhoto(AccessibleObjectPhoto instance);
    partial void InsertAccessiblePlace(AccessiblePlace instance);
    partial void UpdateAccessiblePlace(AccessiblePlace instance);
    partial void DeleteAccessiblePlace(AccessiblePlace instance);
    partial void InsertAccessiblePlacePhoto(AccessiblePlacePhoto instance);
    partial void UpdateAccessiblePlacePhoto(AccessiblePlacePhoto instance);
    partial void DeleteAccessiblePlacePhoto(AccessiblePlacePhoto instance);
    partial void InsertBicycleDirectionLine(BicycleDirectionLine instance);
    partial void UpdateBicycleDirectionLine(BicycleDirectionLine instance);
    partial void DeleteBicycleDirectionLine(BicycleDirectionLine instance);
    partial void InsertBicycleLine(BicycleLine instance);
    partial void UpdateBicycleLine(BicycleLine instance);
    partial void DeleteBicycleLine(BicycleLine instance);
    partial void InsertBicycleParking(BicycleParking instance);
    partial void UpdateBicycleParking(BicycleParking instance);
    partial void DeleteBicycleParking(BicycleParking instance);
    partial void InsertBicycleParkingVote(BicycleParkingVote instance);
    partial void UpdateBicycleParkingVote(BicycleParkingVote instance);
    partial void DeleteBicycleParkingVote(BicycleParkingVote instance);
    partial void InsertBrand(Brand instance);
    partial void UpdateBrand(Brand instance);
    partial void DeleteBrand(Brand instance);
    partial void InsertBus(Bus instance);
    partial void UpdateBus(Bus instance);
    partial void DeleteBus(Bus instance);
    partial void InsertBusPhoto(BusPhoto instance);
    partial void UpdateBusPhoto(BusPhoto instance);
    partial void DeleteBusPhoto(BusPhoto instance);
    partial void InsertBycicleDirection(BycicleDirection instance);
    partial void UpdateBycicleDirection(BycicleDirection instance);
    partial void DeleteBycicleDirection(BycicleDirection instance);
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    partial void InsertFundamentalRule(FundamentalRule instance);
    partial void UpdateFundamentalRule(FundamentalRule instance);
    partial void DeleteFundamentalRule(FundamentalRule instance);
    partial void InsertGoal(Goal instance);
    partial void UpdateGoal(Goal instance);
    partial void DeleteGoal(Goal instance);
    partial void InsertGoalCell(GoalCell instance);
    partial void UpdateGoalCell(GoalCell instance);
    partial void DeleteGoalCell(GoalCell instance);
    partial void InsertNotify(Notify instance);
    partial void UpdateNotify(Notify instance);
    partial void DeleteNotify(Notify instance);
    partial void InsertReport(Report instance);
    partial void UpdateReport(Report instance);
    partial void DeleteReport(Report instance);
    partial void InsertReportAnswer(ReportAnswer instance);
    partial void UpdateReportAnswer(ReportAnswer instance);
    partial void DeleteReportAnswer(ReportAnswer instance);
    partial void InsertReportComment(ReportComment instance);
    partial void UpdateReportComment(ReportComment instance);
    partial void DeleteReportComment(ReportComment instance);
    partial void InsertReportPhoto(ReportPhoto instance);
    partial void UpdateReportPhoto(ReportPhoto instance);
    partial void DeleteReportPhoto(ReportPhoto instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertRoute(Route instance);
    partial void UpdateRoute(Route instance);
    partial void DeleteRoute(Route instance);
    partial void InsertRouteSection(RouteSection instance);
    partial void UpdateRouteSection(RouteSection instance);
    partial void DeleteRouteSection(RouteSection instance);
    partial void InsertRule(Rule instance);
    partial void UpdateRule(Rule instance);
    partial void DeleteRule(Rule instance);
    partial void InsertRuleReport(RuleReport instance);
    partial void UpdateRuleReport(RuleReport instance);
    partial void DeleteRuleReport(RuleReport instance);
    partial void InsertSocial(Social instance);
    partial void UpdateSocial(Social instance);
    partial void DeleteSocial(Social instance);
    partial void InsertStation(Station instance);
    partial void UpdateStation(Station instance);
    partial void DeleteStation(Station instance);
    partial void InsertTransporteur(Transporteur instance);
    partial void UpdateTransporteur(Transporteur instance);
    partial void DeleteTransporteur(Transporteur instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUserRole(UserRole instance);
    partial void UpdateUserRole(UserRole instance);
    partial void DeleteUserRole(UserRole instance);
    partial void InsertUtilityDepartment(UtilityDepartment instance);
    partial void UpdateUtilityDepartment(UtilityDepartment instance);
    partial void DeleteUtilityDepartment(UtilityDepartment instance);
    partial void InsertUtilityIssue(UtilityIssue instance);
    partial void UpdateUtilityIssue(UtilityIssue instance);
    partial void DeleteUtilityIssue(UtilityIssue instance);
    partial void InsertUtilityIssueComment(UtilityIssueComment instance);
    partial void UpdateUtilityIssueComment(UtilityIssueComment instance);
    partial void DeleteUtilityIssueComment(UtilityIssueComment instance);
    partial void InsertUtilityIssueHistory(UtilityIssueHistory instance);
    partial void UpdateUtilityIssueHistory(UtilityIssueHistory instance);
    partial void DeleteUtilityIssueHistory(UtilityIssueHistory instance);
    partial void InsertUtilityIssueTag(UtilityIssueTag instance);
    partial void UpdateUtilityIssueTag(UtilityIssueTag instance);
    partial void DeleteUtilityIssueTag(UtilityIssueTag instance);
    partial void InsertUtilityPhoto(UtilityPhoto instance);
    partial void UpdateUtilityPhoto(UtilityPhoto instance);
    partial void DeleteUtilityPhoto(UtilityPhoto instance);
    partial void InsertUtilityTag(UtilityTag instance);
    partial void UpdateUtilityTag(UtilityTag instance);
    partial void DeleteUtilityTag(UtilityTag instance);
    partial void InsertVisualizationColumn(VisualizationColumn instance);
    partial void UpdateVisualizationColumn(VisualizationColumn instance);
    partial void DeleteVisualizationColumn(VisualizationColumn instance);
    partial void InsertVisualizationUser(VisualizationUser instance);
    partial void UpdateVisualizationUser(VisualizationUser instance);
    partial void DeleteVisualizationUser(VisualizationUser instance);
    partial void InsertVisualization(Visualization instance);
    partial void UpdateVisualization(Visualization instance);
    partial void DeleteVisualization(Visualization instance);
    partial void InsertVisualizationItem(VisualizationItem instance);
    partial void UpdateVisualizationItem(VisualizationItem instance);
    partial void DeleteVisualizationItem(VisualizationItem instance);
    partial void InsertBuildingElectricity(BuildingElectricity instance);
    partial void UpdateBuildingElectricity(BuildingElectricity instance);
    partial void DeleteBuildingElectricity(BuildingElectricity instance);
    partial void InsertBuilding(Building instance);
    partial void UpdateBuilding(Building instance);
    partial void DeleteBuilding(Building instance);
    #endregion
		
		public mapsDbDataContext() : 
				base(global::maps.Model.Properties.Settings.Default.maps_work_DbConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public mapsDbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public mapsDbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public mapsDbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public mapsDbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AccessibleDirection> AccessibleDirections
		{
			get
			{
				return this.GetTable<AccessibleDirection>();
			}
		}
		
		public System.Data.Linq.Table<AccessibleObject> AccessibleObjects
		{
			get
			{
				return this.GetTable<AccessibleObject>();
			}
		}
		
		public System.Data.Linq.Table<AccessibleObjectPhoto> AccessibleObjectPhotos
		{
			get
			{
				return this.GetTable<AccessibleObjectPhoto>();
			}
		}
		
		public System.Data.Linq.Table<AccessiblePlace> AccessiblePlaces
		{
			get
			{
				return this.GetTable<AccessiblePlace>();
			}
		}
		
		public System.Data.Linq.Table<AccessiblePlacePhoto> AccessiblePlacePhotos
		{
			get
			{
				return this.GetTable<AccessiblePlacePhoto>();
			}
		}
		
		public System.Data.Linq.Table<BicycleDirectionLine> BicycleDirectionLines
		{
			get
			{
				return this.GetTable<BicycleDirectionLine>();
			}
		}
		
		public System.Data.Linq.Table<BicycleLine> BicycleLines
		{
			get
			{
				return this.GetTable<BicycleLine>();
			}
		}
		
		public System.Data.Linq.Table<BicycleParking> BicycleParkings
		{
			get
			{
				return this.GetTable<BicycleParking>();
			}
		}
		
		public System.Data.Linq.Table<BicycleParkingVote> BicycleParkingVotes
		{
			get
			{
				return this.GetTable<BicycleParkingVote>();
			}
		}
		
		public System.Data.Linq.Table<Brand> Brands
		{
			get
			{
				return this.GetTable<Brand>();
			}
		}
		
		public System.Data.Linq.Table<Bus> Bus
		{
			get
			{
				return this.GetTable<Bus>();
			}
		}
		
		public System.Data.Linq.Table<BusPhoto> BusPhotos
		{
			get
			{
				return this.GetTable<BusPhoto>();
			}
		}
		
		public System.Data.Linq.Table<BycicleDirection> BycicleDirections
		{
			get
			{
				return this.GetTable<BycicleDirection>();
			}
		}
		
		public System.Data.Linq.Table<City> Cities
		{
			get
			{
				return this.GetTable<City>();
			}
		}
		
		public System.Data.Linq.Table<Comment> Comments
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
		
		public System.Data.Linq.Table<FundamentalRule> FundamentalRules
		{
			get
			{
				return this.GetTable<FundamentalRule>();
			}
		}
		
		public System.Data.Linq.Table<Goal> Goals
		{
			get
			{
				return this.GetTable<Goal>();
			}
		}
		
		public System.Data.Linq.Table<GoalCell> GoalCells
		{
			get
			{
				return this.GetTable<GoalCell>();
			}
		}
		
		public System.Data.Linq.Table<Notify> Notifies
		{
			get
			{
				return this.GetTable<Notify>();
			}
		}
		
		public System.Data.Linq.Table<Report> Reports
		{
			get
			{
				return this.GetTable<Report>();
			}
		}
		
		public System.Data.Linq.Table<ReportAnswer> ReportAnswers
		{
			get
			{
				return this.GetTable<ReportAnswer>();
			}
		}
		
		public System.Data.Linq.Table<ReportComment> ReportComments
		{
			get
			{
				return this.GetTable<ReportComment>();
			}
		}
		
		public System.Data.Linq.Table<ReportPhoto> ReportPhotos
		{
			get
			{
				return this.GetTable<ReportPhoto>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Route> Routes
		{
			get
			{
				return this.GetTable<Route>();
			}
		}
		
		public System.Data.Linq.Table<RouteSection> RouteSections
		{
			get
			{
				return this.GetTable<RouteSection>();
			}
		}
		
		public System.Data.Linq.Table<Rule> Rules
		{
			get
			{
				return this.GetTable<Rule>();
			}
		}
		
		public System.Data.Linq.Table<RuleReport> RuleReports
		{
			get
			{
				return this.GetTable<RuleReport>();
			}
		}
		
		public System.Data.Linq.Table<Social> Socials
		{
			get
			{
				return this.GetTable<Social>();
			}
		}
		
		public System.Data.Linq.Table<Station> Stations
		{
			get
			{
				return this.GetTable<Station>();
			}
		}
		
		public System.Data.Linq.Table<Transporteur> Transporteurs
		{
			get
			{
				return this.GetTable<Transporteur>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UserRole> UserRoles
		{
			get
			{
				return this.GetTable<UserRole>();
			}
		}
		
		public System.Data.Linq.Table<UtilityDepartment> UtilityDepartments
		{
			get
			{
				return this.GetTable<UtilityDepartment>();
			}
		}
		
		public System.Data.Linq.Table<UtilityIssue> UtilityIssues
		{
			get
			{
				return this.GetTable<UtilityIssue>();
			}
		}
		
		public System.Data.Linq.Table<UtilityIssueComment> UtilityIssueComments
		{
			get
			{
				return this.GetTable<UtilityIssueComment>();
			}
		}
		
		public System.Data.Linq.Table<UtilityIssueHistory> UtilityIssueHistories
		{
			get
			{
				return this.GetTable<UtilityIssueHistory>();
			}
		}
		
		public System.Data.Linq.Table<UtilityIssueTag> UtilityIssueTags
		{
			get
			{
				return this.GetTable<UtilityIssueTag>();
			}
		}
		
		public System.Data.Linq.Table<UtilityPhoto> UtilityPhotos
		{
			get
			{
				return this.GetTable<UtilityPhoto>();
			}
		}
		
		public System.Data.Linq.Table<UtilityTag> UtilityTags
		{
			get
			{
				return this.GetTable<UtilityTag>();
			}
		}
		
		public System.Data.Linq.Table<VisualizationColumn> VisualizationColumns
		{
			get
			{
				return this.GetTable<VisualizationColumn>();
			}
		}
		
		public System.Data.Linq.Table<VisualizationUser> VisualizationUsers
		{
			get
			{
				return this.GetTable<VisualizationUser>();
			}
		}
		
		public System.Data.Linq.Table<Visualization> Visualizations
		{
			get
			{
				return this.GetTable<Visualization>();
			}
		}
		
		public System.Data.Linq.Table<VisualizationItem> VisualizationItems
		{
			get
			{
				return this.GetTable<VisualizationItem>();
			}
		}
		
		public System.Data.Linq.Table<BuildingElectricity> BuildingElectricities
		{
			get
			{
				return this.GetTable<BuildingElectricity>();
			}
		}
		
		public System.Data.Linq.Table<Building> Buildings
		{
			get
			{
				return this.GetTable<Building>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccessibleDirection")]
	public partial class AccessibleDirection : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CityID;
		
		private int _UserID;
		
		private string _Waypoints;
		
		private string _PolyLine;
		
		private double _Length;
		
		private System.DateTime _AddedDate;
		
		private EntityRef<City> _City;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCityIDChanging(int value);
    partial void OnCityIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnWaypointsChanging(string value);
    partial void OnWaypointsChanged();
    partial void OnPolyLineChanging(string value);
    partial void OnPolyLineChanged();
    partial void OnLengthChanging(double value);
    partial void OnLengthChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    #endregion
		
		public AccessibleDirection()
		{
			this._City = default(EntityRef<City>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="Int NOT NULL")]
		public int CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Waypoints", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Waypoints
		{
			get
			{
				return this._Waypoints;
			}
			set
			{
				if ((this._Waypoints != value))
				{
					this.OnWaypointsChanging(value);
					this.SendPropertyChanging();
					this._Waypoints = value;
					this.SendPropertyChanged("Waypoints");
					this.OnWaypointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PolyLine", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PolyLine
		{
			get
			{
				return this._PolyLine;
			}
			set
			{
				if ((this._PolyLine != value))
				{
					this.OnPolyLineChanging(value);
					this.SendPropertyChanging();
					this._PolyLine = value;
					this.SendPropertyChanged("PolyLine");
					this.OnPolyLineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Length", DbType="Float NOT NULL")]
		public double Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_AccessibleDirection", Storage="_City", ThisKey="CityID", OtherKey="ID", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.AccessibleDirections.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.AccessibleDirections.Add(this);
						this._CityID = value.ID;
					}
					else
					{
						this._CityID = default(int);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_AccessibleDirection", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.AccessibleDirections.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.AccessibleDirections.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccessibleObject")]
	public partial class AccessibleObject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private int _CityID;
		
		private double _Lat;
		
		private double _Lng;
		
		private int _Type;
		
		private string _Description;
		
		private string _Address;
		
		private System.DateTime _AddedDate;
		
		private System.Nullable<System.DateTime> _VerifiedDate;
		
		private EntitySet<AccessibleObjectPhoto> _AccessibleObjectPhotos;
		
		private EntityRef<City> _City;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnCityIDChanging(int value);
    partial void OnCityIDChanged();
    partial void OnLatChanging(double value);
    partial void OnLatChanged();
    partial void OnLngChanging(double value);
    partial void OnLngChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnVerifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnVerifiedDateChanged();
    #endregion
		
		public AccessibleObject()
		{
			this._AccessibleObjectPhotos = new EntitySet<AccessibleObjectPhoto>(new Action<AccessibleObjectPhoto>(this.attach_AccessibleObjectPhotos), new Action<AccessibleObjectPhoto>(this.detach_AccessibleObjectPhotos));
			this._City = default(EntityRef<City>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="Int NOT NULL")]
		public int CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lat", DbType="Float NOT NULL")]
		public double Lat
		{
			get
			{
				return this._Lat;
			}
			set
			{
				if ((this._Lat != value))
				{
					this.OnLatChanging(value);
					this.SendPropertyChanging();
					this._Lat = value;
					this.SendPropertyChanged("Lat");
					this.OnLatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lng", DbType="Float NOT NULL")]
		public double Lng
		{
			get
			{
				return this._Lng;
			}
			set
			{
				if ((this._Lng != value))
				{
					this.OnLngChanging(value);
					this.SendPropertyChanging();
					this._Lng = value;
					this.SendPropertyChanged("Lng");
					this.OnLngChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(MAX)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VerifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> VerifiedDate
		{
			get
			{
				return this._VerifiedDate;
			}
			set
			{
				if ((this._VerifiedDate != value))
				{
					this.OnVerifiedDateChanging(value);
					this.SendPropertyChanging();
					this._VerifiedDate = value;
					this.SendPropertyChanged("VerifiedDate");
					this.OnVerifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccessibleObject_AccessibleObjectPhoto", Storage="_AccessibleObjectPhotos", ThisKey="ID", OtherKey="AccessibleObjectID")]
		public EntitySet<AccessibleObjectPhoto> AccessibleObjectPhotos
		{
			get
			{
				return this._AccessibleObjectPhotos;
			}
			set
			{
				this._AccessibleObjectPhotos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_AccessibleObject", Storage="_City", ThisKey="CityID", OtherKey="ID", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.AccessibleObjects.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.AccessibleObjects.Add(this);
						this._CityID = value.ID;
					}
					else
					{
						this._CityID = default(int);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_AccessibleObject", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.AccessibleObjects.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.AccessibleObjects.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccessibleObjectPhotos(AccessibleObjectPhoto entity)
		{
			this.SendPropertyChanging();
			entity.AccessibleObject = this;
		}
		
		private void detach_AccessibleObjectPhotos(AccessibleObjectPhoto entity)
		{
			this.SendPropertyChanging();
			entity.AccessibleObject = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccessibleObjectPhoto")]
	public partial class AccessibleObjectPhoto : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _AccessibleObjectID;
		
		private string _ImagePath;
		
		private EntityRef<AccessibleObject> _AccessibleObject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAccessibleObjectIDChanging(System.Nullable<int> value);
    partial void OnAccessibleObjectIDChanged();
    partial void OnImagePathChanging(string value);
    partial void OnImagePathChanged();
    #endregion
		
		public AccessibleObjectPhoto()
		{
			this._AccessibleObject = default(EntityRef<AccessibleObject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessibleObjectID", DbType="Int")]
		public System.Nullable<int> AccessibleObjectID
		{
			get
			{
				return this._AccessibleObjectID;
			}
			set
			{
				if ((this._AccessibleObjectID != value))
				{
					if (this._AccessibleObject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccessibleObjectIDChanging(value);
					this.SendPropertyChanging();
					this._AccessibleObjectID = value;
					this.SendPropertyChanged("AccessibleObjectID");
					this.OnAccessibleObjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImagePath", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string ImagePath
		{
			get
			{
				return this._ImagePath;
			}
			set
			{
				if ((this._ImagePath != value))
				{
					this.OnImagePathChanging(value);
					this.SendPropertyChanging();
					this._ImagePath = value;
					this.SendPropertyChanged("ImagePath");
					this.OnImagePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccessibleObject_AccessibleObjectPhoto", Storage="_AccessibleObject", ThisKey="AccessibleObjectID", OtherKey="ID", IsForeignKey=true)]
		public AccessibleObject AccessibleObject
		{
			get
			{
				return this._AccessibleObject.Entity;
			}
			set
			{
				AccessibleObject previousValue = this._AccessibleObject.Entity;
				if (((previousValue != value) 
							|| (this._AccessibleObject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccessibleObject.Entity = null;
						previousValue.AccessibleObjectPhotos.Remove(this);
					}
					this._AccessibleObject.Entity = value;
					if ((value != null))
					{
						value.AccessibleObjectPhotos.Add(this);
						this._AccessibleObjectID = value.ID;
					}
					else
					{
						this._AccessibleObjectID = default(Nullable<int>);
					}
					this.SendPropertyChanged("AccessibleObject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccessiblePlace")]
	public partial class AccessiblePlace : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private int _CityID;
		
		private double _Lat;
		
		private double _Lng;
		
		private string _Description;
		
		private string _Address;
		
		private System.DateTime _AddedDate;
		
		private System.Nullable<System.DateTime> _VerifiedDate;
		
		private EntitySet<AccessiblePlacePhoto> _AccessiblePlacePhotos;
		
		private EntityRef<City> _City;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnCityIDChanging(int value);
    partial void OnCityIDChanged();
    partial void OnLatChanging(double value);
    partial void OnLatChanged();
    partial void OnLngChanging(double value);
    partial void OnLngChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnVerifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnVerifiedDateChanged();
    #endregion
		
		public AccessiblePlace()
		{
			this._AccessiblePlacePhotos = new EntitySet<AccessiblePlacePhoto>(new Action<AccessiblePlacePhoto>(this.attach_AccessiblePlacePhotos), new Action<AccessiblePlacePhoto>(this.detach_AccessiblePlacePhotos));
			this._City = default(EntityRef<City>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="Int NOT NULL")]
		public int CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lat", DbType="Float NOT NULL")]
		public double Lat
		{
			get
			{
				return this._Lat;
			}
			set
			{
				if ((this._Lat != value))
				{
					this.OnLatChanging(value);
					this.SendPropertyChanging();
					this._Lat = value;
					this.SendPropertyChanged("Lat");
					this.OnLatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lng", DbType="Float NOT NULL")]
		public double Lng
		{
			get
			{
				return this._Lng;
			}
			set
			{
				if ((this._Lng != value))
				{
					this.OnLngChanging(value);
					this.SendPropertyChanging();
					this._Lng = value;
					this.SendPropertyChanged("Lng");
					this.OnLngChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(MAX)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VerifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> VerifiedDate
		{
			get
			{
				return this._VerifiedDate;
			}
			set
			{
				if ((this._VerifiedDate != value))
				{
					this.OnVerifiedDateChanging(value);
					this.SendPropertyChanging();
					this._VerifiedDate = value;
					this.SendPropertyChanged("VerifiedDate");
					this.OnVerifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccessiblePlace_AccessiblePlacePhoto", Storage="_AccessiblePlacePhotos", ThisKey="ID", OtherKey="AccessiblePlaceID")]
		public EntitySet<AccessiblePlacePhoto> AccessiblePlacePhotos
		{
			get
			{
				return this._AccessiblePlacePhotos;
			}
			set
			{
				this._AccessiblePlacePhotos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_AccessiblePlace", Storage="_City", ThisKey="CityID", OtherKey="ID", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.AccessiblePlaces.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.AccessiblePlaces.Add(this);
						this._CityID = value.ID;
					}
					else
					{
						this._CityID = default(int);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_AccessiblePlace", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.AccessiblePlaces.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.AccessiblePlaces.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccessiblePlacePhotos(AccessiblePlacePhoto entity)
		{
			this.SendPropertyChanging();
			entity.AccessiblePlace = this;
		}
		
		private void detach_AccessiblePlacePhotos(AccessiblePlacePhoto entity)
		{
			this.SendPropertyChanging();
			entity.AccessiblePlace = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccessiblePlacePhoto")]
	public partial class AccessiblePlacePhoto : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _AccessiblePlaceID;
		
		private string _ImagePath;
		
		private EntityRef<AccessiblePlace> _AccessiblePlace;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAccessiblePlaceIDChanging(System.Nullable<int> value);
    partial void OnAccessiblePlaceIDChanged();
    partial void OnImagePathChanging(string value);
    partial void OnImagePathChanged();
    #endregion
		
		public AccessiblePlacePhoto()
		{
			this._AccessiblePlace = default(EntityRef<AccessiblePlace>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessiblePlaceID", DbType="Int")]
		public System.Nullable<int> AccessiblePlaceID
		{
			get
			{
				return this._AccessiblePlaceID;
			}
			set
			{
				if ((this._AccessiblePlaceID != value))
				{
					if (this._AccessiblePlace.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccessiblePlaceIDChanging(value);
					this.SendPropertyChanging();
					this._AccessiblePlaceID = value;
					this.SendPropertyChanged("AccessiblePlaceID");
					this.OnAccessiblePlaceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImagePath", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string ImagePath
		{
			get
			{
				return this._ImagePath;
			}
			set
			{
				if ((this._ImagePath != value))
				{
					this.OnImagePathChanging(value);
					this.SendPropertyChanging();
					this._ImagePath = value;
					this.SendPropertyChanged("ImagePath");
					this.OnImagePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccessiblePlace_AccessiblePlacePhoto", Storage="_AccessiblePlace", ThisKey="AccessiblePlaceID", OtherKey="ID", IsForeignKey=true)]
		public AccessiblePlace AccessiblePlace
		{
			get
			{
				return this._AccessiblePlace.Entity;
			}
			set
			{
				AccessiblePlace previousValue = this._AccessiblePlace.Entity;
				if (((previousValue != value) 
							|| (this._AccessiblePlace.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccessiblePlace.Entity = null;
						previousValue.AccessiblePlacePhotos.Remove(this);
					}
					this._AccessiblePlace.Entity = value;
					if ((value != null))
					{
						value.AccessiblePlacePhotos.Add(this);
						this._AccessiblePlaceID = value.ID;
					}
					else
					{
						this._AccessiblePlaceID = default(Nullable<int>);
					}
					this.SendPropertyChanged("AccessiblePlace");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BicycleDirectionLine")]
	public partial class BicycleDirectionLine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _BicycleDirectionID;
		
		private int _BicycleLineID;
		
		private EntityRef<BicycleLine> _BicycleLine;
		
		private EntityRef<BycicleDirection> _BycicleDirection;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnBicycleDirectionIDChanging(int value);
    partial void OnBicycleDirectionIDChanged();
    partial void OnBicycleLineIDChanging(int value);
    partial void OnBicycleLineIDChanged();
    #endregion
		
		public BicycleDirectionLine()
		{
			this._BicycleLine = default(EntityRef<BicycleLine>);
			this._BycicleDirection = default(EntityRef<BycicleDirection>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BicycleDirectionID", DbType="Int NOT NULL")]
		public int BicycleDirectionID
		{
			get
			{
				return this._BicycleDirectionID;
			}
			set
			{
				if ((this._BicycleDirectionID != value))
				{
					if (this._BycicleDirection.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBicycleDirectionIDChanging(value);
					this.SendPropertyChanging();
					this._BicycleDirectionID = value;
					this.SendPropertyChanged("BicycleDirectionID");
					this.OnBicycleDirectionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BicycleLineID", DbType="Int NOT NULL")]
		public int BicycleLineID
		{
			get
			{
				return this._BicycleLineID;
			}
			set
			{
				if ((this._BicycleLineID != value))
				{
					if (this._BicycleLine.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBicycleLineIDChanging(value);
					this.SendPropertyChanging();
					this._BicycleLineID = value;
					this.SendPropertyChanged("BicycleLineID");
					this.OnBicycleLineIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BicycleLine_BicycleDirectionLine", Storage="_BicycleLine", ThisKey="BicycleLineID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public BicycleLine BicycleLine
		{
			get
			{
				return this._BicycleLine.Entity;
			}
			set
			{
				BicycleLine previousValue = this._BicycleLine.Entity;
				if (((previousValue != value) 
							|| (this._BicycleLine.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BicycleLine.Entity = null;
						previousValue.BicycleDirectionLines.Remove(this);
					}
					this._BicycleLine.Entity = value;
					if ((value != null))
					{
						value.BicycleDirectionLines.Add(this);
						this._BicycleLineID = value.ID;
					}
					else
					{
						this._BicycleLineID = default(int);
					}
					this.SendPropertyChanged("BicycleLine");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BycicleDirection_BicycleDirectionLine", Storage="_BycicleDirection", ThisKey="BicycleDirectionID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public BycicleDirection BycicleDirection
		{
			get
			{
				return this._BycicleDirection.Entity;
			}
			set
			{
				BycicleDirection previousValue = this._BycicleDirection.Entity;
				if (((previousValue != value) 
							|| (this._BycicleDirection.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BycicleDirection.Entity = null;
						previousValue.BicycleDirectionLines.Remove(this);
					}
					this._BycicleDirection.Entity = value;
					if ((value != null))
					{
						value.BicycleDirectionLines.Add(this);
						this._BicycleDirectionID = value.ID;
					}
					else
					{
						this._BicycleDirectionID = default(int);
					}
					this.SendPropertyChanged("BycicleDirection");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BicycleLine")]
	public partial class BicycleLine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CityID;
		
		private string _Start;
		
		private string _End;
		
		private double _StartLat;
		
		private double _StartLng;
		
		private double _EndLat;
		
		private double _EndLng;
		
		private int _Quantity;
		
		private EntitySet<BicycleDirectionLine> _BicycleDirectionLines;
		
		private EntityRef<City> _City;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCityIDChanging(int value);
    partial void OnCityIDChanged();
    partial void OnStartChanging(string value);
    partial void OnStartChanged();
    partial void OnEndChanging(string value);
    partial void OnEndChanged();
    partial void OnStartLatChanging(double value);
    partial void OnStartLatChanged();
    partial void OnStartLngChanging(double value);
    partial void OnStartLngChanged();
    partial void OnEndLatChanging(double value);
    partial void OnEndLatChanged();
    partial void OnEndLngChanging(double value);
    partial void OnEndLngChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    #endregion
		
		public BicycleLine()
		{
			this._BicycleDirectionLines = new EntitySet<BicycleDirectionLine>(new Action<BicycleDirectionLine>(this.attach_BicycleDirectionLines), new Action<BicycleDirectionLine>(this.detach_BicycleDirectionLines));
			this._City = default(EntityRef<City>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="Int NOT NULL")]
		public int CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Start", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Start
		{
			get
			{
				return this._Start;
			}
			set
			{
				if ((this._Start != value))
				{
					this.OnStartChanging(value);
					this.SendPropertyChanging();
					this._Start = value;
					this.SendPropertyChanged("Start");
					this.OnStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[End]", Storage="_End", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string End
		{
			get
			{
				return this._End;
			}
			set
			{
				if ((this._End != value))
				{
					this.OnEndChanging(value);
					this.SendPropertyChanging();
					this._End = value;
					this.SendPropertyChanged("End");
					this.OnEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartLat", DbType="Float NOT NULL")]
		public double StartLat
		{
			get
			{
				return this._StartLat;
			}
			set
			{
				if ((this._StartLat != value))
				{
					this.OnStartLatChanging(value);
					this.SendPropertyChanging();
					this._StartLat = value;
					this.SendPropertyChanged("StartLat");
					this.OnStartLatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartLng", DbType="Float NOT NULL")]
		public double StartLng
		{
			get
			{
				return this._StartLng;
			}
			set
			{
				if ((this._StartLng != value))
				{
					this.OnStartLngChanging(value);
					this.SendPropertyChanging();
					this._StartLng = value;
					this.SendPropertyChanged("StartLng");
					this.OnStartLngChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndLat", DbType="Float NOT NULL")]
		public double EndLat
		{
			get
			{
				return this._EndLat;
			}
			set
			{
				if ((this._EndLat != value))
				{
					this.OnEndLatChanging(value);
					this.SendPropertyChanging();
					this._EndLat = value;
					this.SendPropertyChanged("EndLat");
					this.OnEndLatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndLng", DbType="Float NOT NULL")]
		public double EndLng
		{
			get
			{
				return this._EndLng;
			}
			set
			{
				if ((this._EndLng != value))
				{
					this.OnEndLngChanging(value);
					this.SendPropertyChanging();
					this._EndLng = value;
					this.SendPropertyChanged("EndLng");
					this.OnEndLngChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BicycleLine_BicycleDirectionLine", Storage="_BicycleDirectionLines", ThisKey="ID", OtherKey="BicycleLineID")]
		public EntitySet<BicycleDirectionLine> BicycleDirectionLines
		{
			get
			{
				return this._BicycleDirectionLines;
			}
			set
			{
				this._BicycleDirectionLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_BicycleLine", Storage="_City", ThisKey="CityID", OtherKey="ID", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.BicycleLines.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.BicycleLines.Add(this);
						this._CityID = value.ID;
					}
					else
					{
						this._CityID = default(int);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BicycleDirectionLines(BicycleDirectionLine entity)
		{
			this.SendPropertyChanging();
			entity.BicycleLine = this;
		}
		
		private void detach_BicycleDirectionLines(BicycleDirectionLine entity)
		{
			this.SendPropertyChanging();
			entity.BicycleLine = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BicycleParking")]
	public partial class BicycleParking : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private int _CityID;
		
		private string _Position;
		
		private string _PhotoUrl;
		
		private bool _Exist;
		
		private int _Type;
		
		private bool _Lock;
		
		private bool _Camera;
		
		private bool _Rent;
		
		private int _Quality;
		
		private int _Capacity;
		
		private int _VotesCount;
		
		private string _Description;
		
		private System.DateTime _AddedDate;
		
		private System.Nullable<System.DateTime> _VerifiedDate;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private string _Address;
		
		private double _CenterDistance;
		
		private bool _IsMedical;
		
		private EntitySet<BicycleParkingVote> _BicycleParkingVotes;
		
		private EntityRef<City> _City;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnCityIDChanging(int value);
    partial void OnCityIDChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    partial void OnPhotoUrlChanging(string value);
    partial void OnPhotoUrlChanged();
    partial void OnExistChanging(bool value);
    partial void OnExistChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnLockChanging(bool value);
    partial void OnLockChanged();
    partial void OnCameraChanging(bool value);
    partial void OnCameraChanged();
    partial void OnRentChanging(bool value);
    partial void OnRentChanged();
    partial void OnQualityChanging(int value);
    partial void OnQualityChanged();
    partial void OnCapacityChanging(int value);
    partial void OnCapacityChanged();
    partial void OnVotesCountChanging(int value);
    partial void OnVotesCountChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnVerifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnVerifiedDateChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCenterDistanceChanging(double value);
    partial void OnCenterDistanceChanged();
    partial void OnIsMedicalChanging(bool value);
    partial void OnIsMedicalChanged();
    #endregion
		
		public BicycleParking()
		{
			this._BicycleParkingVotes = new EntitySet<BicycleParkingVote>(new Action<BicycleParkingVote>(this.attach_BicycleParkingVotes), new Action<BicycleParkingVote>(this.detach_BicycleParkingVotes));
			this._City = default(EntityRef<City>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="Int NOT NULL")]
		public int CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoUrl", DbType="NVarChar(150)")]
		public string PhotoUrl
		{
			get
			{
				return this._PhotoUrl;
			}
			set
			{
				if ((this._PhotoUrl != value))
				{
					this.OnPhotoUrlChanging(value);
					this.SendPropertyChanging();
					this._PhotoUrl = value;
					this.SendPropertyChanged("PhotoUrl");
					this.OnPhotoUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exist", DbType="Bit NOT NULL")]
		public bool Exist
		{
			get
			{
				return this._Exist;
			}
			set
			{
				if ((this._Exist != value))
				{
					this.OnExistChanging(value);
					this.SendPropertyChanging();
					this._Exist = value;
					this.SendPropertyChanged("Exist");
					this.OnExistChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lock", DbType="Bit NOT NULL")]
		public bool Lock
		{
			get
			{
				return this._Lock;
			}
			set
			{
				if ((this._Lock != value))
				{
					this.OnLockChanging(value);
					this.SendPropertyChanging();
					this._Lock = value;
					this.SendPropertyChanged("Lock");
					this.OnLockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Camera", DbType="Bit NOT NULL")]
		public bool Camera
		{
			get
			{
				return this._Camera;
			}
			set
			{
				if ((this._Camera != value))
				{
					this.OnCameraChanging(value);
					this.SendPropertyChanging();
					this._Camera = value;
					this.SendPropertyChanged("Camera");
					this.OnCameraChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rent", DbType="Bit NOT NULL")]
		public bool Rent
		{
			get
			{
				return this._Rent;
			}
			set
			{
				if ((this._Rent != value))
				{
					this.OnRentChanging(value);
					this.SendPropertyChanging();
					this._Rent = value;
					this.SendPropertyChanged("Rent");
					this.OnRentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quality", DbType="Int NOT NULL")]
		public int Quality
		{
			get
			{
				return this._Quality;
			}
			set
			{
				if ((this._Quality != value))
				{
					this.OnQualityChanging(value);
					this.SendPropertyChanging();
					this._Quality = value;
					this.SendPropertyChanged("Quality");
					this.OnQualityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Capacity", DbType="Int NOT NULL")]
		public int Capacity
		{
			get
			{
				return this._Capacity;
			}
			set
			{
				if ((this._Capacity != value))
				{
					this.OnCapacityChanging(value);
					this.SendPropertyChanging();
					this._Capacity = value;
					this.SendPropertyChanged("Capacity");
					this.OnCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VotesCount", DbType="Int NOT NULL")]
		public int VotesCount
		{
			get
			{
				return this._VotesCount;
			}
			set
			{
				if ((this._VotesCount != value))
				{
					this.OnVotesCountChanging(value);
					this.SendPropertyChanging();
					this._VotesCount = value;
					this.SendPropertyChanged("VotesCount");
					this.OnVotesCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VerifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> VerifiedDate
		{
			get
			{
				return this._VerifiedDate;
			}
			set
			{
				if ((this._VerifiedDate != value))
				{
					this.OnVerifiedDateChanging(value);
					this.SendPropertyChanging();
					this._VerifiedDate = value;
					this.SendPropertyChanged("VerifiedDate");
					this.OnVerifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(MAX)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CenterDistance", DbType="Float NOT NULL")]
		public double CenterDistance
		{
			get
			{
				return this._CenterDistance;
			}
			set
			{
				if ((this._CenterDistance != value))
				{
					this.OnCenterDistanceChanging(value);
					this.SendPropertyChanging();
					this._CenterDistance = value;
					this.SendPropertyChanged("CenterDistance");
					this.OnCenterDistanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsMedical", DbType="Bit NOT NULL")]
		public bool IsMedical
		{
			get
			{
				return this._IsMedical;
			}
			set
			{
				if ((this._IsMedical != value))
				{
					this.OnIsMedicalChanging(value);
					this.SendPropertyChanging();
					this._IsMedical = value;
					this.SendPropertyChanged("IsMedical");
					this.OnIsMedicalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BicycleParking_BicycleParkingVote", Storage="_BicycleParkingVotes", ThisKey="ID", OtherKey="BicycleParkingID")]
		public EntitySet<BicycleParkingVote> BicycleParkingVotes
		{
			get
			{
				return this._BicycleParkingVotes;
			}
			set
			{
				this._BicycleParkingVotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_BicycleParking", Storage="_City", ThisKey="CityID", OtherKey="ID", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.BicycleParkings.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.BicycleParkings.Add(this);
						this._CityID = value.ID;
					}
					else
					{
						this._CityID = default(int);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_BicycleParking", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.BicycleParkings.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.BicycleParkings.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BicycleParkingVotes(BicycleParkingVote entity)
		{
			this.SendPropertyChanging();
			entity.BicycleParking = this;
		}
		
		private void detach_BicycleParkingVotes(BicycleParkingVote entity)
		{
			this.SendPropertyChanging();
			entity.BicycleParking = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BicycleParkingVote")]
	public partial class BicycleParkingVote : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private int _BicycleParkingID;
		
		private int _Mark;
		
		private EntityRef<BicycleParking> _BicycleParking;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnBicycleParkingIDChanging(int value);
    partial void OnBicycleParkingIDChanged();
    partial void OnMarkChanging(int value);
    partial void OnMarkChanged();
    #endregion
		
		public BicycleParkingVote()
		{
			this._BicycleParking = default(EntityRef<BicycleParking>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BicycleParkingID", DbType="Int NOT NULL")]
		public int BicycleParkingID
		{
			get
			{
				return this._BicycleParkingID;
			}
			set
			{
				if ((this._BicycleParkingID != value))
				{
					if (this._BicycleParking.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBicycleParkingIDChanging(value);
					this.SendPropertyChanging();
					this._BicycleParkingID = value;
					this.SendPropertyChanged("BicycleParkingID");
					this.OnBicycleParkingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mark", DbType="Int NOT NULL")]
		public int Mark
		{
			get
			{
				return this._Mark;
			}
			set
			{
				if ((this._Mark != value))
				{
					this.OnMarkChanging(value);
					this.SendPropertyChanging();
					this._Mark = value;
					this.SendPropertyChanged("Mark");
					this.OnMarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BicycleParking_BicycleParkingVote", Storage="_BicycleParking", ThisKey="BicycleParkingID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public BicycleParking BicycleParking
		{
			get
			{
				return this._BicycleParking.Entity;
			}
			set
			{
				BicycleParking previousValue = this._BicycleParking.Entity;
				if (((previousValue != value) 
							|| (this._BicycleParking.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BicycleParking.Entity = null;
						previousValue.BicycleParkingVotes.Remove(this);
					}
					this._BicycleParking.Entity = value;
					if ((value != null))
					{
						value.BicycleParkingVotes.Add(this);
						this._BicycleParkingID = value.ID;
					}
					else
					{
						this._BicycleParkingID = default(int);
					}
					this.SendPropertyChanged("BicycleParking");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_BicycleParkingVote", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.BicycleParkingVotes.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.BicycleParkingVotes.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Brand")]
	public partial class Brand : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<Bus> _Bus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Brand()
		{
			this._Bus = new EntitySet<Bus>(new Action<Bus>(this.attach_Bus), new Action<Bus>(this.detach_Bus));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Brand_Bus", Storage="_Bus", ThisKey="ID", OtherKey="BrandID")]
		public EntitySet<Bus> Bus
		{
			get
			{
				return this._Bus;
			}
			set
			{
				this._Bus.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bus(Bus entity)
		{
			this.SendPropertyChanging();
			entity.Brand = this;
		}
		
		private void detach_Bus(Bus entity)
		{
			this.SendPropertyChanging();
			entity.Brand = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bus")]
	public partial class Bus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _TransporteurID;
		
		private int _RouteID;
		
		private int _BrandID;
		
		private string _Number;
		
		private EntitySet<BusPhoto> _BusPhotos;
		
		private EntitySet<Report> _Reports;
		
		private EntityRef<Brand> _Brand;
		
		private EntityRef<Route> _Route;
		
		private EntityRef<Transporteur> _Transporteur;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTransporteurIDChanging(int value);
    partial void OnTransporteurIDChanged();
    partial void OnRouteIDChanging(int value);
    partial void OnRouteIDChanged();
    partial void OnBrandIDChanging(int value);
    partial void OnBrandIDChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    #endregion
		
		public Bus()
		{
			this._BusPhotos = new EntitySet<BusPhoto>(new Action<BusPhoto>(this.attach_BusPhotos), new Action<BusPhoto>(this.detach_BusPhotos));
			this._Reports = new EntitySet<Report>(new Action<Report>(this.attach_Reports), new Action<Report>(this.detach_Reports));
			this._Brand = default(EntityRef<Brand>);
			this._Route = default(EntityRef<Route>);
			this._Transporteur = default(EntityRef<Transporteur>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransporteurID", DbType="Int NOT NULL")]
		public int TransporteurID
		{
			get
			{
				return this._TransporteurID;
			}
			set
			{
				if ((this._TransporteurID != value))
				{
					if (this._Transporteur.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransporteurIDChanging(value);
					this.SendPropertyChanging();
					this._TransporteurID = value;
					this.SendPropertyChanged("TransporteurID");
					this.OnTransporteurIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RouteID", DbType="Int NOT NULL")]
		public int RouteID
		{
			get
			{
				return this._RouteID;
			}
			set
			{
				if ((this._RouteID != value))
				{
					if (this._Route.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRouteIDChanging(value);
					this.SendPropertyChanging();
					this._RouteID = value;
					this.SendPropertyChanged("RouteID");
					this.OnRouteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrandID", DbType="Int NOT NULL")]
		public int BrandID
		{
			get
			{
				return this._BrandID;
			}
			set
			{
				if ((this._BrandID != value))
				{
					if (this._Brand.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBrandIDChanging(value);
					this.SendPropertyChanging();
					this._BrandID = value;
					this.SendPropertyChanged("BrandID");
					this.OnBrandIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bus_BusPhoto", Storage="_BusPhotos", ThisKey="ID", OtherKey="BusID")]
		public EntitySet<BusPhoto> BusPhotos
		{
			get
			{
				return this._BusPhotos;
			}
			set
			{
				this._BusPhotos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bus_Report", Storage="_Reports", ThisKey="ID", OtherKey="BusID")]
		public EntitySet<Report> Reports
		{
			get
			{
				return this._Reports;
			}
			set
			{
				this._Reports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Brand_Bus", Storage="_Brand", ThisKey="BrandID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Brand Brand
		{
			get
			{
				return this._Brand.Entity;
			}
			set
			{
				Brand previousValue = this._Brand.Entity;
				if (((previousValue != value) 
							|| (this._Brand.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Brand.Entity = null;
						previousValue.Bus.Remove(this);
					}
					this._Brand.Entity = value;
					if ((value != null))
					{
						value.Bus.Add(this);
						this._BrandID = value.ID;
					}
					else
					{
						this._BrandID = default(int);
					}
					this.SendPropertyChanged("Brand");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Route_Bus", Storage="_Route", ThisKey="RouteID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Route Route
		{
			get
			{
				return this._Route.Entity;
			}
			set
			{
				Route previousValue = this._Route.Entity;
				if (((previousValue != value) 
							|| (this._Route.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Route.Entity = null;
						previousValue.Bus.Remove(this);
					}
					this._Route.Entity = value;
					if ((value != null))
					{
						value.Bus.Add(this);
						this._RouteID = value.ID;
					}
					else
					{
						this._RouteID = default(int);
					}
					this.SendPropertyChanged("Route");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Transporteur_Bus", Storage="_Transporteur", ThisKey="TransporteurID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Transporteur Transporteur
		{
			get
			{
				return this._Transporteur.Entity;
			}
			set
			{
				Transporteur previousValue = this._Transporteur.Entity;
				if (((previousValue != value) 
							|| (this._Transporteur.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Transporteur.Entity = null;
						previousValue.Bus.Remove(this);
					}
					this._Transporteur.Entity = value;
					if ((value != null))
					{
						value.Bus.Add(this);
						this._TransporteurID = value.ID;
					}
					else
					{
						this._TransporteurID = default(int);
					}
					this.SendPropertyChanged("Transporteur");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BusPhotos(BusPhoto entity)
		{
			this.SendPropertyChanging();
			entity.Bus = this;
		}
		
		private void detach_BusPhotos(BusPhoto entity)
		{
			this.SendPropertyChanging();
			entity.Bus = null;
		}
		
		private void attach_Reports(Report entity)
		{
			this.SendPropertyChanging();
			entity.Bus = this;
		}
		
		private void detach_Reports(Report entity)
		{
			this.SendPropertyChanging();
			entity.Bus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BusPhoto")]
	public partial class BusPhoto : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _BusID;
		
		private string _ImagePath;
		
		private EntityRef<Bus> _Bus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnBusIDChanging(int value);
    partial void OnBusIDChanged();
    partial void OnImagePathChanging(string value);
    partial void OnImagePathChanged();
    #endregion
		
		public BusPhoto()
		{
			this._Bus = default(EntityRef<Bus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusID", DbType="Int NOT NULL")]
		public int BusID
		{
			get
			{
				return this._BusID;
			}
			set
			{
				if ((this._BusID != value))
				{
					if (this._Bus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBusIDChanging(value);
					this.SendPropertyChanging();
					this._BusID = value;
					this.SendPropertyChanged("BusID");
					this.OnBusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImagePath", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string ImagePath
		{
			get
			{
				return this._ImagePath;
			}
			set
			{
				if ((this._ImagePath != value))
				{
					this.OnImagePathChanging(value);
					this.SendPropertyChanging();
					this._ImagePath = value;
					this.SendPropertyChanged("ImagePath");
					this.OnImagePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bus_BusPhoto", Storage="_Bus", ThisKey="BusID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Bus Bus
		{
			get
			{
				return this._Bus.Entity;
			}
			set
			{
				Bus previousValue = this._Bus.Entity;
				if (((previousValue != value) 
							|| (this._Bus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bus.Entity = null;
						previousValue.BusPhotos.Remove(this);
					}
					this._Bus.Entity = value;
					if ((value != null))
					{
						value.BusPhotos.Add(this);
						this._BusID = value.ID;
					}
					else
					{
						this._BusID = default(int);
					}
					this.SendPropertyChanged("Bus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BycicleDirection")]
	public partial class BycicleDirection : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CityID;
		
		private int _UserID;
		
		private string _Waypoints;
		
		private string _PolyLine;
		
		private double _Length;
		
		private bool _Processed;
		
		private System.DateTime _AddedDate;
		
		private EntitySet<BicycleDirectionLine> _BicycleDirectionLines;
		
		private EntityRef<City> _City;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCityIDChanging(int value);
    partial void OnCityIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnWaypointsChanging(string value);
    partial void OnWaypointsChanged();
    partial void OnPolyLineChanging(string value);
    partial void OnPolyLineChanged();
    partial void OnLengthChanging(double value);
    partial void OnLengthChanged();
    partial void OnProcessedChanging(bool value);
    partial void OnProcessedChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    #endregion
		
		public BycicleDirection()
		{
			this._BicycleDirectionLines = new EntitySet<BicycleDirectionLine>(new Action<BicycleDirectionLine>(this.attach_BicycleDirectionLines), new Action<BicycleDirectionLine>(this.detach_BicycleDirectionLines));
			this._City = default(EntityRef<City>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="Int NOT NULL")]
		public int CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Waypoints", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Waypoints
		{
			get
			{
				return this._Waypoints;
			}
			set
			{
				if ((this._Waypoints != value))
				{
					this.OnWaypointsChanging(value);
					this.SendPropertyChanging();
					this._Waypoints = value;
					this.SendPropertyChanged("Waypoints");
					this.OnWaypointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PolyLine", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PolyLine
		{
			get
			{
				return this._PolyLine;
			}
			set
			{
				if ((this._PolyLine != value))
				{
					this.OnPolyLineChanging(value);
					this.SendPropertyChanging();
					this._PolyLine = value;
					this.SendPropertyChanged("PolyLine");
					this.OnPolyLineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Length", DbType="Float NOT NULL")]
		public double Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Processed", DbType="Bit NOT NULL")]
		public bool Processed
		{
			get
			{
				return this._Processed;
			}
			set
			{
				if ((this._Processed != value))
				{
					this.OnProcessedChanging(value);
					this.SendPropertyChanging();
					this._Processed = value;
					this.SendPropertyChanged("Processed");
					this.OnProcessedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BycicleDirection_BicycleDirectionLine", Storage="_BicycleDirectionLines", ThisKey="ID", OtherKey="BicycleDirectionID")]
		public EntitySet<BicycleDirectionLine> BicycleDirectionLines
		{
			get
			{
				return this._BicycleDirectionLines;
			}
			set
			{
				this._BicycleDirectionLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_BycicleDirection", Storage="_City", ThisKey="CityID", OtherKey="ID", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.BycicleDirections.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.BycicleDirections.Add(this);
						this._CityID = value.ID;
					}
					else
					{
						this._CityID = default(int);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_BycicleDirection", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.BycicleDirections.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.BycicleDirections.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BicycleDirectionLines(BicycleDirectionLine entity)
		{
			this.SendPropertyChanging();
			entity.BycicleDirection = this;
		}
		
		private void detach_BicycleDirectionLines(BicycleDirectionLine entity)
		{
			this.SendPropertyChanging();
			entity.BycicleDirection = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.City")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private double _CenterLat;
		
		private double _CenterLng;
		
		private int _Zoom;
		
		private EntitySet<AccessibleDirection> _AccessibleDirections;
		
		private EntitySet<AccessibleObject> _AccessibleObjects;
		
		private EntitySet<AccessiblePlace> _AccessiblePlaces;
		
		private EntitySet<BicycleLine> _BicycleLines;
		
		private EntitySet<BicycleParking> _BicycleParkings;
		
		private EntitySet<BycicleDirection> _BycicleDirections;
		
		private EntitySet<User> _Users;
		
		private EntitySet<UtilityDepartment> _UtilityDepartments;
		
		private EntitySet<UtilityIssue> _UtilityIssues;
		
		private EntitySet<Building> _Buildings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCenterLatChanging(double value);
    partial void OnCenterLatChanged();
    partial void OnCenterLngChanging(double value);
    partial void OnCenterLngChanged();
    partial void OnZoomChanging(int value);
    partial void OnZoomChanged();
    #endregion
		
		public City()
		{
			this._AccessibleDirections = new EntitySet<AccessibleDirection>(new Action<AccessibleDirection>(this.attach_AccessibleDirections), new Action<AccessibleDirection>(this.detach_AccessibleDirections));
			this._AccessibleObjects = new EntitySet<AccessibleObject>(new Action<AccessibleObject>(this.attach_AccessibleObjects), new Action<AccessibleObject>(this.detach_AccessibleObjects));
			this._AccessiblePlaces = new EntitySet<AccessiblePlace>(new Action<AccessiblePlace>(this.attach_AccessiblePlaces), new Action<AccessiblePlace>(this.detach_AccessiblePlaces));
			this._BicycleLines = new EntitySet<BicycleLine>(new Action<BicycleLine>(this.attach_BicycleLines), new Action<BicycleLine>(this.detach_BicycleLines));
			this._BicycleParkings = new EntitySet<BicycleParking>(new Action<BicycleParking>(this.attach_BicycleParkings), new Action<BicycleParking>(this.detach_BicycleParkings));
			this._BycicleDirections = new EntitySet<BycicleDirection>(new Action<BycicleDirection>(this.attach_BycicleDirections), new Action<BycicleDirection>(this.detach_BycicleDirections));
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._UtilityDepartments = new EntitySet<UtilityDepartment>(new Action<UtilityDepartment>(this.attach_UtilityDepartments), new Action<UtilityDepartment>(this.detach_UtilityDepartments));
			this._UtilityIssues = new EntitySet<UtilityIssue>(new Action<UtilityIssue>(this.attach_UtilityIssues), new Action<UtilityIssue>(this.detach_UtilityIssues));
			this._Buildings = new EntitySet<Building>(new Action<Building>(this.attach_Buildings), new Action<Building>(this.detach_Buildings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CenterLat", DbType="Float NOT NULL")]
		public double CenterLat
		{
			get
			{
				return this._CenterLat;
			}
			set
			{
				if ((this._CenterLat != value))
				{
					this.OnCenterLatChanging(value);
					this.SendPropertyChanging();
					this._CenterLat = value;
					this.SendPropertyChanged("CenterLat");
					this.OnCenterLatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CenterLng", DbType="Float NOT NULL")]
		public double CenterLng
		{
			get
			{
				return this._CenterLng;
			}
			set
			{
				if ((this._CenterLng != value))
				{
					this.OnCenterLngChanging(value);
					this.SendPropertyChanging();
					this._CenterLng = value;
					this.SendPropertyChanged("CenterLng");
					this.OnCenterLngChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zoom", DbType="Int NOT NULL")]
		public int Zoom
		{
			get
			{
				return this._Zoom;
			}
			set
			{
				if ((this._Zoom != value))
				{
					this.OnZoomChanging(value);
					this.SendPropertyChanging();
					this._Zoom = value;
					this.SendPropertyChanged("Zoom");
					this.OnZoomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_AccessibleDirection", Storage="_AccessibleDirections", ThisKey="ID", OtherKey="CityID")]
		public EntitySet<AccessibleDirection> AccessibleDirections
		{
			get
			{
				return this._AccessibleDirections;
			}
			set
			{
				this._AccessibleDirections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_AccessibleObject", Storage="_AccessibleObjects", ThisKey="ID", OtherKey="CityID")]
		public EntitySet<AccessibleObject> AccessibleObjects
		{
			get
			{
				return this._AccessibleObjects;
			}
			set
			{
				this._AccessibleObjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_AccessiblePlace", Storage="_AccessiblePlaces", ThisKey="ID", OtherKey="CityID")]
		public EntitySet<AccessiblePlace> AccessiblePlaces
		{
			get
			{
				return this._AccessiblePlaces;
			}
			set
			{
				this._AccessiblePlaces.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_BicycleLine", Storage="_BicycleLines", ThisKey="ID", OtherKey="CityID")]
		public EntitySet<BicycleLine> BicycleLines
		{
			get
			{
				return this._BicycleLines;
			}
			set
			{
				this._BicycleLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_BicycleParking", Storage="_BicycleParkings", ThisKey="ID", OtherKey="CityID")]
		public EntitySet<BicycleParking> BicycleParkings
		{
			get
			{
				return this._BicycleParkings;
			}
			set
			{
				this._BicycleParkings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_BycicleDirection", Storage="_BycicleDirections", ThisKey="ID", OtherKey="CityID")]
		public EntitySet<BycicleDirection> BycicleDirections
		{
			get
			{
				return this._BycicleDirections;
			}
			set
			{
				this._BycicleDirections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_User", Storage="_Users", ThisKey="ID", OtherKey="CityID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_UtilityDepartment", Storage="_UtilityDepartments", ThisKey="ID", OtherKey="CityID")]
		public EntitySet<UtilityDepartment> UtilityDepartments
		{
			get
			{
				return this._UtilityDepartments;
			}
			set
			{
				this._UtilityDepartments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_UtilityIssue", Storage="_UtilityIssues", ThisKey="ID", OtherKey="CityID")]
		public EntitySet<UtilityIssue> UtilityIssues
		{
			get
			{
				return this._UtilityIssues;
			}
			set
			{
				this._UtilityIssues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Building", Storage="_Buildings", ThisKey="ID", OtherKey="CityID")]
		public EntitySet<Building> Buildings
		{
			get
			{
				return this._Buildings;
			}
			set
			{
				this._Buildings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccessibleDirections(AccessibleDirection entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_AccessibleDirections(AccessibleDirection entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
		
		private void attach_AccessibleObjects(AccessibleObject entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_AccessibleObjects(AccessibleObject entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
		
		private void attach_AccessiblePlaces(AccessiblePlace entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_AccessiblePlaces(AccessiblePlace entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
		
		private void attach_BicycleLines(BicycleLine entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_BicycleLines(BicycleLine entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
		
		private void attach_BicycleParkings(BicycleParking entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_BicycleParkings(BicycleParking entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
		
		private void attach_BycicleDirections(BycicleDirection entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_BycicleDirections(BycicleDirection entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
		
		private void attach_UtilityDepartments(UtilityDepartment entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_UtilityDepartments(UtilityDepartment entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
		
		private void attach_UtilityIssues(UtilityIssue entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_UtilityIssues(UtilityIssue entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
		
		private void attach_Buildings(Building entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Buildings(Building entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Comment")]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private System.Nullable<int> _ParentID;
		
		private System.DateTime _AddedDate;
		
		private string _Text;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<ReportComment> _ReportComments;
		
		private EntitySet<UtilityIssueComment> _UtilityIssueComments;
		
		private EntityRef<Comment> _Comment1;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnParentIDChanging(System.Nullable<int> value);
    partial void OnParentIDChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public Comment()
		{
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._ReportComments = new EntitySet<ReportComment>(new Action<ReportComment>(this.attach_ReportComments), new Action<ReportComment>(this.detach_ReportComments));
			this._UtilityIssueComments = new EntitySet<UtilityIssueComment>(new Action<UtilityIssueComment>(this.attach_UtilityIssueComments), new Action<UtilityIssueComment>(this.detach_UtilityIssueComments));
			this._Comment1 = default(EntityRef<Comment>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="Int")]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._Comment1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_Comment", Storage="_Comments", ThisKey="ID", OtherKey="ParentID")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_ReportComment", Storage="_ReportComments", ThisKey="ID", OtherKey="CommentID")]
		public EntitySet<ReportComment> ReportComments
		{
			get
			{
				return this._ReportComments;
			}
			set
			{
				this._ReportComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_UtilityIssueComment", Storage="_UtilityIssueComments", ThisKey="ID", OtherKey="CommentID")]
		public EntitySet<UtilityIssueComment> UtilityIssueComments
		{
			get
			{
				return this._UtilityIssueComments;
			}
			set
			{
				this._UtilityIssueComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_Comment", Storage="_Comment1", ThisKey="ParentID", OtherKey="ID", IsForeignKey=true)]
		public Comment Comment1
		{
			get
			{
				return this._Comment1.Entity;
			}
			set
			{
				Comment previousValue = this._Comment1.Entity;
				if (((previousValue != value) 
							|| (this._Comment1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Comment1.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._Comment1.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._ParentID = value.ID;
					}
					else
					{
						this._ParentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Comment1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Comment", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Comment1 = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Comment1 = null;
		}
		
		private void attach_ReportComments(ReportComment entity)
		{
			this.SendPropertyChanging();
			entity.Comment = this;
		}
		
		private void detach_ReportComments(ReportComment entity)
		{
			this.SendPropertyChanging();
			entity.Comment = null;
		}
		
		private void attach_UtilityIssueComments(UtilityIssueComment entity)
		{
			this.SendPropertyChanging();
			entity.Comment = this;
		}
		
		private void detach_UtilityIssueComments(UtilityIssueComment entity)
		{
			this.SendPropertyChanging();
			entity.Comment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FundamentalRule")]
	public partial class FundamentalRule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<Rule> _Rules;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public FundamentalRule()
		{
			this._Rules = new EntitySet<Rule>(new Action<Rule>(this.attach_Rules), new Action<Rule>(this.detach_Rules));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FundamentalRule_Rule", Storage="_Rules", ThisKey="ID", OtherKey="FundamentalRuleID")]
		public EntitySet<Rule> Rules
		{
			get
			{
				return this._Rules;
			}
			set
			{
				this._Rules.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Rules(Rule entity)
		{
			this.SendPropertyChanging();
			entity.FundamentalRule = this;
		}
		
		private void detach_Rules(Rule entity)
		{
			this.SendPropertyChanging();
			entity.FundamentalRule = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Goal")]
	public partial class Goal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private bool _IsPublic;
		
		private string _Url;
		
		private string _Text;
		
		private int _Count;
		
		private int _Progress;
		
		private System.DateTime _AddedDate;
		
		private bool _IsReady;
		
		private int _ColumnsCount;
		
		private EntitySet<GoalCell> _GoalCells;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnIsPublicChanging(bool value);
    partial void OnIsPublicChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnCountChanging(int value);
    partial void OnCountChanged();
    partial void OnProgressChanging(int value);
    partial void OnProgressChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnIsReadyChanging(bool value);
    partial void OnIsReadyChanged();
    partial void OnColumnsCountChanging(int value);
    partial void OnColumnsCountChanged();
    #endregion
		
		public Goal()
		{
			this._GoalCells = new EntitySet<GoalCell>(new Action<GoalCell>(this.attach_GoalCells), new Action<GoalCell>(this.detach_GoalCells));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPublic", DbType="Bit NOT NULL")]
		public bool IsPublic
		{
			get
			{
				return this._IsPublic;
			}
			set
			{
				if ((this._IsPublic != value))
				{
					this.OnIsPublicChanging(value);
					this.SendPropertyChanging();
					this._IsPublic = value;
					this.SendPropertyChanged("IsPublic");
					this.OnIsPublicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(140) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(140) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Count", DbType="Int NOT NULL")]
		public int Count
		{
			get
			{
				return this._Count;
			}
			set
			{
				if ((this._Count != value))
				{
					this.OnCountChanging(value);
					this.SendPropertyChanging();
					this._Count = value;
					this.SendPropertyChanged("Count");
					this.OnCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Progress", DbType="Int NOT NULL")]
		public int Progress
		{
			get
			{
				return this._Progress;
			}
			set
			{
				if ((this._Progress != value))
				{
					this.OnProgressChanging(value);
					this.SendPropertyChanging();
					this._Progress = value;
					this.SendPropertyChanged("Progress");
					this.OnProgressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsReady", DbType="Bit NOT NULL")]
		public bool IsReady
		{
			get
			{
				return this._IsReady;
			}
			set
			{
				if ((this._IsReady != value))
				{
					this.OnIsReadyChanging(value);
					this.SendPropertyChanging();
					this._IsReady = value;
					this.SendPropertyChanged("IsReady");
					this.OnIsReadyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColumnsCount", DbType="Int NOT NULL")]
		public int ColumnsCount
		{
			get
			{
				return this._ColumnsCount;
			}
			set
			{
				if ((this._ColumnsCount != value))
				{
					this.OnColumnsCountChanging(value);
					this.SendPropertyChanging();
					this._ColumnsCount = value;
					this.SendPropertyChanged("ColumnsCount");
					this.OnColumnsCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Goal_GoalCell", Storage="_GoalCells", ThisKey="ID", OtherKey="GoalID")]
		public EntitySet<GoalCell> GoalCells
		{
			get
			{
				return this._GoalCells;
			}
			set
			{
				this._GoalCells.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Goal", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Goals.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Goals.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GoalCells(GoalCell entity)
		{
			this.SendPropertyChanging();
			entity.Goal = this;
		}
		
		private void detach_GoalCells(GoalCell entity)
		{
			this.SendPropertyChanging();
			entity.Goal = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GoalCell")]
	public partial class GoalCell : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _GoalID;
		
		private int _Number;
		
		private int _State;
		
		private System.Nullable<System.DateTime> _AddedDate;
		
		private EntityRef<Goal> _Goal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnGoalIDChanging(int value);
    partial void OnGoalIDChanged();
    partial void OnNumberChanging(int value);
    partial void OnNumberChanged();
    partial void OnStateChanging(int value);
    partial void OnStateChanged();
    partial void OnAddedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAddedDateChanged();
    #endregion
		
		public GoalCell()
		{
			this._Goal = default(EntityRef<Goal>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GoalID", DbType="Int NOT NULL")]
		public int GoalID
		{
			get
			{
				return this._GoalID;
			}
			set
			{
				if ((this._GoalID != value))
				{
					if (this._Goal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGoalIDChanging(value);
					this.SendPropertyChanging();
					this._GoalID = value;
					this.SendPropertyChanged("GoalID");
					this.OnGoalIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="Int NOT NULL")]
		public int Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="Int NOT NULL")]
		public int State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Goal_GoalCell", Storage="_Goal", ThisKey="GoalID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Goal Goal
		{
			get
			{
				return this._Goal.Entity;
			}
			set
			{
				Goal previousValue = this._Goal.Entity;
				if (((previousValue != value) 
							|| (this._Goal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Goal.Entity = null;
						previousValue.GoalCells.Remove(this);
					}
					this._Goal.Entity = value;
					if ((value != null))
					{
						value.GoalCells.Add(this);
						this._GoalID = value.ID;
					}
					else
					{
						this._GoalID = default(int);
					}
					this.SendPropertyChanged("Goal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Notify")]
	public partial class Notify : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _ReportID;
		
		private string _Phone;
		
		private string _Email;
		
		private string _Sender;
		
		private string _Header;
		
		private string _Text;
		
		private System.DateTime _AddedDate;
		
		private bool _IsSent;
		
		private string _Result;
		
		private EntityRef<Report> _Report;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnReportIDChanging(System.Nullable<int> value);
    partial void OnReportIDChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnSenderChanging(string value);
    partial void OnSenderChanged();
    partial void OnHeaderChanging(string value);
    partial void OnHeaderChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnIsSentChanging(bool value);
    partial void OnIsSentChanged();
    partial void OnResultChanging(string value);
    partial void OnResultChanged();
    #endregion
		
		public Notify()
		{
			this._Report = default(EntityRef<Report>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportID", DbType="Int")]
		public System.Nullable<int> ReportID
		{
			get
			{
				return this._ReportID;
			}
			set
			{
				if ((this._ReportID != value))
				{
					if (this._Report.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportIDChanging(value);
					this.SendPropertyChanging();
					this._ReportID = value;
					this.SendPropertyChanged("ReportID");
					this.OnReportIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(150)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sender", DbType="NVarChar(50)")]
		public string Sender
		{
			get
			{
				return this._Sender;
			}
			set
			{
				if ((this._Sender != value))
				{
					this.OnSenderChanging(value);
					this.SendPropertyChanging();
					this._Sender = value;
					this.SendPropertyChanged("Sender");
					this.OnSenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Header", DbType="NVarChar(150)")]
		public string Header
		{
			get
			{
				return this._Header;
			}
			set
			{
				if ((this._Header != value))
				{
					this.OnHeaderChanging(value);
					this.SendPropertyChanging();
					this._Header = value;
					this.SendPropertyChanged("Header");
					this.OnHeaderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(MAX)")]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSent", DbType="Bit NOT NULL")]
		public bool IsSent
		{
			get
			{
				return this._IsSent;
			}
			set
			{
				if ((this._IsSent != value))
				{
					this.OnIsSentChanging(value);
					this.SendPropertyChanging();
					this._IsSent = value;
					this.SendPropertyChanged("IsSent");
					this.OnIsSentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result", DbType="NVarChar(MAX)")]
		public string Result
		{
			get
			{
				return this._Result;
			}
			set
			{
				if ((this._Result != value))
				{
					this.OnResultChanging(value);
					this.SendPropertyChanging();
					this._Result = value;
					this.SendPropertyChanged("Result");
					this.OnResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Report_Notify", Storage="_Report", ThisKey="ReportID", OtherKey="ID", IsForeignKey=true)]
		public Report Report
		{
			get
			{
				return this._Report.Entity;
			}
			set
			{
				Report previousValue = this._Report.Entity;
				if (((previousValue != value) 
							|| (this._Report.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Report.Entity = null;
						previousValue.Notifies.Remove(this);
					}
					this._Report.Entity = value;
					if ((value != null))
					{
						value.Notifies.Add(this);
						this._ReportID = value.ID;
					}
					else
					{
						this._ReportID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Report");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Report")]
	public partial class Report : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private System.Nullable<int> _RouteID;
		
		private System.Nullable<int> _BusID;
		
		private int _Status;
		
		private int _Type;
		
		private System.DateTime _AddedDate;
		
		private System.DateTime _DeadlineDate;
		
		private System.Nullable<System.DateTime> _DateTime;
		
		private System.Nullable<int> _StationID;
		
		private string _Description;
		
		private System.Nullable<int> _NotifyTransporteurID;
		
		private System.Nullable<int> _NotifyReporterID;
		
		private string _Link;
		
		private string _FacebookLink;
		
		private EntitySet<Notify> _Notifies;
		
		private EntitySet<ReportAnswer> _ReportAnswers;
		
		private EntitySet<ReportComment> _ReportComments;
		
		private EntitySet<ReportPhoto> _ReportPhotos;
		
		private EntitySet<RuleReport> _RuleReports;
		
		private EntityRef<Bus> _Bus;
		
		private EntityRef<Route> _Route;
		
		private EntityRef<Station> _Station;
		
		private EntityRef<Transporteur> _Transporteur;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnRouteIDChanging(System.Nullable<int> value);
    partial void OnRouteIDChanged();
    partial void OnBusIDChanging(System.Nullable<int> value);
    partial void OnBusIDChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnDeadlineDateChanging(System.DateTime value);
    partial void OnDeadlineDateChanged();
    partial void OnDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnDateTimeChanged();
    partial void OnStationIDChanging(System.Nullable<int> value);
    partial void OnStationIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnNotifyTransporteurIDChanging(System.Nullable<int> value);
    partial void OnNotifyTransporteurIDChanged();
    partial void OnNotifyReporterIDChanging(System.Nullable<int> value);
    partial void OnNotifyReporterIDChanged();
    partial void OnLinkChanging(string value);
    partial void OnLinkChanged();
    partial void OnFacebookLinkChanging(string value);
    partial void OnFacebookLinkChanged();
    #endregion
		
		public Report()
		{
			this._Notifies = new EntitySet<Notify>(new Action<Notify>(this.attach_Notifies), new Action<Notify>(this.detach_Notifies));
			this._ReportAnswers = new EntitySet<ReportAnswer>(new Action<ReportAnswer>(this.attach_ReportAnswers), new Action<ReportAnswer>(this.detach_ReportAnswers));
			this._ReportComments = new EntitySet<ReportComment>(new Action<ReportComment>(this.attach_ReportComments), new Action<ReportComment>(this.detach_ReportComments));
			this._ReportPhotos = new EntitySet<ReportPhoto>(new Action<ReportPhoto>(this.attach_ReportPhotos), new Action<ReportPhoto>(this.detach_ReportPhotos));
			this._RuleReports = new EntitySet<RuleReport>(new Action<RuleReport>(this.attach_RuleReports), new Action<RuleReport>(this.detach_RuleReports));
			this._Bus = default(EntityRef<Bus>);
			this._Route = default(EntityRef<Route>);
			this._Station = default(EntityRef<Station>);
			this._Transporteur = default(EntityRef<Transporteur>);
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RouteID", DbType="Int")]
		public System.Nullable<int> RouteID
		{
			get
			{
				return this._RouteID;
			}
			set
			{
				if ((this._RouteID != value))
				{
					if (this._Route.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRouteIDChanging(value);
					this.SendPropertyChanging();
					this._RouteID = value;
					this.SendPropertyChanged("RouteID");
					this.OnRouteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusID", DbType="Int")]
		public System.Nullable<int> BusID
		{
			get
			{
				return this._BusID;
			}
			set
			{
				if ((this._BusID != value))
				{
					if (this._Bus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBusIDChanging(value);
					this.SendPropertyChanging();
					this._BusID = value;
					this.SendPropertyChanged("BusID");
					this.OnBusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeadlineDate", DbType="DateTime NOT NULL")]
		public System.DateTime DeadlineDate
		{
			get
			{
				return this._DeadlineDate;
			}
			set
			{
				if ((this._DeadlineDate != value))
				{
					this.OnDeadlineDateChanging(value);
					this.SendPropertyChanging();
					this._DeadlineDate = value;
					this.SendPropertyChanged("DeadlineDate");
					this.OnDeadlineDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateTime
		{
			get
			{
				return this._DateTime;
			}
			set
			{
				if ((this._DateTime != value))
				{
					this.OnDateTimeChanging(value);
					this.SendPropertyChanging();
					this._DateTime = value;
					this.SendPropertyChanged("DateTime");
					this.OnDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StationID", DbType="Int")]
		public System.Nullable<int> StationID
		{
			get
			{
				return this._StationID;
			}
			set
			{
				if ((this._StationID != value))
				{
					if (this._Station.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStationIDChanging(value);
					this.SendPropertyChanging();
					this._StationID = value;
					this.SendPropertyChanged("StationID");
					this.OnStationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotifyTransporteurID", DbType="Int")]
		public System.Nullable<int> NotifyTransporteurID
		{
			get
			{
				return this._NotifyTransporteurID;
			}
			set
			{
				if ((this._NotifyTransporteurID != value))
				{
					if (this._Transporteur.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNotifyTransporteurIDChanging(value);
					this.SendPropertyChanging();
					this._NotifyTransporteurID = value;
					this.SendPropertyChanged("NotifyTransporteurID");
					this.OnNotifyTransporteurIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotifyReporterID", DbType="Int")]
		public System.Nullable<int> NotifyReporterID
		{
			get
			{
				return this._NotifyReporterID;
			}
			set
			{
				if ((this._NotifyReporterID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNotifyReporterIDChanging(value);
					this.SendPropertyChanging();
					this._NotifyReporterID = value;
					this.SendPropertyChanged("NotifyReporterID");
					this.OnNotifyReporterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Link", DbType="NVarChar(500)")]
		public string Link
		{
			get
			{
				return this._Link;
			}
			set
			{
				if ((this._Link != value))
				{
					this.OnLinkChanging(value);
					this.SendPropertyChanging();
					this._Link = value;
					this.SendPropertyChanged("Link");
					this.OnLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacebookLink", DbType="NVarChar(500)")]
		public string FacebookLink
		{
			get
			{
				return this._FacebookLink;
			}
			set
			{
				if ((this._FacebookLink != value))
				{
					this.OnFacebookLinkChanging(value);
					this.SendPropertyChanging();
					this._FacebookLink = value;
					this.SendPropertyChanged("FacebookLink");
					this.OnFacebookLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Report_Notify", Storage="_Notifies", ThisKey="ID", OtherKey="ReportID")]
		public EntitySet<Notify> Notifies
		{
			get
			{
				return this._Notifies;
			}
			set
			{
				this._Notifies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Report_ReportAnswer", Storage="_ReportAnswers", ThisKey="ID", OtherKey="ReportID")]
		public EntitySet<ReportAnswer> ReportAnswers
		{
			get
			{
				return this._ReportAnswers;
			}
			set
			{
				this._ReportAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Report_ReportComment", Storage="_ReportComments", ThisKey="ID", OtherKey="ReportID")]
		public EntitySet<ReportComment> ReportComments
		{
			get
			{
				return this._ReportComments;
			}
			set
			{
				this._ReportComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Report_ReportPhoto", Storage="_ReportPhotos", ThisKey="ID", OtherKey="ReportID")]
		public EntitySet<ReportPhoto> ReportPhotos
		{
			get
			{
				return this._ReportPhotos;
			}
			set
			{
				this._ReportPhotos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Report_RuleReport", Storage="_RuleReports", ThisKey="ID", OtherKey="ReportID")]
		public EntitySet<RuleReport> RuleReports
		{
			get
			{
				return this._RuleReports;
			}
			set
			{
				this._RuleReports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bus_Report", Storage="_Bus", ThisKey="BusID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Bus Bus
		{
			get
			{
				return this._Bus.Entity;
			}
			set
			{
				Bus previousValue = this._Bus.Entity;
				if (((previousValue != value) 
							|| (this._Bus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bus.Entity = null;
						previousValue.Reports.Remove(this);
					}
					this._Bus.Entity = value;
					if ((value != null))
					{
						value.Reports.Add(this);
						this._BusID = value.ID;
					}
					else
					{
						this._BusID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Bus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Route_Report", Storage="_Route", ThisKey="RouteID", OtherKey="ID", IsForeignKey=true)]
		public Route Route
		{
			get
			{
				return this._Route.Entity;
			}
			set
			{
				Route previousValue = this._Route.Entity;
				if (((previousValue != value) 
							|| (this._Route.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Route.Entity = null;
						previousValue.Reports.Remove(this);
					}
					this._Route.Entity = value;
					if ((value != null))
					{
						value.Reports.Add(this);
						this._RouteID = value.ID;
					}
					else
					{
						this._RouteID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Route");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Station_Report", Storage="_Station", ThisKey="StationID", OtherKey="ID", IsForeignKey=true)]
		public Station Station
		{
			get
			{
				return this._Station.Entity;
			}
			set
			{
				Station previousValue = this._Station.Entity;
				if (((previousValue != value) 
							|| (this._Station.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Station.Entity = null;
						previousValue.Reports.Remove(this);
					}
					this._Station.Entity = value;
					if ((value != null))
					{
						value.Reports.Add(this);
						this._StationID = value.ID;
					}
					else
					{
						this._StationID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Station");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Transporteur_Report", Storage="_Transporteur", ThisKey="NotifyTransporteurID", OtherKey="ID", IsForeignKey=true)]
		public Transporteur Transporteur
		{
			get
			{
				return this._Transporteur.Entity;
			}
			set
			{
				Transporteur previousValue = this._Transporteur.Entity;
				if (((previousValue != value) 
							|| (this._Transporteur.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Transporteur.Entity = null;
						previousValue.Reports.Remove(this);
					}
					this._Transporteur.Entity = value;
					if ((value != null))
					{
						value.Reports.Add(this);
						this._NotifyTransporteurID = value.ID;
					}
					else
					{
						this._NotifyTransporteurID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Transporteur");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Report", Storage="_User", ThisKey="NotifyReporterID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Reports.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Reports.Add(this);
						this._NotifyReporterID = value.ID;
					}
					else
					{
						this._NotifyReporterID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Report1", Storage="_User1", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.Reports1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.Reports1.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Notifies(Notify entity)
		{
			this.SendPropertyChanging();
			entity.Report = this;
		}
		
		private void detach_Notifies(Notify entity)
		{
			this.SendPropertyChanging();
			entity.Report = null;
		}
		
		private void attach_ReportAnswers(ReportAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Report = this;
		}
		
		private void detach_ReportAnswers(ReportAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Report = null;
		}
		
		private void attach_ReportComments(ReportComment entity)
		{
			this.SendPropertyChanging();
			entity.Report = this;
		}
		
		private void detach_ReportComments(ReportComment entity)
		{
			this.SendPropertyChanging();
			entity.Report = null;
		}
		
		private void attach_ReportPhotos(ReportPhoto entity)
		{
			this.SendPropertyChanging();
			entity.Report = this;
		}
		
		private void detach_ReportPhotos(ReportPhoto entity)
		{
			this.SendPropertyChanging();
			entity.Report = null;
		}
		
		private void attach_RuleReports(RuleReport entity)
		{
			this.SendPropertyChanging();
			entity.Report = this;
		}
		
		private void detach_RuleReports(RuleReport entity)
		{
			this.SendPropertyChanging();
			entity.Report = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReportAnswer")]
	public partial class ReportAnswer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _TransporteurID;
		
		private int _ReportID;
		
		private System.DateTime _AddedDate;
		
		private string _Answer;
		
		private EntityRef<Report> _Report;
		
		private EntityRef<Transporteur> _Transporteur;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTransporteurIDChanging(int value);
    partial void OnTransporteurIDChanged();
    partial void OnReportIDChanging(int value);
    partial void OnReportIDChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnAnswerChanging(string value);
    partial void OnAnswerChanged();
    #endregion
		
		public ReportAnswer()
		{
			this._Report = default(EntityRef<Report>);
			this._Transporteur = default(EntityRef<Transporteur>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransporteurID", DbType="Int NOT NULL")]
		public int TransporteurID
		{
			get
			{
				return this._TransporteurID;
			}
			set
			{
				if ((this._TransporteurID != value))
				{
					if (this._Transporteur.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransporteurIDChanging(value);
					this.SendPropertyChanging();
					this._TransporteurID = value;
					this.SendPropertyChanged("TransporteurID");
					this.OnTransporteurIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportID", DbType="Int NOT NULL")]
		public int ReportID
		{
			get
			{
				return this._ReportID;
			}
			set
			{
				if ((this._ReportID != value))
				{
					if (this._Report.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportIDChanging(value);
					this.SendPropertyChanging();
					this._ReportID = value;
					this.SendPropertyChanged("ReportID");
					this.OnReportIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Answer", DbType="NVarChar(MAX)")]
		public string Answer
		{
			get
			{
				return this._Answer;
			}
			set
			{
				if ((this._Answer != value))
				{
					this.OnAnswerChanging(value);
					this.SendPropertyChanging();
					this._Answer = value;
					this.SendPropertyChanged("Answer");
					this.OnAnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Report_ReportAnswer", Storage="_Report", ThisKey="ReportID", OtherKey="ID", IsForeignKey=true)]
		public Report Report
		{
			get
			{
				return this._Report.Entity;
			}
			set
			{
				Report previousValue = this._Report.Entity;
				if (((previousValue != value) 
							|| (this._Report.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Report.Entity = null;
						previousValue.ReportAnswers.Remove(this);
					}
					this._Report.Entity = value;
					if ((value != null))
					{
						value.ReportAnswers.Add(this);
						this._ReportID = value.ID;
					}
					else
					{
						this._ReportID = default(int);
					}
					this.SendPropertyChanged("Report");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Transporteur_ReportAnswer", Storage="_Transporteur", ThisKey="TransporteurID", OtherKey="ID", IsForeignKey=true)]
		public Transporteur Transporteur
		{
			get
			{
				return this._Transporteur.Entity;
			}
			set
			{
				Transporteur previousValue = this._Transporteur.Entity;
				if (((previousValue != value) 
							|| (this._Transporteur.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Transporteur.Entity = null;
						previousValue.ReportAnswers.Remove(this);
					}
					this._Transporteur.Entity = value;
					if ((value != null))
					{
						value.ReportAnswers.Add(this);
						this._TransporteurID = value.ID;
					}
					else
					{
						this._TransporteurID = default(int);
					}
					this.SendPropertyChanged("Transporteur");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReportComment")]
	public partial class ReportComment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ReportID;
		
		private int _CommentID;
		
		private EntityRef<Comment> _Comment;
		
		private EntityRef<Report> _Report;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnReportIDChanging(int value);
    partial void OnReportIDChanged();
    partial void OnCommentIDChanging(int value);
    partial void OnCommentIDChanged();
    #endregion
		
		public ReportComment()
		{
			this._Comment = default(EntityRef<Comment>);
			this._Report = default(EntityRef<Report>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportID", DbType="Int NOT NULL")]
		public int ReportID
		{
			get
			{
				return this._ReportID;
			}
			set
			{
				if ((this._ReportID != value))
				{
					if (this._Report.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportIDChanging(value);
					this.SendPropertyChanging();
					this._ReportID = value;
					this.SendPropertyChanged("ReportID");
					this.OnReportIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentID", DbType="Int NOT NULL")]
		public int CommentID
		{
			get
			{
				return this._CommentID;
			}
			set
			{
				if ((this._CommentID != value))
				{
					if (this._Comment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommentIDChanging(value);
					this.SendPropertyChanging();
					this._CommentID = value;
					this.SendPropertyChanged("CommentID");
					this.OnCommentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_ReportComment", Storage="_Comment", ThisKey="CommentID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Comment Comment
		{
			get
			{
				return this._Comment.Entity;
			}
			set
			{
				Comment previousValue = this._Comment.Entity;
				if (((previousValue != value) 
							|| (this._Comment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Comment.Entity = null;
						previousValue.ReportComments.Remove(this);
					}
					this._Comment.Entity = value;
					if ((value != null))
					{
						value.ReportComments.Add(this);
						this._CommentID = value.ID;
					}
					else
					{
						this._CommentID = default(int);
					}
					this.SendPropertyChanged("Comment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Report_ReportComment", Storage="_Report", ThisKey="ReportID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Report Report
		{
			get
			{
				return this._Report.Entity;
			}
			set
			{
				Report previousValue = this._Report.Entity;
				if (((previousValue != value) 
							|| (this._Report.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Report.Entity = null;
						previousValue.ReportComments.Remove(this);
					}
					this._Report.Entity = value;
					if ((value != null))
					{
						value.ReportComments.Add(this);
						this._ReportID = value.ID;
					}
					else
					{
						this._ReportID = default(int);
					}
					this.SendPropertyChanged("Report");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReportPhoto")]
	public partial class ReportPhoto : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _ReportID;
		
		private string _ImagePath;
		
		private EntityRef<Report> _Report;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnReportIDChanging(System.Nullable<int> value);
    partial void OnReportIDChanged();
    partial void OnImagePathChanging(string value);
    partial void OnImagePathChanged();
    #endregion
		
		public ReportPhoto()
		{
			this._Report = default(EntityRef<Report>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportID", DbType="Int")]
		public System.Nullable<int> ReportID
		{
			get
			{
				return this._ReportID;
			}
			set
			{
				if ((this._ReportID != value))
				{
					if (this._Report.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportIDChanging(value);
					this.SendPropertyChanging();
					this._ReportID = value;
					this.SendPropertyChanged("ReportID");
					this.OnReportIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImagePath", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string ImagePath
		{
			get
			{
				return this._ImagePath;
			}
			set
			{
				if ((this._ImagePath != value))
				{
					this.OnImagePathChanging(value);
					this.SendPropertyChanging();
					this._ImagePath = value;
					this.SendPropertyChanged("ImagePath");
					this.OnImagePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Report_ReportPhoto", Storage="_Report", ThisKey="ReportID", OtherKey="ID", IsForeignKey=true)]
		public Report Report
		{
			get
			{
				return this._Report.Entity;
			}
			set
			{
				Report previousValue = this._Report.Entity;
				if (((previousValue != value) 
							|| (this._Report.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Report.Entity = null;
						previousValue.ReportPhotos.Remove(this);
					}
					this._Report.Entity = value;
					if ((value != null))
					{
						value.ReportPhotos.Add(this);
						this._ReportID = value.ID;
					}
					else
					{
						this._ReportID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Report");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Code;
		
		private string _Name;
		
		private EntitySet<UserRole> _UserRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Role()
		{
			this._UserRoles = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRoles), new Action<UserRole>(this.detach_UserRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserRole", Storage="_UserRoles", ThisKey="ID", OtherKey="RoleID")]
		public EntitySet<UserRole> UserRoles
		{
			get
			{
				return this._UserRoles;
			}
			set
			{
				this._UserRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Route")]
	public partial class Route : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private double _Length;
		
		private EntitySet<Bus> _Bus;
		
		private EntitySet<Report> _Reports;
		
		private EntitySet<RouteSection> _RouteSections;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLengthChanging(double value);
    partial void OnLengthChanged();
    #endregion
		
		public Route()
		{
			this._Bus = new EntitySet<Bus>(new Action<Bus>(this.attach_Bus), new Action<Bus>(this.detach_Bus));
			this._Reports = new EntitySet<Report>(new Action<Report>(this.attach_Reports), new Action<Report>(this.detach_Reports));
			this._RouteSections = new EntitySet<RouteSection>(new Action<RouteSection>(this.attach_RouteSections), new Action<RouteSection>(this.detach_RouteSections));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Length", DbType="Float NOT NULL")]
		public double Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Route_Bus", Storage="_Bus", ThisKey="ID", OtherKey="RouteID")]
		public EntitySet<Bus> Bus
		{
			get
			{
				return this._Bus;
			}
			set
			{
				this._Bus.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Route_Report", Storage="_Reports", ThisKey="ID", OtherKey="RouteID")]
		public EntitySet<Report> Reports
		{
			get
			{
				return this._Reports;
			}
			set
			{
				this._Reports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Route_RouteSection", Storage="_RouteSections", ThisKey="ID", OtherKey="RouteID")]
		public EntitySet<RouteSection> RouteSections
		{
			get
			{
				return this._RouteSections;
			}
			set
			{
				this._RouteSections.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bus(Bus entity)
		{
			this.SendPropertyChanging();
			entity.Route = this;
		}
		
		private void detach_Bus(Bus entity)
		{
			this.SendPropertyChanging();
			entity.Route = null;
		}
		
		private void attach_Reports(Report entity)
		{
			this.SendPropertyChanging();
			entity.Route = this;
		}
		
		private void detach_Reports(Report entity)
		{
			this.SendPropertyChanging();
			entity.Route = null;
		}
		
		private void attach_RouteSections(RouteSection entity)
		{
			this.SendPropertyChanging();
			entity.Route = this;
		}
		
		private void detach_RouteSections(RouteSection entity)
		{
			this.SendPropertyChanging();
			entity.Route = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RouteSection")]
	public partial class RouteSection : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _RouteID;
		
		private int _StationID;
		
		private int _NextStationID;
		
		private EntityRef<Route> _Route;
		
		private EntityRef<Station> _Station;
		
		private EntityRef<Station> _Station1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnRouteIDChanging(int value);
    partial void OnRouteIDChanged();
    partial void OnStationIDChanging(int value);
    partial void OnStationIDChanged();
    partial void OnNextStationIDChanging(int value);
    partial void OnNextStationIDChanged();
    #endregion
		
		public RouteSection()
		{
			this._Route = default(EntityRef<Route>);
			this._Station = default(EntityRef<Station>);
			this._Station1 = default(EntityRef<Station>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RouteID", DbType="Int NOT NULL")]
		public int RouteID
		{
			get
			{
				return this._RouteID;
			}
			set
			{
				if ((this._RouteID != value))
				{
					if (this._Route.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRouteIDChanging(value);
					this.SendPropertyChanging();
					this._RouteID = value;
					this.SendPropertyChanged("RouteID");
					this.OnRouteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StationID", DbType="Int NOT NULL")]
		public int StationID
		{
			get
			{
				return this._StationID;
			}
			set
			{
				if ((this._StationID != value))
				{
					if (this._Station1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStationIDChanging(value);
					this.SendPropertyChanging();
					this._StationID = value;
					this.SendPropertyChanged("StationID");
					this.OnStationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NextStationID", DbType="Int NOT NULL")]
		public int NextStationID
		{
			get
			{
				return this._NextStationID;
			}
			set
			{
				if ((this._NextStationID != value))
				{
					if (this._Station.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNextStationIDChanging(value);
					this.SendPropertyChanging();
					this._NextStationID = value;
					this.SendPropertyChanged("NextStationID");
					this.OnNextStationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Route_RouteSection", Storage="_Route", ThisKey="RouteID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Route Route
		{
			get
			{
				return this._Route.Entity;
			}
			set
			{
				Route previousValue = this._Route.Entity;
				if (((previousValue != value) 
							|| (this._Route.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Route.Entity = null;
						previousValue.RouteSections.Remove(this);
					}
					this._Route.Entity = value;
					if ((value != null))
					{
						value.RouteSections.Add(this);
						this._RouteID = value.ID;
					}
					else
					{
						this._RouteID = default(int);
					}
					this.SendPropertyChanged("Route");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Station_RouteSection", Storage="_Station", ThisKey="NextStationID", OtherKey="ID", IsForeignKey=true)]
		public Station Station
		{
			get
			{
				return this._Station.Entity;
			}
			set
			{
				Station previousValue = this._Station.Entity;
				if (((previousValue != value) 
							|| (this._Station.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Station.Entity = null;
						previousValue.RouteSections.Remove(this);
					}
					this._Station.Entity = value;
					if ((value != null))
					{
						value.RouteSections.Add(this);
						this._NextStationID = value.ID;
					}
					else
					{
						this._NextStationID = default(int);
					}
					this.SendPropertyChanged("Station");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Station_RouteSection1", Storage="_Station1", ThisKey="StationID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Station Station1
		{
			get
			{
				return this._Station1.Entity;
			}
			set
			{
				Station previousValue = this._Station1.Entity;
				if (((previousValue != value) 
							|| (this._Station1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Station1.Entity = null;
						previousValue.RouteSections1.Remove(this);
					}
					this._Station1.Entity = value;
					if ((value != null))
					{
						value.RouteSections1.Add(this);
						this._StationID = value.ID;
					}
					else
					{
						this._StationID = default(int);
					}
					this.SendPropertyChanged("Station1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Rule]")]
	public partial class Rule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _FundamentalRuleID;
		
		private int _ТуреOfRule;
		
		private bool _IsRouteScope;
		
		private string _Name;
		
		private string _Description;
		
		private string _UrlToLaw;
		
		private EntitySet<RuleReport> _RuleReports;
		
		private EntityRef<FundamentalRule> _FundamentalRule;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFundamentalRuleIDChanging(System.Nullable<int> value);
    partial void OnFundamentalRuleIDChanged();
    partial void OnТуреOfRuleChanging(int value);
    partial void OnТуреOfRuleChanged();
    partial void OnIsRouteScopeChanging(bool value);
    partial void OnIsRouteScopeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnUrlToLawChanging(string value);
    partial void OnUrlToLawChanged();
    #endregion
		
		public Rule()
		{
			this._RuleReports = new EntitySet<RuleReport>(new Action<RuleReport>(this.attach_RuleReports), new Action<RuleReport>(this.detach_RuleReports));
			this._FundamentalRule = default(EntityRef<FundamentalRule>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FundamentalRuleID", DbType="Int")]
		public System.Nullable<int> FundamentalRuleID
		{
			get
			{
				return this._FundamentalRuleID;
			}
			set
			{
				if ((this._FundamentalRuleID != value))
				{
					if (this._FundamentalRule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFundamentalRuleIDChanging(value);
					this.SendPropertyChanging();
					this._FundamentalRuleID = value;
					this.SendPropertyChanged("FundamentalRuleID");
					this.OnFundamentalRuleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ТуреOfRule", DbType="Int NOT NULL")]
		public int ТуреOfRule
		{
			get
			{
				return this._ТуреOfRule;
			}
			set
			{
				if ((this._ТуреOfRule != value))
				{
					this.OnТуреOfRuleChanging(value);
					this.SendPropertyChanging();
					this._ТуреOfRule = value;
					this.SendPropertyChanged("ТуреOfRule");
					this.OnТуреOfRuleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRouteScope", DbType="Bit NOT NULL")]
		public bool IsRouteScope
		{
			get
			{
				return this._IsRouteScope;
			}
			set
			{
				if ((this._IsRouteScope != value))
				{
					this.OnIsRouteScopeChanging(value);
					this.SendPropertyChanging();
					this._IsRouteScope = value;
					this.SendPropertyChanged("IsRouteScope");
					this.OnIsRouteScopeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UrlToLaw", DbType="NVarChar(500)")]
		public string UrlToLaw
		{
			get
			{
				return this._UrlToLaw;
			}
			set
			{
				if ((this._UrlToLaw != value))
				{
					this.OnUrlToLawChanging(value);
					this.SendPropertyChanging();
					this._UrlToLaw = value;
					this.SendPropertyChanged("UrlToLaw");
					this.OnUrlToLawChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rule_RuleReport", Storage="_RuleReports", ThisKey="ID", OtherKey="RuleID")]
		public EntitySet<RuleReport> RuleReports
		{
			get
			{
				return this._RuleReports;
			}
			set
			{
				this._RuleReports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FundamentalRule_Rule", Storage="_FundamentalRule", ThisKey="FundamentalRuleID", OtherKey="ID", IsForeignKey=true)]
		public FundamentalRule FundamentalRule
		{
			get
			{
				return this._FundamentalRule.Entity;
			}
			set
			{
				FundamentalRule previousValue = this._FundamentalRule.Entity;
				if (((previousValue != value) 
							|| (this._FundamentalRule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FundamentalRule.Entity = null;
						previousValue.Rules.Remove(this);
					}
					this._FundamentalRule.Entity = value;
					if ((value != null))
					{
						value.Rules.Add(this);
						this._FundamentalRuleID = value.ID;
					}
					else
					{
						this._FundamentalRuleID = default(Nullable<int>);
					}
					this.SendPropertyChanged("FundamentalRule");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RuleReports(RuleReport entity)
		{
			this.SendPropertyChanging();
			entity.Rule = this;
		}
		
		private void detach_RuleReports(RuleReport entity)
		{
			this.SendPropertyChanging();
			entity.Rule = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RuleReport")]
	public partial class RuleReport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _RuleID;
		
		private int _ReportID;
		
		private EntityRef<Report> _Report;
		
		private EntityRef<Rule> _Rule;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnRuleIDChanging(int value);
    partial void OnRuleIDChanged();
    partial void OnReportIDChanging(int value);
    partial void OnReportIDChanged();
    #endregion
		
		public RuleReport()
		{
			this._Report = default(EntityRef<Report>);
			this._Rule = default(EntityRef<Rule>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RuleID", DbType="Int NOT NULL")]
		public int RuleID
		{
			get
			{
				return this._RuleID;
			}
			set
			{
				if ((this._RuleID != value))
				{
					if (this._Rule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRuleIDChanging(value);
					this.SendPropertyChanging();
					this._RuleID = value;
					this.SendPropertyChanged("RuleID");
					this.OnRuleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportID", DbType="Int NOT NULL")]
		public int ReportID
		{
			get
			{
				return this._ReportID;
			}
			set
			{
				if ((this._ReportID != value))
				{
					if (this._Report.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportIDChanging(value);
					this.SendPropertyChanging();
					this._ReportID = value;
					this.SendPropertyChanged("ReportID");
					this.OnReportIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Report_RuleReport", Storage="_Report", ThisKey="ReportID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Report Report
		{
			get
			{
				return this._Report.Entity;
			}
			set
			{
				Report previousValue = this._Report.Entity;
				if (((previousValue != value) 
							|| (this._Report.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Report.Entity = null;
						previousValue.RuleReports.Remove(this);
					}
					this._Report.Entity = value;
					if ((value != null))
					{
						value.RuleReports.Add(this);
						this._ReportID = value.ID;
					}
					else
					{
						this._ReportID = default(int);
					}
					this.SendPropertyChanged("Report");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rule_RuleReport", Storage="_Rule", ThisKey="RuleID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Rule Rule
		{
			get
			{
				return this._Rule.Entity;
			}
			set
			{
				Rule previousValue = this._Rule.Entity;
				if (((previousValue != value) 
							|| (this._Rule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rule.Entity = null;
						previousValue.RuleReports.Remove(this);
					}
					this._Rule.Entity = value;
					if ((value != null))
					{
						value.RuleReports.Add(this);
						this._RuleID = value.ID;
					}
					else
					{
						this._RuleID = default(int);
					}
					this.SendPropertyChanged("Rule");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Social")]
	public partial class Social : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private string _Identified;
		
		private int _Provider;
		
		private string _UserInfo;
		
		private string _JsonResource;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnIdentifiedChanging(string value);
    partial void OnIdentifiedChanged();
    partial void OnProviderChanging(int value);
    partial void OnProviderChanged();
    partial void OnUserInfoChanging(string value);
    partial void OnUserInfoChanged();
    partial void OnJsonResourceChanging(string value);
    partial void OnJsonResourceChanged();
    #endregion
		
		public Social()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Identified", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Identified
		{
			get
			{
				return this._Identified;
			}
			set
			{
				if ((this._Identified != value))
				{
					this.OnIdentifiedChanging(value);
					this.SendPropertyChanging();
					this._Identified = value;
					this.SendPropertyChanged("Identified");
					this.OnIdentifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Provider", DbType="Int NOT NULL")]
		public int Provider
		{
			get
			{
				return this._Provider;
			}
			set
			{
				if ((this._Provider != value))
				{
					this.OnProviderChanging(value);
					this.SendPropertyChanging();
					this._Provider = value;
					this.SendPropertyChanged("Provider");
					this.OnProviderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserInfo", DbType="NVarChar(MAX)")]
		public string UserInfo
		{
			get
			{
				return this._UserInfo;
			}
			set
			{
				if ((this._UserInfo != value))
				{
					this.OnUserInfoChanging(value);
					this.SendPropertyChanging();
					this._UserInfo = value;
					this.SendPropertyChanged("UserInfo");
					this.OnUserInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JsonResource", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string JsonResource
		{
			get
			{
				return this._JsonResource;
			}
			set
			{
				if ((this._JsonResource != value))
				{
					this.OnJsonResourceChanging(value);
					this.SendPropertyChanging();
					this._JsonResource = value;
					this.SendPropertyChanged("JsonResource");
					this.OnJsonResourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Social", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Socials.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Socials.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Station")]
	public partial class Station : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private double _Lat;
		
		private double _Lng;
		
		private bool _IsEndStation;
		
		private bool _HasPocket;
		
		private bool _HasNewTimetable;
		
		private EntitySet<Report> _Reports;
		
		private EntitySet<RouteSection> _RouteSections;
		
		private EntitySet<RouteSection> _RouteSections1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLatChanging(double value);
    partial void OnLatChanged();
    partial void OnLngChanging(double value);
    partial void OnLngChanged();
    partial void OnIsEndStationChanging(bool value);
    partial void OnIsEndStationChanged();
    partial void OnHasPocketChanging(bool value);
    partial void OnHasPocketChanged();
    partial void OnHasNewTimetableChanging(bool value);
    partial void OnHasNewTimetableChanged();
    #endregion
		
		public Station()
		{
			this._Reports = new EntitySet<Report>(new Action<Report>(this.attach_Reports), new Action<Report>(this.detach_Reports));
			this._RouteSections = new EntitySet<RouteSection>(new Action<RouteSection>(this.attach_RouteSections), new Action<RouteSection>(this.detach_RouteSections));
			this._RouteSections1 = new EntitySet<RouteSection>(new Action<RouteSection>(this.attach_RouteSections1), new Action<RouteSection>(this.detach_RouteSections1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lat", DbType="Float NOT NULL")]
		public double Lat
		{
			get
			{
				return this._Lat;
			}
			set
			{
				if ((this._Lat != value))
				{
					this.OnLatChanging(value);
					this.SendPropertyChanging();
					this._Lat = value;
					this.SendPropertyChanged("Lat");
					this.OnLatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lng", DbType="Float NOT NULL")]
		public double Lng
		{
			get
			{
				return this._Lng;
			}
			set
			{
				if ((this._Lng != value))
				{
					this.OnLngChanging(value);
					this.SendPropertyChanging();
					this._Lng = value;
					this.SendPropertyChanged("Lng");
					this.OnLngChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsEndStation", DbType="Bit NOT NULL")]
		public bool IsEndStation
		{
			get
			{
				return this._IsEndStation;
			}
			set
			{
				if ((this._IsEndStation != value))
				{
					this.OnIsEndStationChanging(value);
					this.SendPropertyChanging();
					this._IsEndStation = value;
					this.SendPropertyChanged("IsEndStation");
					this.OnIsEndStationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasPocket", DbType="Bit NOT NULL")]
		public bool HasPocket
		{
			get
			{
				return this._HasPocket;
			}
			set
			{
				if ((this._HasPocket != value))
				{
					this.OnHasPocketChanging(value);
					this.SendPropertyChanging();
					this._HasPocket = value;
					this.SendPropertyChanged("HasPocket");
					this.OnHasPocketChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasNewTimetable", DbType="Bit NOT NULL")]
		public bool HasNewTimetable
		{
			get
			{
				return this._HasNewTimetable;
			}
			set
			{
				if ((this._HasNewTimetable != value))
				{
					this.OnHasNewTimetableChanging(value);
					this.SendPropertyChanging();
					this._HasNewTimetable = value;
					this.SendPropertyChanged("HasNewTimetable");
					this.OnHasNewTimetableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Station_Report", Storage="_Reports", ThisKey="ID", OtherKey="StationID")]
		public EntitySet<Report> Reports
		{
			get
			{
				return this._Reports;
			}
			set
			{
				this._Reports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Station_RouteSection", Storage="_RouteSections", ThisKey="ID", OtherKey="NextStationID")]
		public EntitySet<RouteSection> RouteSections
		{
			get
			{
				return this._RouteSections;
			}
			set
			{
				this._RouteSections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Station_RouteSection1", Storage="_RouteSections1", ThisKey="ID", OtherKey="StationID")]
		public EntitySet<RouteSection> RouteSections1
		{
			get
			{
				return this._RouteSections1;
			}
			set
			{
				this._RouteSections1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Reports(Report entity)
		{
			this.SendPropertyChanging();
			entity.Station = this;
		}
		
		private void detach_Reports(Report entity)
		{
			this.SendPropertyChanging();
			entity.Station = null;
		}
		
		private void attach_RouteSections(RouteSection entity)
		{
			this.SendPropertyChanging();
			entity.Station = this;
		}
		
		private void detach_RouteSections(RouteSection entity)
		{
			this.SendPropertyChanging();
			entity.Station = null;
		}
		
		private void attach_RouteSections1(RouteSection entity)
		{
			this.SendPropertyChanging();
			entity.Station1 = this;
		}
		
		private void detach_RouteSections1(RouteSection entity)
		{
			this.SendPropertyChanging();
			entity.Station1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Transporteur")]
	public partial class Transporteur : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _UserID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Patronymic;
		
		private string _Email;
		
		private string _PrimaryPhone;
		
		private string _AdditionalPhone;
		
		private EntitySet<Bus> _Bus;
		
		private EntitySet<Report> _Reports;
		
		private EntitySet<ReportAnswer> _ReportAnswers;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnPatronymicChanging(string value);
    partial void OnPatronymicChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPrimaryPhoneChanging(string value);
    partial void OnPrimaryPhoneChanged();
    partial void OnAdditionalPhoneChanging(string value);
    partial void OnAdditionalPhoneChanged();
    #endregion
		
		public Transporteur()
		{
			this._Bus = new EntitySet<Bus>(new Action<Bus>(this.attach_Bus), new Action<Bus>(this.detach_Bus));
			this._Reports = new EntitySet<Report>(new Action<Report>(this.attach_Reports), new Action<Report>(this.detach_Reports));
			this._ReportAnswers = new EntitySet<ReportAnswer>(new Action<ReportAnswer>(this.attach_ReportAnswers), new Action<ReportAnswer>(this.detach_ReportAnswers));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patronymic", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Patronymic
		{
			get
			{
				return this._Patronymic;
			}
			set
			{
				if ((this._Patronymic != value))
				{
					this.OnPatronymicChanging(value);
					this.SendPropertyChanging();
					this._Patronymic = value;
					this.SendPropertyChanged("Patronymic");
					this.OnPatronymicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrimaryPhone", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PrimaryPhone
		{
			get
			{
				return this._PrimaryPhone;
			}
			set
			{
				if ((this._PrimaryPhone != value))
				{
					this.OnPrimaryPhoneChanging(value);
					this.SendPropertyChanging();
					this._PrimaryPhone = value;
					this.SendPropertyChanged("PrimaryPhone");
					this.OnPrimaryPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdditionalPhone", DbType="NVarChar(50)")]
		public string AdditionalPhone
		{
			get
			{
				return this._AdditionalPhone;
			}
			set
			{
				if ((this._AdditionalPhone != value))
				{
					this.OnAdditionalPhoneChanging(value);
					this.SendPropertyChanging();
					this._AdditionalPhone = value;
					this.SendPropertyChanged("AdditionalPhone");
					this.OnAdditionalPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Transporteur_Bus", Storage="_Bus", ThisKey="ID", OtherKey="TransporteurID")]
		public EntitySet<Bus> Bus
		{
			get
			{
				return this._Bus;
			}
			set
			{
				this._Bus.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Transporteur_Report", Storage="_Reports", ThisKey="ID", OtherKey="NotifyTransporteurID")]
		public EntitySet<Report> Reports
		{
			get
			{
				return this._Reports;
			}
			set
			{
				this._Reports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Transporteur_ReportAnswer", Storage="_ReportAnswers", ThisKey="ID", OtherKey="TransporteurID")]
		public EntitySet<ReportAnswer> ReportAnswers
		{
			get
			{
				return this._ReportAnswers;
			}
			set
			{
				this._ReportAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Transporteur", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteRule="SET NULL")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Transporteurs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Transporteurs.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bus(Bus entity)
		{
			this.SendPropertyChanging();
			entity.Transporteur = this;
		}
		
		private void detach_Bus(Bus entity)
		{
			this.SendPropertyChanging();
			entity.Transporteur = null;
		}
		
		private void attach_Reports(Report entity)
		{
			this.SendPropertyChanging();
			entity.Transporteur = this;
		}
		
		private void detach_Reports(Report entity)
		{
			this.SendPropertyChanging();
			entity.Transporteur = null;
		}
		
		private void attach_ReportAnswers(ReportAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Transporteur = this;
		}
		
		private void detach_ReportAnswers(ReportAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Transporteur = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CityID;
		
		private string _Login;
		
		private string _Mobile;
		
		private string _Email;
		
		private string _Password;
		
		private System.DateTime _AddedDate;
		
		private System.DateTime _LastVisitDate;
		
		private string _AvatarPath;
		
		private string _FirstName;
		
		private string _LastName;
		
		private EntitySet<AccessibleDirection> _AccessibleDirections;
		
		private EntitySet<AccessibleObject> _AccessibleObjects;
		
		private EntitySet<AccessiblePlace> _AccessiblePlaces;
		
		private EntitySet<BicycleParking> _BicycleParkings;
		
		private EntitySet<BicycleParkingVote> _BicycleParkingVotes;
		
		private EntitySet<BycicleDirection> _BycicleDirections;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<Goal> _Goals;
		
		private EntitySet<Report> _Reports;
		
		private EntitySet<Report> _Reports1;
		
		private EntitySet<Social> _Socials;
		
		private EntitySet<Transporteur> _Transporteurs;
		
		private EntitySet<UserRole> _UserRoles;
		
		private EntitySet<UtilityIssue> _UtilityIssues;
		
		private EntitySet<UtilityIssueHistory> _UtilityIssueHistories;
		
		private EntitySet<UtilityPhoto> _UtilityPhotos;
		
		private EntitySet<VisualizationUser> _VisualizationUsers;
		
		private EntitySet<Visualization> _Visualizations;
		
		private EntityRef<City> _City;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCityIDChanging(int value);
    partial void OnCityIDChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnMobileChanging(string value);
    partial void OnMobileChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnLastVisitDateChanging(System.DateTime value);
    partial void OnLastVisitDateChanged();
    partial void OnAvatarPathChanging(string value);
    partial void OnAvatarPathChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    #endregion
		
		public User()
		{
			this._AccessibleDirections = new EntitySet<AccessibleDirection>(new Action<AccessibleDirection>(this.attach_AccessibleDirections), new Action<AccessibleDirection>(this.detach_AccessibleDirections));
			this._AccessibleObjects = new EntitySet<AccessibleObject>(new Action<AccessibleObject>(this.attach_AccessibleObjects), new Action<AccessibleObject>(this.detach_AccessibleObjects));
			this._AccessiblePlaces = new EntitySet<AccessiblePlace>(new Action<AccessiblePlace>(this.attach_AccessiblePlaces), new Action<AccessiblePlace>(this.detach_AccessiblePlaces));
			this._BicycleParkings = new EntitySet<BicycleParking>(new Action<BicycleParking>(this.attach_BicycleParkings), new Action<BicycleParking>(this.detach_BicycleParkings));
			this._BicycleParkingVotes = new EntitySet<BicycleParkingVote>(new Action<BicycleParkingVote>(this.attach_BicycleParkingVotes), new Action<BicycleParkingVote>(this.detach_BicycleParkingVotes));
			this._BycicleDirections = new EntitySet<BycicleDirection>(new Action<BycicleDirection>(this.attach_BycicleDirections), new Action<BycicleDirection>(this.detach_BycicleDirections));
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._Goals = new EntitySet<Goal>(new Action<Goal>(this.attach_Goals), new Action<Goal>(this.detach_Goals));
			this._Reports = new EntitySet<Report>(new Action<Report>(this.attach_Reports), new Action<Report>(this.detach_Reports));
			this._Reports1 = new EntitySet<Report>(new Action<Report>(this.attach_Reports1), new Action<Report>(this.detach_Reports1));
			this._Socials = new EntitySet<Social>(new Action<Social>(this.attach_Socials), new Action<Social>(this.detach_Socials));
			this._Transporteurs = new EntitySet<Transporteur>(new Action<Transporteur>(this.attach_Transporteurs), new Action<Transporteur>(this.detach_Transporteurs));
			this._UserRoles = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRoles), new Action<UserRole>(this.detach_UserRoles));
			this._UtilityIssues = new EntitySet<UtilityIssue>(new Action<UtilityIssue>(this.attach_UtilityIssues), new Action<UtilityIssue>(this.detach_UtilityIssues));
			this._UtilityIssueHistories = new EntitySet<UtilityIssueHistory>(new Action<UtilityIssueHistory>(this.attach_UtilityIssueHistories), new Action<UtilityIssueHistory>(this.detach_UtilityIssueHistories));
			this._UtilityPhotos = new EntitySet<UtilityPhoto>(new Action<UtilityPhoto>(this.attach_UtilityPhotos), new Action<UtilityPhoto>(this.detach_UtilityPhotos));
			this._VisualizationUsers = new EntitySet<VisualizationUser>(new Action<VisualizationUser>(this.attach_VisualizationUsers), new Action<VisualizationUser>(this.detach_VisualizationUsers));
			this._Visualizations = new EntitySet<Visualization>(new Action<Visualization>(this.attach_Visualizations), new Action<Visualization>(this.detach_Visualizations));
			this._City = default(EntityRef<City>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="Int NOT NULL")]
		public int CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobile", DbType="NVarChar(150)")]
		public string Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this.OnMobileChanging(value);
					this.SendPropertyChanging();
					this._Mobile = value;
					this.SendPropertyChanged("Mobile");
					this.OnMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(150)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastVisitDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastVisitDate
		{
			get
			{
				return this._LastVisitDate;
			}
			set
			{
				if ((this._LastVisitDate != value))
				{
					this.OnLastVisitDateChanging(value);
					this.SendPropertyChanging();
					this._LastVisitDate = value;
					this.SendPropertyChanged("LastVisitDate");
					this.OnLastVisitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvatarPath", DbType="NVarChar(150)")]
		public string AvatarPath
		{
			get
			{
				return this._AvatarPath;
			}
			set
			{
				if ((this._AvatarPath != value))
				{
					this.OnAvatarPathChanging(value);
					this.SendPropertyChanging();
					this._AvatarPath = value;
					this.SendPropertyChanged("AvatarPath");
					this.OnAvatarPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(500)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(500)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_AccessibleDirection", Storage="_AccessibleDirections", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<AccessibleDirection> AccessibleDirections
		{
			get
			{
				return this._AccessibleDirections;
			}
			set
			{
				this._AccessibleDirections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_AccessibleObject", Storage="_AccessibleObjects", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<AccessibleObject> AccessibleObjects
		{
			get
			{
				return this._AccessibleObjects;
			}
			set
			{
				this._AccessibleObjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_AccessiblePlace", Storage="_AccessiblePlaces", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<AccessiblePlace> AccessiblePlaces
		{
			get
			{
				return this._AccessiblePlaces;
			}
			set
			{
				this._AccessiblePlaces.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_BicycleParking", Storage="_BicycleParkings", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<BicycleParking> BicycleParkings
		{
			get
			{
				return this._BicycleParkings;
			}
			set
			{
				this._BicycleParkings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_BicycleParkingVote", Storage="_BicycleParkingVotes", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<BicycleParkingVote> BicycleParkingVotes
		{
			get
			{
				return this._BicycleParkingVotes;
			}
			set
			{
				this._BicycleParkingVotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_BycicleDirection", Storage="_BycicleDirections", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<BycicleDirection> BycicleDirections
		{
			get
			{
				return this._BycicleDirections;
			}
			set
			{
				this._BycicleDirections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Comment", Storage="_Comments", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Goal", Storage="_Goals", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Goal> Goals
		{
			get
			{
				return this._Goals;
			}
			set
			{
				this._Goals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Report", Storage="_Reports", ThisKey="ID", OtherKey="NotifyReporterID")]
		public EntitySet<Report> Reports
		{
			get
			{
				return this._Reports;
			}
			set
			{
				this._Reports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Report1", Storage="_Reports1", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Report> Reports1
		{
			get
			{
				return this._Reports1;
			}
			set
			{
				this._Reports1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Social", Storage="_Socials", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Social> Socials
		{
			get
			{
				return this._Socials;
			}
			set
			{
				this._Socials.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Transporteur", Storage="_Transporteurs", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Transporteur> Transporteurs
		{
			get
			{
				return this._Transporteurs;
			}
			set
			{
				this._Transporteurs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRole", Storage="_UserRoles", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<UserRole> UserRoles
		{
			get
			{
				return this._UserRoles;
			}
			set
			{
				this._UserRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UtilityIssue", Storage="_UtilityIssues", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<UtilityIssue> UtilityIssues
		{
			get
			{
				return this._UtilityIssues;
			}
			set
			{
				this._UtilityIssues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UtilityIssueHistory", Storage="_UtilityIssueHistories", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<UtilityIssueHistory> UtilityIssueHistories
		{
			get
			{
				return this._UtilityIssueHistories;
			}
			set
			{
				this._UtilityIssueHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UtilityPhoto", Storage="_UtilityPhotos", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<UtilityPhoto> UtilityPhotos
		{
			get
			{
				return this._UtilityPhotos;
			}
			set
			{
				this._UtilityPhotos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_VisualizationUser", Storage="_VisualizationUsers", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<VisualizationUser> VisualizationUsers
		{
			get
			{
				return this._VisualizationUsers;
			}
			set
			{
				this._VisualizationUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Visualization", Storage="_Visualizations", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Visualization> Visualizations
		{
			get
			{
				return this._Visualizations;
			}
			set
			{
				this._Visualizations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_User", Storage="_City", ThisKey="CityID", OtherKey="ID", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._CityID = value.ID;
					}
					else
					{
						this._CityID = default(int);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccessibleDirections(AccessibleDirection entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_AccessibleDirections(AccessibleDirection entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_AccessibleObjects(AccessibleObject entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_AccessibleObjects(AccessibleObject entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_AccessiblePlaces(AccessiblePlace entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_AccessiblePlaces(AccessiblePlace entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_BicycleParkings(BicycleParking entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_BicycleParkings(BicycleParking entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_BicycleParkingVotes(BicycleParkingVote entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_BicycleParkingVotes(BicycleParkingVote entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_BycicleDirections(BycicleDirection entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_BycicleDirections(BycicleDirection entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Goals(Goal entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Goals(Goal entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Reports(Report entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Reports(Report entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Reports1(Report entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_Reports1(Report entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_Socials(Social entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Socials(Social entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Transporteurs(Transporteur entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Transporteurs(Transporteur entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UtilityIssues(UtilityIssue entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UtilityIssues(UtilityIssue entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UtilityIssueHistories(UtilityIssueHistory entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UtilityIssueHistories(UtilityIssueHistory entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UtilityPhotos(UtilityPhoto entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UtilityPhotos(UtilityPhoto entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_VisualizationUsers(VisualizationUser entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_VisualizationUsers(VisualizationUser entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Visualizations(Visualization entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Visualizations(Visualization entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserRole")]
	public partial class UserRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _RoleID;
		
		private int _UserID;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public UserRole()
		{
			this._Role = default(EntityRef<Role>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int NOT NULL")]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserRole", Storage="_Role", ThisKey="RoleID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.UserRoles.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.UserRoles.Add(this);
						this._RoleID = value.ID;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRole", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserRoles.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserRoles.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UtilityDepartment")]
	public partial class UtilityDepartment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CityID;
		
		private string _Name;
		
		private string _Phone;
		
		private string _Address;
		
		private EntitySet<UtilityIssue> _UtilityIssues;
		
		private EntitySet<UtilityIssueHistory> _UtilityIssueHistories;
		
		private EntityRef<City> _City;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCityIDChanging(int value);
    partial void OnCityIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    #endregion
		
		public UtilityDepartment()
		{
			this._UtilityIssues = new EntitySet<UtilityIssue>(new Action<UtilityIssue>(this.attach_UtilityIssues), new Action<UtilityIssue>(this.detach_UtilityIssues));
			this._UtilityIssueHistories = new EntitySet<UtilityIssueHistory>(new Action<UtilityIssueHistory>(this.attach_UtilityIssueHistories), new Action<UtilityIssueHistory>(this.detach_UtilityIssueHistories));
			this._City = default(EntityRef<City>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="Int NOT NULL")]
		public int CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(100)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(MAX)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UtilityDepartment_UtilityIssue", Storage="_UtilityIssues", ThisKey="ID", OtherKey="UtilityDepartmentID")]
		public EntitySet<UtilityIssue> UtilityIssues
		{
			get
			{
				return this._UtilityIssues;
			}
			set
			{
				this._UtilityIssues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UtilityDepartment_UtilityIssueHistory", Storage="_UtilityIssueHistories", ThisKey="ID", OtherKey="UtilityDepartmentID")]
		public EntitySet<UtilityIssueHistory> UtilityIssueHistories
		{
			get
			{
				return this._UtilityIssueHistories;
			}
			set
			{
				this._UtilityIssueHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_UtilityDepartment", Storage="_City", ThisKey="CityID", OtherKey="ID", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.UtilityDepartments.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.UtilityDepartments.Add(this);
						this._CityID = value.ID;
					}
					else
					{
						this._CityID = default(int);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UtilityIssues(UtilityIssue entity)
		{
			this.SendPropertyChanging();
			entity.UtilityDepartment = this;
		}
		
		private void detach_UtilityIssues(UtilityIssue entity)
		{
			this.SendPropertyChanging();
			entity.UtilityDepartment = null;
		}
		
		private void attach_UtilityIssueHistories(UtilityIssueHistory entity)
		{
			this.SendPropertyChanging();
			entity.UtilityDepartment = this;
		}
		
		private void detach_UtilityIssueHistories(UtilityIssueHistory entity)
		{
			this.SendPropertyChanging();
			entity.UtilityDepartment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UtilityIssue")]
	public partial class UtilityIssue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private int _CityID;
		
		private System.DateTime _AddedDate;
		
		private System.Nullable<System.DateTime> _AcceptedDate;
		
		private System.Nullable<System.DateTime> _ResolvedDate;
		
		private System.Nullable<System.DateTime> _ClosedDate;
		
		private System.Nullable<int> _UtilityDepartmentID;
		
		private System.Nullable<int> _MainUtilityIssueID;
		
		private double _Lat;
		
		private double _Lng;
		
		private string _Address;
		
		private string _Description;
		
		private string _WorkFlow;
		
		private string _Solution;
		
		private int _Status;
		
		private bool _IsRemoved;
		
		private EntitySet<UtilityIssue> _UtilityIssues;
		
		private EntitySet<UtilityIssueComment> _UtilityIssueComments;
		
		private EntitySet<UtilityIssueHistory> _UtilityIssueHistories;
		
		private EntitySet<UtilityIssueTag> _UtilityIssueTags;
		
		private EntitySet<UtilityPhoto> _UtilityPhotos;
		
		private EntityRef<City> _City;
		
		private EntityRef<User> _User;
		
		private EntityRef<UtilityDepartment> _UtilityDepartment;
		
		private EntityRef<UtilityIssue> _UtilityIssue1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnCityIDChanging(int value);
    partial void OnCityIDChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnAcceptedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAcceptedDateChanged();
    partial void OnResolvedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnResolvedDateChanged();
    partial void OnClosedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnClosedDateChanged();
    partial void OnUtilityDepartmentIDChanging(System.Nullable<int> value);
    partial void OnUtilityDepartmentIDChanged();
    partial void OnMainUtilityIssueIDChanging(System.Nullable<int> value);
    partial void OnMainUtilityIssueIDChanged();
    partial void OnLatChanging(double value);
    partial void OnLatChanged();
    partial void OnLngChanging(double value);
    partial void OnLngChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnWorkFlowChanging(string value);
    partial void OnWorkFlowChanged();
    partial void OnSolutionChanging(string value);
    partial void OnSolutionChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnIsRemovedChanging(bool value);
    partial void OnIsRemovedChanged();
    #endregion
		
		public UtilityIssue()
		{
			this._UtilityIssues = new EntitySet<UtilityIssue>(new Action<UtilityIssue>(this.attach_UtilityIssues), new Action<UtilityIssue>(this.detach_UtilityIssues));
			this._UtilityIssueComments = new EntitySet<UtilityIssueComment>(new Action<UtilityIssueComment>(this.attach_UtilityIssueComments), new Action<UtilityIssueComment>(this.detach_UtilityIssueComments));
			this._UtilityIssueHistories = new EntitySet<UtilityIssueHistory>(new Action<UtilityIssueHistory>(this.attach_UtilityIssueHistories), new Action<UtilityIssueHistory>(this.detach_UtilityIssueHistories));
			this._UtilityIssueTags = new EntitySet<UtilityIssueTag>(new Action<UtilityIssueTag>(this.attach_UtilityIssueTags), new Action<UtilityIssueTag>(this.detach_UtilityIssueTags));
			this._UtilityPhotos = new EntitySet<UtilityPhoto>(new Action<UtilityPhoto>(this.attach_UtilityPhotos), new Action<UtilityPhoto>(this.detach_UtilityPhotos));
			this._City = default(EntityRef<City>);
			this._User = default(EntityRef<User>);
			this._UtilityDepartment = default(EntityRef<UtilityDepartment>);
			this._UtilityIssue1 = default(EntityRef<UtilityIssue>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="Int NOT NULL")]
		public int CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcceptedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AcceptedDate
		{
			get
			{
				return this._AcceptedDate;
			}
			set
			{
				if ((this._AcceptedDate != value))
				{
					this.OnAcceptedDateChanging(value);
					this.SendPropertyChanging();
					this._AcceptedDate = value;
					this.SendPropertyChanged("AcceptedDate");
					this.OnAcceptedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResolvedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ResolvedDate
		{
			get
			{
				return this._ResolvedDate;
			}
			set
			{
				if ((this._ResolvedDate != value))
				{
					this.OnResolvedDateChanging(value);
					this.SendPropertyChanging();
					this._ResolvedDate = value;
					this.SendPropertyChanged("ResolvedDate");
					this.OnResolvedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClosedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ClosedDate
		{
			get
			{
				return this._ClosedDate;
			}
			set
			{
				if ((this._ClosedDate != value))
				{
					this.OnClosedDateChanging(value);
					this.SendPropertyChanging();
					this._ClosedDate = value;
					this.SendPropertyChanged("ClosedDate");
					this.OnClosedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UtilityDepartmentID", DbType="Int")]
		public System.Nullable<int> UtilityDepartmentID
		{
			get
			{
				return this._UtilityDepartmentID;
			}
			set
			{
				if ((this._UtilityDepartmentID != value))
				{
					if (this._UtilityDepartment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUtilityDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._UtilityDepartmentID = value;
					this.SendPropertyChanged("UtilityDepartmentID");
					this.OnUtilityDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MainUtilityIssueID", DbType="Int")]
		public System.Nullable<int> MainUtilityIssueID
		{
			get
			{
				return this._MainUtilityIssueID;
			}
			set
			{
				if ((this._MainUtilityIssueID != value))
				{
					if (this._UtilityIssue1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMainUtilityIssueIDChanging(value);
					this.SendPropertyChanging();
					this._MainUtilityIssueID = value;
					this.SendPropertyChanged("MainUtilityIssueID");
					this.OnMainUtilityIssueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lat", DbType="Float NOT NULL")]
		public double Lat
		{
			get
			{
				return this._Lat;
			}
			set
			{
				if ((this._Lat != value))
				{
					this.OnLatChanging(value);
					this.SendPropertyChanging();
					this._Lat = value;
					this.SendPropertyChanged("Lat");
					this.OnLatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lng", DbType="Float NOT NULL")]
		public double Lng
		{
			get
			{
				return this._Lng;
			}
			set
			{
				if ((this._Lng != value))
				{
					this.OnLngChanging(value);
					this.SendPropertyChanging();
					this._Lng = value;
					this.SendPropertyChanged("Lng");
					this.OnLngChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(MAX)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkFlow", DbType="NVarChar(MAX)")]
		public string WorkFlow
		{
			get
			{
				return this._WorkFlow;
			}
			set
			{
				if ((this._WorkFlow != value))
				{
					this.OnWorkFlowChanging(value);
					this.SendPropertyChanging();
					this._WorkFlow = value;
					this.SendPropertyChanged("WorkFlow");
					this.OnWorkFlowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Solution", DbType="NVarChar(MAX)")]
		public string Solution
		{
			get
			{
				return this._Solution;
			}
			set
			{
				if ((this._Solution != value))
				{
					this.OnSolutionChanging(value);
					this.SendPropertyChanging();
					this._Solution = value;
					this.SendPropertyChanged("Solution");
					this.OnSolutionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRemoved", DbType="Bit NOT NULL")]
		public bool IsRemoved
		{
			get
			{
				return this._IsRemoved;
			}
			set
			{
				if ((this._IsRemoved != value))
				{
					this.OnIsRemovedChanging(value);
					this.SendPropertyChanging();
					this._IsRemoved = value;
					this.SendPropertyChanged("IsRemoved");
					this.OnIsRemovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UtilityIssue_UtilityIssue", Storage="_UtilityIssues", ThisKey="ID", OtherKey="MainUtilityIssueID")]
		public EntitySet<UtilityIssue> UtilityIssues
		{
			get
			{
				return this._UtilityIssues;
			}
			set
			{
				this._UtilityIssues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UtilityIssue_UtilityIssueComment", Storage="_UtilityIssueComments", ThisKey="ID", OtherKey="UtilityIssueID")]
		public EntitySet<UtilityIssueComment> UtilityIssueComments
		{
			get
			{
				return this._UtilityIssueComments;
			}
			set
			{
				this._UtilityIssueComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UtilityIssue_UtilityIssueHistory", Storage="_UtilityIssueHistories", ThisKey="ID", OtherKey="UtilityIssueID")]
		public EntitySet<UtilityIssueHistory> UtilityIssueHistories
		{
			get
			{
				return this._UtilityIssueHistories;
			}
			set
			{
				this._UtilityIssueHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UtilityIssue_UtilityIssueTag", Storage="_UtilityIssueTags", ThisKey="ID", OtherKey="UtilityIssueID")]
		public EntitySet<UtilityIssueTag> UtilityIssueTags
		{
			get
			{
				return this._UtilityIssueTags;
			}
			set
			{
				this._UtilityIssueTags.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UtilityIssue_UtilityPhoto", Storage="_UtilityPhotos", ThisKey="ID", OtherKey="UtilityIssueID")]
		public EntitySet<UtilityPhoto> UtilityPhotos
		{
			get
			{
				return this._UtilityPhotos;
			}
			set
			{
				this._UtilityPhotos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_UtilityIssue", Storage="_City", ThisKey="CityID", OtherKey="ID", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.UtilityIssues.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.UtilityIssues.Add(this);
						this._CityID = value.ID;
					}
					else
					{
						this._CityID = default(int);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UtilityIssue", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UtilityIssues.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UtilityIssues.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UtilityDepartment_UtilityIssue", Storage="_UtilityDepartment", ThisKey="UtilityDepartmentID", OtherKey="ID", IsForeignKey=true)]
		public UtilityDepartment UtilityDepartment
		{
			get
			{
				return this._UtilityDepartment.Entity;
			}
			set
			{
				UtilityDepartment previousValue = this._UtilityDepartment.Entity;
				if (((previousValue != value) 
							|| (this._UtilityDepartment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UtilityDepartment.Entity = null;
						previousValue.UtilityIssues.Remove(this);
					}
					this._UtilityDepartment.Entity = value;
					if ((value != null))
					{
						value.UtilityIssues.Add(this);
						this._UtilityDepartmentID = value.ID;
					}
					else
					{
						this._UtilityDepartmentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UtilityDepartment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UtilityIssue_UtilityIssue", Storage="_UtilityIssue1", ThisKey="MainUtilityIssueID", OtherKey="ID", IsForeignKey=true)]
		public UtilityIssue UtilityIssue1
		{
			get
			{
				return this._UtilityIssue1.Entity;
			}
			set
			{
				UtilityIssue previousValue = this._UtilityIssue1.Entity;
				if (((previousValue != value) 
							|| (this._UtilityIssue1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UtilityIssue1.Entity = null;
						previousValue.UtilityIssues.Remove(this);
					}
					this._UtilityIssue1.Entity = value;
					if ((value != null))
					{
						value.UtilityIssues.Add(this);
						this._MainUtilityIssueID = value.ID;
					}
					else
					{
						this._MainUtilityIssueID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UtilityIssue1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UtilityIssues(UtilityIssue entity)
		{
			this.SendPropertyChanging();
			entity.UtilityIssue1 = this;
		}
		
		private void detach_UtilityIssues(UtilityIssue entity)
		{
			this.SendPropertyChanging();
			entity.UtilityIssue1 = null;
		}
		
		private void attach_UtilityIssueComments(UtilityIssueComment entity)
		{
			this.SendPropertyChanging();
			entity.UtilityIssue = this;
		}
		
		private void detach_UtilityIssueComments(UtilityIssueComment entity)
		{
			this.SendPropertyChanging();
			entity.UtilityIssue = null;
		}
		
		private void attach_UtilityIssueHistories(UtilityIssueHistory entity)
		{
			this.SendPropertyChanging();
			entity.UtilityIssue = this;
		}
		
		private void detach_UtilityIssueHistories(UtilityIssueHistory entity)
		{
			this.SendPropertyChanging();
			entity.UtilityIssue = null;
		}
		
		private void attach_UtilityIssueTags(UtilityIssueTag entity)
		{
			this.SendPropertyChanging();
			entity.UtilityIssue = this;
		}
		
		private void detach_UtilityIssueTags(UtilityIssueTag entity)
		{
			this.SendPropertyChanging();
			entity.UtilityIssue = null;
		}
		
		private void attach_UtilityPhotos(UtilityPhoto entity)
		{
			this.SendPropertyChanging();
			entity.UtilityIssue = this;
		}
		
		private void detach_UtilityPhotos(UtilityPhoto entity)
		{
			this.SendPropertyChanging();
			entity.UtilityIssue = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UtilityIssueComment")]
	public partial class UtilityIssueComment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UtilityIssueID;
		
		private int _CommentID;
		
		private EntityRef<Comment> _Comment;
		
		private EntityRef<UtilityIssue> _UtilityIssue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUtilityIssueIDChanging(int value);
    partial void OnUtilityIssueIDChanged();
    partial void OnCommentIDChanging(int value);
    partial void OnCommentIDChanged();
    #endregion
		
		public UtilityIssueComment()
		{
			this._Comment = default(EntityRef<Comment>);
			this._UtilityIssue = default(EntityRef<UtilityIssue>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UtilityIssueID", DbType="Int NOT NULL")]
		public int UtilityIssueID
		{
			get
			{
				return this._UtilityIssueID;
			}
			set
			{
				if ((this._UtilityIssueID != value))
				{
					if (this._UtilityIssue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUtilityIssueIDChanging(value);
					this.SendPropertyChanging();
					this._UtilityIssueID = value;
					this.SendPropertyChanged("UtilityIssueID");
					this.OnUtilityIssueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentID", DbType="Int NOT NULL")]
		public int CommentID
		{
			get
			{
				return this._CommentID;
			}
			set
			{
				if ((this._CommentID != value))
				{
					if (this._Comment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommentIDChanging(value);
					this.SendPropertyChanging();
					this._CommentID = value;
					this.SendPropertyChanged("CommentID");
					this.OnCommentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_UtilityIssueComment", Storage="_Comment", ThisKey="CommentID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Comment Comment
		{
			get
			{
				return this._Comment.Entity;
			}
			set
			{
				Comment previousValue = this._Comment.Entity;
				if (((previousValue != value) 
							|| (this._Comment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Comment.Entity = null;
						previousValue.UtilityIssueComments.Remove(this);
					}
					this._Comment.Entity = value;
					if ((value != null))
					{
						value.UtilityIssueComments.Add(this);
						this._CommentID = value.ID;
					}
					else
					{
						this._CommentID = default(int);
					}
					this.SendPropertyChanged("Comment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UtilityIssue_UtilityIssueComment", Storage="_UtilityIssue", ThisKey="UtilityIssueID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public UtilityIssue UtilityIssue
		{
			get
			{
				return this._UtilityIssue.Entity;
			}
			set
			{
				UtilityIssue previousValue = this._UtilityIssue.Entity;
				if (((previousValue != value) 
							|| (this._UtilityIssue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UtilityIssue.Entity = null;
						previousValue.UtilityIssueComments.Remove(this);
					}
					this._UtilityIssue.Entity = value;
					if ((value != null))
					{
						value.UtilityIssueComments.Add(this);
						this._UtilityIssueID = value.ID;
					}
					else
					{
						this._UtilityIssueID = default(int);
					}
					this.SendPropertyChanged("UtilityIssue");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UtilityIssueHistory")]
	public partial class UtilityIssueHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UtilityIssueID;
		
		private int _UserID;
		
		private System.DateTime _HistoryDate;
		
		private System.DateTime _AddedDate;
		
		private System.Nullable<System.DateTime> _AcceptedDate;
		
		private System.Nullable<System.DateTime> _ResolvedDate;
		
		private System.Nullable<System.DateTime> _ClosedDate;
		
		private System.Nullable<int> _UtilityDepartmentID;
		
		private System.Nullable<int> _MainUtilityIssueID;
		
		private double _Lat;
		
		private double _Lng;
		
		private string _Address;
		
		private string _Description;
		
		private string _WorkFlow;
		
		private string _Solution;
		
		private int _Status;
		
		private bool _IsRemoved;
		
		private EntitySet<UtilityIssueHistory> _UtilityIssueHistories;
		
		private EntityRef<UtilityIssueHistory> _UtilityIssueHistory1;
		
		private EntityRef<User> _User;
		
		private EntityRef<UtilityDepartment> _UtilityDepartment;
		
		private EntityRef<UtilityIssue> _UtilityIssue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUtilityIssueIDChanging(int value);
    partial void OnUtilityIssueIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnHistoryDateChanging(System.DateTime value);
    partial void OnHistoryDateChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnAcceptedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAcceptedDateChanged();
    partial void OnResolvedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnResolvedDateChanged();
    partial void OnClosedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnClosedDateChanged();
    partial void OnUtilityDepartmentIDChanging(System.Nullable<int> value);
    partial void OnUtilityDepartmentIDChanged();
    partial void OnMainUtilityIssueIDChanging(System.Nullable<int> value);
    partial void OnMainUtilityIssueIDChanged();
    partial void OnLatChanging(double value);
    partial void OnLatChanged();
    partial void OnLngChanging(double value);
    partial void OnLngChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnWorkFlowChanging(string value);
    partial void OnWorkFlowChanged();
    partial void OnSolutionChanging(string value);
    partial void OnSolutionChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnIsRemovedChanging(bool value);
    partial void OnIsRemovedChanged();
    #endregion
		
		public UtilityIssueHistory()
		{
			this._UtilityIssueHistories = new EntitySet<UtilityIssueHistory>(new Action<UtilityIssueHistory>(this.attach_UtilityIssueHistories), new Action<UtilityIssueHistory>(this.detach_UtilityIssueHistories));
			this._UtilityIssueHistory1 = default(EntityRef<UtilityIssueHistory>);
			this._User = default(EntityRef<User>);
			this._UtilityDepartment = default(EntityRef<UtilityDepartment>);
			this._UtilityIssue = default(EntityRef<UtilityIssue>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UtilityIssueID", DbType="Int NOT NULL")]
		public int UtilityIssueID
		{
			get
			{
				return this._UtilityIssueID;
			}
			set
			{
				if ((this._UtilityIssueID != value))
				{
					if (this._UtilityIssue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUtilityIssueIDChanging(value);
					this.SendPropertyChanging();
					this._UtilityIssueID = value;
					this.SendPropertyChanged("UtilityIssueID");
					this.OnUtilityIssueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HistoryDate", DbType="DateTime NOT NULL")]
		public System.DateTime HistoryDate
		{
			get
			{
				return this._HistoryDate;
			}
			set
			{
				if ((this._HistoryDate != value))
				{
					this.OnHistoryDateChanging(value);
					this.SendPropertyChanging();
					this._HistoryDate = value;
					this.SendPropertyChanged("HistoryDate");
					this.OnHistoryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcceptedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AcceptedDate
		{
			get
			{
				return this._AcceptedDate;
			}
			set
			{
				if ((this._AcceptedDate != value))
				{
					this.OnAcceptedDateChanging(value);
					this.SendPropertyChanging();
					this._AcceptedDate = value;
					this.SendPropertyChanged("AcceptedDate");
					this.OnAcceptedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResolvedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ResolvedDate
		{
			get
			{
				return this._ResolvedDate;
			}
			set
			{
				if ((this._ResolvedDate != value))
				{
					this.OnResolvedDateChanging(value);
					this.SendPropertyChanging();
					this._ResolvedDate = value;
					this.SendPropertyChanged("ResolvedDate");
					this.OnResolvedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClosedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ClosedDate
		{
			get
			{
				return this._ClosedDate;
			}
			set
			{
				if ((this._ClosedDate != value))
				{
					this.OnClosedDateChanging(value);
					this.SendPropertyChanging();
					this._ClosedDate = value;
					this.SendPropertyChanged("ClosedDate");
					this.OnClosedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UtilityDepartmentID", DbType="Int")]
		public System.Nullable<int> UtilityDepartmentID
		{
			get
			{
				return this._UtilityDepartmentID;
			}
			set
			{
				if ((this._UtilityDepartmentID != value))
				{
					if (this._UtilityDepartment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUtilityDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._UtilityDepartmentID = value;
					this.SendPropertyChanged("UtilityDepartmentID");
					this.OnUtilityDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MainUtilityIssueID", DbType="Int")]
		public System.Nullable<int> MainUtilityIssueID
		{
			get
			{
				return this._MainUtilityIssueID;
			}
			set
			{
				if ((this._MainUtilityIssueID != value))
				{
					if (this._UtilityIssueHistory1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMainUtilityIssueIDChanging(value);
					this.SendPropertyChanging();
					this._MainUtilityIssueID = value;
					this.SendPropertyChanged("MainUtilityIssueID");
					this.OnMainUtilityIssueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lat", DbType="Float NOT NULL")]
		public double Lat
		{
			get
			{
				return this._Lat;
			}
			set
			{
				if ((this._Lat != value))
				{
					this.OnLatChanging(value);
					this.SendPropertyChanging();
					this._Lat = value;
					this.SendPropertyChanged("Lat");
					this.OnLatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lng", DbType="Float NOT NULL")]
		public double Lng
		{
			get
			{
				return this._Lng;
			}
			set
			{
				if ((this._Lng != value))
				{
					this.OnLngChanging(value);
					this.SendPropertyChanging();
					this._Lng = value;
					this.SendPropertyChanged("Lng");
					this.OnLngChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(MAX)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkFlow", DbType="NVarChar(MAX)")]
		public string WorkFlow
		{
			get
			{
				return this._WorkFlow;
			}
			set
			{
				if ((this._WorkFlow != value))
				{
					this.OnWorkFlowChanging(value);
					this.SendPropertyChanging();
					this._WorkFlow = value;
					this.SendPropertyChanged("WorkFlow");
					this.OnWorkFlowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Solution", DbType="NVarChar(MAX)")]
		public string Solution
		{
			get
			{
				return this._Solution;
			}
			set
			{
				if ((this._Solution != value))
				{
					this.OnSolutionChanging(value);
					this.SendPropertyChanging();
					this._Solution = value;
					this.SendPropertyChanged("Solution");
					this.OnSolutionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRemoved", DbType="Bit NOT NULL")]
		public bool IsRemoved
		{
			get
			{
				return this._IsRemoved;
			}
			set
			{
				if ((this._IsRemoved != value))
				{
					this.OnIsRemovedChanging(value);
					this.SendPropertyChanging();
					this._IsRemoved = value;
					this.SendPropertyChanged("IsRemoved");
					this.OnIsRemovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UtilityIssueHistory_UtilityIssueHistory", Storage="_UtilityIssueHistories", ThisKey="ID", OtherKey="MainUtilityIssueID")]
		public EntitySet<UtilityIssueHistory> UtilityIssueHistories
		{
			get
			{
				return this._UtilityIssueHistories;
			}
			set
			{
				this._UtilityIssueHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UtilityIssueHistory_UtilityIssueHistory", Storage="_UtilityIssueHistory1", ThisKey="MainUtilityIssueID", OtherKey="ID", IsForeignKey=true)]
		public UtilityIssueHistory UtilityIssueHistory1
		{
			get
			{
				return this._UtilityIssueHistory1.Entity;
			}
			set
			{
				UtilityIssueHistory previousValue = this._UtilityIssueHistory1.Entity;
				if (((previousValue != value) 
							|| (this._UtilityIssueHistory1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UtilityIssueHistory1.Entity = null;
						previousValue.UtilityIssueHistories.Remove(this);
					}
					this._UtilityIssueHistory1.Entity = value;
					if ((value != null))
					{
						value.UtilityIssueHistories.Add(this);
						this._MainUtilityIssueID = value.ID;
					}
					else
					{
						this._MainUtilityIssueID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UtilityIssueHistory1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UtilityIssueHistory", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UtilityIssueHistories.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UtilityIssueHistories.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UtilityDepartment_UtilityIssueHistory", Storage="_UtilityDepartment", ThisKey="UtilityDepartmentID", OtherKey="ID", IsForeignKey=true)]
		public UtilityDepartment UtilityDepartment
		{
			get
			{
				return this._UtilityDepartment.Entity;
			}
			set
			{
				UtilityDepartment previousValue = this._UtilityDepartment.Entity;
				if (((previousValue != value) 
							|| (this._UtilityDepartment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UtilityDepartment.Entity = null;
						previousValue.UtilityIssueHistories.Remove(this);
					}
					this._UtilityDepartment.Entity = value;
					if ((value != null))
					{
						value.UtilityIssueHistories.Add(this);
						this._UtilityDepartmentID = value.ID;
					}
					else
					{
						this._UtilityDepartmentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UtilityDepartment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UtilityIssue_UtilityIssueHistory", Storage="_UtilityIssue", ThisKey="UtilityIssueID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public UtilityIssue UtilityIssue
		{
			get
			{
				return this._UtilityIssue.Entity;
			}
			set
			{
				UtilityIssue previousValue = this._UtilityIssue.Entity;
				if (((previousValue != value) 
							|| (this._UtilityIssue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UtilityIssue.Entity = null;
						previousValue.UtilityIssueHistories.Remove(this);
					}
					this._UtilityIssue.Entity = value;
					if ((value != null))
					{
						value.UtilityIssueHistories.Add(this);
						this._UtilityIssueID = value.ID;
					}
					else
					{
						this._UtilityIssueID = default(int);
					}
					this.SendPropertyChanged("UtilityIssue");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UtilityIssueHistories(UtilityIssueHistory entity)
		{
			this.SendPropertyChanging();
			entity.UtilityIssueHistory1 = this;
		}
		
		private void detach_UtilityIssueHistories(UtilityIssueHistory entity)
		{
			this.SendPropertyChanging();
			entity.UtilityIssueHistory1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UtilityIssueTag")]
	public partial class UtilityIssueTag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UtilityIssueID;
		
		private int _UtilityTagID;
		
		private EntityRef<UtilityIssue> _UtilityIssue;
		
		private EntityRef<UtilityTag> _UtilityTag;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUtilityIssueIDChanging(int value);
    partial void OnUtilityIssueIDChanged();
    partial void OnUtilityTagIDChanging(int value);
    partial void OnUtilityTagIDChanged();
    #endregion
		
		public UtilityIssueTag()
		{
			this._UtilityIssue = default(EntityRef<UtilityIssue>);
			this._UtilityTag = default(EntityRef<UtilityTag>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UtilityIssueID", DbType="Int NOT NULL")]
		public int UtilityIssueID
		{
			get
			{
				return this._UtilityIssueID;
			}
			set
			{
				if ((this._UtilityIssueID != value))
				{
					if (this._UtilityIssue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUtilityIssueIDChanging(value);
					this.SendPropertyChanging();
					this._UtilityIssueID = value;
					this.SendPropertyChanged("UtilityIssueID");
					this.OnUtilityIssueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UtilityTagID", DbType="Int NOT NULL")]
		public int UtilityTagID
		{
			get
			{
				return this._UtilityTagID;
			}
			set
			{
				if ((this._UtilityTagID != value))
				{
					if (this._UtilityTag.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUtilityTagIDChanging(value);
					this.SendPropertyChanging();
					this._UtilityTagID = value;
					this.SendPropertyChanged("UtilityTagID");
					this.OnUtilityTagIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UtilityIssue_UtilityIssueTag", Storage="_UtilityIssue", ThisKey="UtilityIssueID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public UtilityIssue UtilityIssue
		{
			get
			{
				return this._UtilityIssue.Entity;
			}
			set
			{
				UtilityIssue previousValue = this._UtilityIssue.Entity;
				if (((previousValue != value) 
							|| (this._UtilityIssue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UtilityIssue.Entity = null;
						previousValue.UtilityIssueTags.Remove(this);
					}
					this._UtilityIssue.Entity = value;
					if ((value != null))
					{
						value.UtilityIssueTags.Add(this);
						this._UtilityIssueID = value.ID;
					}
					else
					{
						this._UtilityIssueID = default(int);
					}
					this.SendPropertyChanged("UtilityIssue");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UtilityTag_UtilityIssueTag", Storage="_UtilityTag", ThisKey="UtilityTagID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public UtilityTag UtilityTag
		{
			get
			{
				return this._UtilityTag.Entity;
			}
			set
			{
				UtilityTag previousValue = this._UtilityTag.Entity;
				if (((previousValue != value) 
							|| (this._UtilityTag.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UtilityTag.Entity = null;
						previousValue.UtilityIssueTags.Remove(this);
					}
					this._UtilityTag.Entity = value;
					if ((value != null))
					{
						value.UtilityIssueTags.Add(this);
						this._UtilityTagID = value.ID;
					}
					else
					{
						this._UtilityTagID = default(int);
					}
					this.SendPropertyChanged("UtilityTag");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UtilityPhoto")]
	public partial class UtilityPhoto : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _UtilityIssueID;
		
		private System.Nullable<int> _UserID;
		
		private string _Image;
		
		private System.DateTime _AddedDate;
		
		private int _State;
		
		private bool _IsRemoved;
		
		private EntityRef<User> _User;
		
		private EntityRef<UtilityIssue> _UtilityIssue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUtilityIssueIDChanging(System.Nullable<int> value);
    partial void OnUtilityIssueIDChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnStateChanging(int value);
    partial void OnStateChanged();
    partial void OnIsRemovedChanging(bool value);
    partial void OnIsRemovedChanged();
    #endregion
		
		public UtilityPhoto()
		{
			this._User = default(EntityRef<User>);
			this._UtilityIssue = default(EntityRef<UtilityIssue>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UtilityIssueID", DbType="Int")]
		public System.Nullable<int> UtilityIssueID
		{
			get
			{
				return this._UtilityIssueID;
			}
			set
			{
				if ((this._UtilityIssueID != value))
				{
					if (this._UtilityIssue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUtilityIssueIDChanging(value);
					this.SendPropertyChanging();
					this._UtilityIssueID = value;
					this.SendPropertyChanged("UtilityIssueID");
					this.OnUtilityIssueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="Int NOT NULL")]
		public int State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRemoved", DbType="Bit NOT NULL")]
		public bool IsRemoved
		{
			get
			{
				return this._IsRemoved;
			}
			set
			{
				if ((this._IsRemoved != value))
				{
					this.OnIsRemovedChanging(value);
					this.SendPropertyChanging();
					this._IsRemoved = value;
					this.SendPropertyChanged("IsRemoved");
					this.OnIsRemovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UtilityPhoto", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UtilityPhotos.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UtilityPhotos.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UtilityIssue_UtilityPhoto", Storage="_UtilityIssue", ThisKey="UtilityIssueID", OtherKey="ID", IsForeignKey=true)]
		public UtilityIssue UtilityIssue
		{
			get
			{
				return this._UtilityIssue.Entity;
			}
			set
			{
				UtilityIssue previousValue = this._UtilityIssue.Entity;
				if (((previousValue != value) 
							|| (this._UtilityIssue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UtilityIssue.Entity = null;
						previousValue.UtilityPhotos.Remove(this);
					}
					this._UtilityIssue.Entity = value;
					if ((value != null))
					{
						value.UtilityPhotos.Add(this);
						this._UtilityIssueID = value.ID;
					}
					else
					{
						this._UtilityIssueID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UtilityIssue");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UtilityTag")]
	public partial class UtilityTag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<UtilityIssueTag> _UtilityIssueTags;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public UtilityTag()
		{
			this._UtilityIssueTags = new EntitySet<UtilityIssueTag>(new Action<UtilityIssueTag>(this.attach_UtilityIssueTags), new Action<UtilityIssueTag>(this.detach_UtilityIssueTags));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UtilityTag_UtilityIssueTag", Storage="_UtilityIssueTags", ThisKey="ID", OtherKey="UtilityTagID")]
		public EntitySet<UtilityIssueTag> UtilityIssueTags
		{
			get
			{
				return this._UtilityIssueTags;
			}
			set
			{
				this._UtilityIssueTags.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UtilityIssueTags(UtilityIssueTag entity)
		{
			this.SendPropertyChanging();
			entity.UtilityTag = this;
		}
		
		private void detach_UtilityIssueTags(UtilityIssueTag entity)
		{
			this.SendPropertyChanging();
			entity.UtilityTag = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VisualizationColumn")]
	public partial class VisualizationColumn : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _VisualizationID;
		
		private int _Number;
		
		private string _Name;
		
		private int _Type;
		
		private string _FilterValues;
		
		private EntityRef<Visualization> _Visualization;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnVisualizationIDChanging(int value);
    partial void OnVisualizationIDChanged();
    partial void OnNumberChanging(int value);
    partial void OnNumberChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnFilterValuesChanging(string value);
    partial void OnFilterValuesChanged();
    #endregion
		
		public VisualizationColumn()
		{
			this._Visualization = default(EntityRef<Visualization>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisualizationID", DbType="Int NOT NULL")]
		public int VisualizationID
		{
			get
			{
				return this._VisualizationID;
			}
			set
			{
				if ((this._VisualizationID != value))
				{
					if (this._Visualization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVisualizationIDChanging(value);
					this.SendPropertyChanging();
					this._VisualizationID = value;
					this.SendPropertyChanged("VisualizationID");
					this.OnVisualizationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="Int NOT NULL")]
		public int Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilterValues", DbType="NVarChar(MAX)")]
		public string FilterValues
		{
			get
			{
				return this._FilterValues;
			}
			set
			{
				if ((this._FilterValues != value))
				{
					this.OnFilterValuesChanging(value);
					this.SendPropertyChanging();
					this._FilterValues = value;
					this.SendPropertyChanged("FilterValues");
					this.OnFilterValuesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Visualization_VisualizationColumn", Storage="_Visualization", ThisKey="VisualizationID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Visualization Visualization
		{
			get
			{
				return this._Visualization.Entity;
			}
			set
			{
				Visualization previousValue = this._Visualization.Entity;
				if (((previousValue != value) 
							|| (this._Visualization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Visualization.Entity = null;
						previousValue.VisualizationColumns.Remove(this);
					}
					this._Visualization.Entity = value;
					if ((value != null))
					{
						value.VisualizationColumns.Add(this);
						this._VisualizationID = value.ID;
					}
					else
					{
						this._VisualizationID = default(int);
					}
					this.SendPropertyChanged("Visualization");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VisualizationUser")]
	public partial class VisualizationUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _VisualizationID;
		
		private int _UserID;
		
		private EntityRef<User> _User;
		
		private EntityRef<Visualization> _Visualization;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnVisualizationIDChanging(int value);
    partial void OnVisualizationIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public VisualizationUser()
		{
			this._User = default(EntityRef<User>);
			this._Visualization = default(EntityRef<Visualization>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisualizationID", DbType="Int NOT NULL")]
		public int VisualizationID
		{
			get
			{
				return this._VisualizationID;
			}
			set
			{
				if ((this._VisualizationID != value))
				{
					if (this._Visualization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVisualizationIDChanging(value);
					this.SendPropertyChanging();
					this._VisualizationID = value;
					this.SendPropertyChanged("VisualizationID");
					this.OnVisualizationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_VisualizationUser", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.VisualizationUsers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.VisualizationUsers.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Visualization_VisualizationUser", Storage="_Visualization", ThisKey="VisualizationID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Visualization Visualization
		{
			get
			{
				return this._Visualization.Entity;
			}
			set
			{
				Visualization previousValue = this._Visualization.Entity;
				if (((previousValue != value) 
							|| (this._Visualization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Visualization.Entity = null;
						previousValue.VisualizationUsers.Remove(this);
					}
					this._Visualization.Entity = value;
					if ((value != null))
					{
						value.VisualizationUsers.Add(this);
						this._VisualizationID = value.ID;
					}
					else
					{
						this._VisualizationID = default(int);
					}
					this.SendPropertyChanged("Visualization");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Visualization")]
	public partial class Visualization : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _ShareLink;
		
		private int _UserID;
		
		private string _Name;
		
		private System.DateTime _AddedDate;
		
		private EntitySet<VisualizationColumn> _VisualizationColumns;
		
		private EntitySet<VisualizationUser> _VisualizationUsers;
		
		private EntitySet<VisualizationItem> _VisualizationItems;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnShareLinkChanging(string value);
    partial void OnShareLinkChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    #endregion
		
		public Visualization()
		{
			this._VisualizationColumns = new EntitySet<VisualizationColumn>(new Action<VisualizationColumn>(this.attach_VisualizationColumns), new Action<VisualizationColumn>(this.detach_VisualizationColumns));
			this._VisualizationUsers = new EntitySet<VisualizationUser>(new Action<VisualizationUser>(this.attach_VisualizationUsers), new Action<VisualizationUser>(this.detach_VisualizationUsers));
			this._VisualizationItems = new EntitySet<VisualizationItem>(new Action<VisualizationItem>(this.attach_VisualizationItems), new Action<VisualizationItem>(this.detach_VisualizationItems));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShareLink", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string ShareLink
		{
			get
			{
				return this._ShareLink;
			}
			set
			{
				if ((this._ShareLink != value))
				{
					this.OnShareLinkChanging(value);
					this.SendPropertyChanging();
					this._ShareLink = value;
					this.SendPropertyChanged("ShareLink");
					this.OnShareLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(300)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Visualization_VisualizationColumn", Storage="_VisualizationColumns", ThisKey="ID", OtherKey="VisualizationID")]
		public EntitySet<VisualizationColumn> VisualizationColumns
		{
			get
			{
				return this._VisualizationColumns;
			}
			set
			{
				this._VisualizationColumns.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Visualization_VisualizationUser", Storage="_VisualizationUsers", ThisKey="ID", OtherKey="VisualizationID")]
		public EntitySet<VisualizationUser> VisualizationUsers
		{
			get
			{
				return this._VisualizationUsers;
			}
			set
			{
				this._VisualizationUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Visualization_VisualizationItem", Storage="_VisualizationItems", ThisKey="ID", OtherKey="VisualizationID")]
		public EntitySet<VisualizationItem> VisualizationItems
		{
			get
			{
				return this._VisualizationItems;
			}
			set
			{
				this._VisualizationItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Visualization", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Visualizations.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Visualizations.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VisualizationColumns(VisualizationColumn entity)
		{
			this.SendPropertyChanging();
			entity.Visualization = this;
		}
		
		private void detach_VisualizationColumns(VisualizationColumn entity)
		{
			this.SendPropertyChanging();
			entity.Visualization = null;
		}
		
		private void attach_VisualizationUsers(VisualizationUser entity)
		{
			this.SendPropertyChanging();
			entity.Visualization = this;
		}
		
		private void detach_VisualizationUsers(VisualizationUser entity)
		{
			this.SendPropertyChanging();
			entity.Visualization = null;
		}
		
		private void attach_VisualizationItems(VisualizationItem entity)
		{
			this.SendPropertyChanging();
			entity.Visualization = this;
		}
		
		private void detach_VisualizationItems(VisualizationItem entity)
		{
			this.SendPropertyChanging();
			entity.Visualization = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VisualizationItem")]
	public partial class VisualizationItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _VisualizationID;
		
		private double _Lat;
		
		private double _Lng;
		
		private int _Accuracy;
		
		private string _Data;
		
		private bool _IsHidden;
		
		private EntityRef<Visualization> _Visualization;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnVisualizationIDChanging(int value);
    partial void OnVisualizationIDChanged();
    partial void OnLatChanging(double value);
    partial void OnLatChanged();
    partial void OnLngChanging(double value);
    partial void OnLngChanged();
    partial void OnAccuracyChanging(int value);
    partial void OnAccuracyChanged();
    partial void OnDataChanging(string value);
    partial void OnDataChanged();
    partial void OnIsHiddenChanging(bool value);
    partial void OnIsHiddenChanged();
    #endregion
		
		public VisualizationItem()
		{
			this._Visualization = default(EntityRef<Visualization>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisualizationID", DbType="Int NOT NULL")]
		public int VisualizationID
		{
			get
			{
				return this._VisualizationID;
			}
			set
			{
				if ((this._VisualizationID != value))
				{
					if (this._Visualization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVisualizationIDChanging(value);
					this.SendPropertyChanging();
					this._VisualizationID = value;
					this.SendPropertyChanged("VisualizationID");
					this.OnVisualizationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lat", DbType="Float NOT NULL")]
		public double Lat
		{
			get
			{
				return this._Lat;
			}
			set
			{
				if ((this._Lat != value))
				{
					this.OnLatChanging(value);
					this.SendPropertyChanging();
					this._Lat = value;
					this.SendPropertyChanged("Lat");
					this.OnLatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lng", DbType="Float NOT NULL")]
		public double Lng
		{
			get
			{
				return this._Lng;
			}
			set
			{
				if ((this._Lng != value))
				{
					this.OnLngChanging(value);
					this.SendPropertyChanging();
					this._Lng = value;
					this.SendPropertyChanged("Lng");
					this.OnLngChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Accuracy", DbType="Int NOT NULL")]
		public int Accuracy
		{
			get
			{
				return this._Accuracy;
			}
			set
			{
				if ((this._Accuracy != value))
				{
					this.OnAccuracyChanging(value);
					this.SendPropertyChanging();
					this._Accuracy = value;
					this.SendPropertyChanged("Accuracy");
					this.OnAccuracyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsHidden", DbType="Bit NOT NULL")]
		public bool IsHidden
		{
			get
			{
				return this._IsHidden;
			}
			set
			{
				if ((this._IsHidden != value))
				{
					this.OnIsHiddenChanging(value);
					this.SendPropertyChanging();
					this._IsHidden = value;
					this.SendPropertyChanged("IsHidden");
					this.OnIsHiddenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Visualization_VisualizationItem", Storage="_Visualization", ThisKey="VisualizationID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Visualization Visualization
		{
			get
			{
				return this._Visualization.Entity;
			}
			set
			{
				Visualization previousValue = this._Visualization.Entity;
				if (((previousValue != value) 
							|| (this._Visualization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Visualization.Entity = null;
						previousValue.VisualizationItems.Remove(this);
					}
					this._Visualization.Entity = value;
					if ((value != null))
					{
						value.VisualizationItems.Add(this);
						this._VisualizationID = value.ID;
					}
					else
					{
						this._VisualizationID = default(int);
					}
					this.SendPropertyChanged("Visualization");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BuildingElectricity")]
	public partial class BuildingElectricity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _BuildingID;
		
		private int _PowerOn;
		
		private int _Year;
		
		private int _Consumed;
		
		private EntityRef<Building> _Building;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnBuildingIDChanging(int value);
    partial void OnBuildingIDChanged();
    partial void OnPowerOnChanging(int value);
    partial void OnPowerOnChanged();
    partial void OnYearChanging(int value);
    partial void OnYearChanged();
    partial void OnConsumedChanging(int value);
    partial void OnConsumedChanged();
    #endregion
		
		public BuildingElectricity()
		{
			this._Building = default(EntityRef<Building>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuildingID", DbType="Int NOT NULL")]
		public int BuildingID
		{
			get
			{
				return this._BuildingID;
			}
			set
			{
				if ((this._BuildingID != value))
				{
					if (this._Building.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBuildingIDChanging(value);
					this.SendPropertyChanging();
					this._BuildingID = value;
					this.SendPropertyChanged("BuildingID");
					this.OnBuildingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PowerOn", DbType="Int NOT NULL")]
		public int PowerOn
		{
			get
			{
				return this._PowerOn;
			}
			set
			{
				if ((this._PowerOn != value))
				{
					this.OnPowerOnChanging(value);
					this.SendPropertyChanging();
					this._PowerOn = value;
					this.SendPropertyChanged("PowerOn");
					this.OnPowerOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int NOT NULL")]
		public int Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Consumed", DbType="Int NOT NULL")]
		public int Consumed
		{
			get
			{
				return this._Consumed;
			}
			set
			{
				if ((this._Consumed != value))
				{
					this.OnConsumedChanging(value);
					this.SendPropertyChanging();
					this._Consumed = value;
					this.SendPropertyChanged("Consumed");
					this.OnConsumedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Building_BuildingElectricity", Storage="_Building", ThisKey="BuildingID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Building Building
		{
			get
			{
				return this._Building.Entity;
			}
			set
			{
				Building previousValue = this._Building.Entity;
				if (((previousValue != value) 
							|| (this._Building.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Building.Entity = null;
						previousValue.BuildingElectricities.Remove(this);
					}
					this._Building.Entity = value;
					if ((value != null))
					{
						value.BuildingElectricities.Add(this);
						this._BuildingID = value.ID;
					}
					else
					{
						this._BuildingID = default(int);
					}
					this.SendPropertyChanged("Building");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Building")]
	public partial class Building : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CityID;
		
		private string _Address;
		
		private double _Lat;
		
		private double _Lng;
		
		private System.Nullable<int> _Capacity;
		
		private EntitySet<BuildingElectricity> _BuildingElectricities;
		
		private EntityRef<City> _City;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCityIDChanging(int value);
    partial void OnCityIDChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnLatChanging(double value);
    partial void OnLatChanged();
    partial void OnLngChanging(double value);
    partial void OnLngChanged();
    partial void OnCapacityChanging(System.Nullable<int> value);
    partial void OnCapacityChanged();
    #endregion
		
		public Building()
		{
			this._BuildingElectricities = new EntitySet<BuildingElectricity>(new Action<BuildingElectricity>(this.attach_BuildingElectricities), new Action<BuildingElectricity>(this.detach_BuildingElectricities));
			this._City = default(EntityRef<City>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="Int NOT NULL")]
		public int CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lat", DbType="Float NOT NULL")]
		public double Lat
		{
			get
			{
				return this._Lat;
			}
			set
			{
				if ((this._Lat != value))
				{
					this.OnLatChanging(value);
					this.SendPropertyChanging();
					this._Lat = value;
					this.SendPropertyChanged("Lat");
					this.OnLatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lng", DbType="Float NOT NULL")]
		public double Lng
		{
			get
			{
				return this._Lng;
			}
			set
			{
				if ((this._Lng != value))
				{
					this.OnLngChanging(value);
					this.SendPropertyChanging();
					this._Lng = value;
					this.SendPropertyChanged("Lng");
					this.OnLngChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Capacity", DbType="Int")]
		public System.Nullable<int> Capacity
		{
			get
			{
				return this._Capacity;
			}
			set
			{
				if ((this._Capacity != value))
				{
					this.OnCapacityChanging(value);
					this.SendPropertyChanging();
					this._Capacity = value;
					this.SendPropertyChanged("Capacity");
					this.OnCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Building_BuildingElectricity", Storage="_BuildingElectricities", ThisKey="ID", OtherKey="BuildingID")]
		public EntitySet<BuildingElectricity> BuildingElectricities
		{
			get
			{
				return this._BuildingElectricities;
			}
			set
			{
				this._BuildingElectricities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Building", Storage="_City", ThisKey="CityID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Buildings.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Buildings.Add(this);
						this._CityID = value.ID;
					}
					else
					{
						this._CityID = default(int);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BuildingElectricities(BuildingElectricity entity)
		{
			this.SendPropertyChanging();
			entity.Building = this;
		}
		
		private void detach_BuildingElectricities(BuildingElectricity entity)
		{
			this.SendPropertyChanging();
			entity.Building = null;
		}
	}
}
#pragma warning restore 1591
